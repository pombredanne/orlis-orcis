com.android.vending.billing.IInAppBillingService -> wy.a:
    int consumePurchase(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    int isBillingSupported(int,java.lang.String,java.lang.String) -> b
com.android.vending.billing.IInAppBillingService$Stub -> wy.b:
    java.lang.String DESCRIPTOR -> a
    int TRANSACTION_consumePurchase -> b
    int TRANSACTION_getBuyIntent -> c
    int TRANSACTION_getPurchases -> d
    int TRANSACTION_getSkuDetails -> e
    int TRANSACTION_isBillingSupported -> f
    void <init>() -> <init>
    com.android.vending.billing.IInAppBillingService asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.billing.IInAppBillingService$Stub$Proxy -> wy.c:
    android.os.IBinder mRemote -> g
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    int consumePurchase(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getInterfaceDescriptor() -> getInterfaceDescriptor
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    int isBillingSupported(int,java.lang.String,java.lang.String) -> b
org.cprados.wificellmanager.BuildConfig -> org.cprados.wificellmanager.a:
    java.lang.String APPLICATION_ID -> h
    java.lang.String BUILD_TYPE -> i
    boolean DEBUG -> DEBUG
    java.lang.String FLAVOR -> j
    int VERSION_CODE -> k
    java.lang.String VERSION_NAME -> l
    void <init>() -> <init>
org.cprados.wificellmanager.DataManager -> org.cprados.wificellmanager.b:
    java.lang.String CATEGORY_ACTIONS_WIFI -> m
    java.lang.String CATEGORY_CELL -> n
    java.lang.String CATEGORY_WIFIS -> o
    boolean FULL_VERSION -> p
    java.lang.String KEY_SEPARATOR -> q
    java.lang.String LOGTAG -> LOGTAG
    java.lang.String PREFERENCE_ACTION_WIFI -> r
    java.lang.String PREFERENCE_ACTIVATE -> s
    java.lang.String PREFERENCE_ADD_WIFIS -> t
    java.lang.String PREFERENCE_ADVANCED -> u
    java.lang.String PREFERENCE_CELL_ENABLED -> v
    java.lang.String PREFERENCE_CURRENT_ACTION -> w
    java.lang.String PREFERENCE_CURRENT_CELL -> x
    java.lang.String PREFERENCE_CURRENT_WIFI -> y
    boolean PREFERENCE_DEFAULT_ACTIVATE -> z
    boolean PREFERENCE_DEFAULT_ADD_WIFIS -> A
    int PREFERENCE_DEFAULT_DONATIONS -> B
    boolean PREFERENCE_DEFAULT_EDIT_MODE -> C
    boolean PREFERENCE_DEFAULT_FORCE_UPDATE_LOCATION -> D
    int PREFERENCE_DEFAULT_FREQ -> E
    boolean PREFERENCE_DEFAULT_HAS_DONATED -> F
    boolean PREFERENCE_DEFAULT_MOBILE_DATA_MANAGED -> G
    boolean PREFERENCE_DEFAULT_NOT -> H
    int PREFERENCE_DEFAULT_OFF_AFTER_DISC_TIMEOUT -> I
    boolean PREFERENCE_DEFAULT_TIME_INTERVAL -> J
    java.lang.String PREFERENCE_DEFAULT_TIME_INTERVAL_BEGIN -> K
    java.lang.String PREFERENCE_DEFAULT_TIME_INTERVAL_END -> L
    boolean PREFERENCE_DEFAULT_TRANSACTIONS_RESTORED -> M
    boolean PREFERENCE_DEFAULT_TURN_ON_SCREEN -> N
    boolean PREFERENCE_DEFAULT_UNK_LOCATION_ACTIVATES_WIFI -> O
    int PREFERENCE_DEFAULT_WIZARD_STEP -> P
    java.lang.String PREFERENCE_DONATIONS -> Q
    java.lang.String PREFERENCE_EDIT_MODE -> R
    java.lang.String PREFERENCE_FORCE_UPDATE_LOCATION -> S
    java.lang.String PREFERENCE_FREQ -> T
    java.lang.String PREFERENCE_HAS_DONATED -> U
    java.lang.String PREFERENCE_HISTORY_EXAMPLE -> V
    java.lang.String PREFERENCE_INFLIGHT_WIFI_ACTION -> W
    java.lang.String PREFERENCE_MOBILE_DATA_MANAGED -> X
    java.lang.String PREFERENCE_NOT -> Y
    java.lang.String PREFERENCE_OFF_AFTER_DISC_TIMEOUT -> Z
    java.lang.String PREFERENCE_PENDING_MOBILE_DATA_ACTION -> aa
    java.lang.String PREFERENCE_STATUS -> ab
    java.lang.String PREFERENCE_TIME_INTERVAL -> ac
    java.lang.String PREFERENCE_TIME_INTERVAL_BEGIN -> ad
    java.lang.String PREFERENCE_TIME_INTERVAL_END -> ae
    java.lang.String PREFERENCE_TRANSACTIONS_RESTORED -> af
    java.lang.String PREFERENCE_TURN_ON_SCREEN -> ag
    java.lang.String PREFERENCE_UNK_LOCATION_ACTIVATES_WIFI -> ah
    java.lang.String PREFERENCE_WIFI -> ai
    java.lang.String PREFERENCE_WIFICELL -> aj
    java.lang.String PREFERENCE_WIZARD_STEP -> ak
    java.lang.String TIME_SEPARATOR -> al
    java.util.Comparator sCellComparator -> am
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean addWifiCell(android.content.Context,java.lang.String,int,int) -> a
    void deleteWifiCell(android.content.Context,java.lang.String,int,int) -> b
    void deleteWifiCells(android.content.Context,java.lang.String) -> a
    boolean getActivate(android.content.Context) -> a
    boolean getAddWifis(android.content.Context) -> b
    java.util.Set getAllWifis(android.content.Context) -> c
    boolean getCellEnabled(android.content.Context,int,int) -> a
    int[] getCellOfWifiCellPreference(java.lang.String) -> a
    java.util.Vector getCellsbyWifi(android.content.Context,java.lang.String) -> b
    int getCountCellsEnabled(android.content.Context,java.util.Vector) -> a
    int getCountWifisEnabled(android.content.Context,java.util.Set) -> a
    boolean getCurrentAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction) -> a
    int[] getCurrentCell(android.content.Context) -> d
    boolean getCurrentCellEnabled(android.content.Context) -> e
    java.lang.String getCurrentWifi(android.content.Context) -> f
    int getDonationsCounter(android.content.Context) -> g
    boolean getEditMode(android.content.Context) -> h
    boolean getForceUpdateLocation(android.content.Context) -> i
    int getFrequency(android.content.Context) -> j
    boolean getHasDonated(android.content.Context,boolean) -> a
    org.cprados.wificellmanager.StateMachine$StateEvent[] getInflightWifiAction(android.content.Context) -> k
    boolean getMobileDataManaged(android.content.Context) -> l
    boolean getNotifications(android.content.Context) -> m
    int getNumWifisOfCurrentCell(android.content.Context) -> n
    int getOffAfterDiscTimeout(android.content.Context) -> o
    boolean getPendingMobileDataAction(android.content.Context) -> p
    boolean getRestoredTransactions(android.content.Context) -> q
    org.cprados.wificellmanager.StateMachine$State getState(android.content.Context) -> r
    int[] getTimeIntervalBegin(android.content.Context) -> s
    boolean getTimeIntervalEnabled(android.content.Context) -> t
    int[] getTimeIntervalEnd(android.content.Context) -> u
    boolean getTurnOnScreen(android.content.Context) -> v
    boolean getUnkLocationActivates(android.content.Context) -> w
    boolean getWifiAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,java.lang.String) -> a
    boolean getWifiAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,java.util.Set) -> a
    boolean getWifiCellSelected(android.content.Context,java.lang.String,int,int) -> c
    boolean getWifiEnabled(android.content.Context,java.lang.String) -> c
    java.lang.String getWifiOfWifiCellPreference(java.lang.String) -> b
    java.lang.String getWifiOfWifiPreference(java.lang.String) -> c
    boolean getWifiSelected(android.content.Context,java.lang.String) -> d
    java.util.Set getWifisByCell(android.content.Context,int,int) -> b
    java.util.Set getWifisOfCurrentCell(android.content.Context) -> x
    int getWizardStep(android.content.Context) -> y
    boolean isExistantWifi(android.content.Context,java.lang.String) -> e
    boolean isFullVersion() -> a
    void setActivate(android.content.Context,boolean) -> b
    void setAddWifis(android.content.Context,boolean) -> c
    void setCellEnabled(android.content.Context,int,int,boolean) -> a
    void setCurrentAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,boolean) -> a
    void setCurrentCell(android.content.Context,int,int) -> c
    void setCurrentWifi(android.content.Context,java.lang.String) -> f
    int setDonationsCounter(android.content.Context,boolean) -> d
    void setEditMode(android.content.Context,boolean) -> e
    void setForceUpdateLocation(android.content.Context,boolean) -> f
    void setFrequency(android.content.Context,int) -> a
    void setHasDonated(android.content.Context,boolean) -> g
    void setInflightWifiAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateEvent[]) -> a
    void setMobileDataManaged(android.content.Context,boolean) -> h
    void setNotifications(android.content.Context,boolean) -> i
    void setOffAfterDiscTimeout(android.content.Context,int) -> b
    void setPendingMobileDataAction(android.content.Context,boolean) -> j
    void setRestoredTransations(android.content.Context,boolean) -> k
    void setState(android.content.Context,org.cprados.wificellmanager.StateMachine$State) -> a
    void setTimeIntervalBegin(android.content.Context,int,int) -> d
    void setTimeIntervalEnabled(android.content.Context,boolean) -> l
    void setTimeIntervalEnd(android.content.Context,int,int) -> e
    void setTurnOnScreen(android.content.Context,boolean) -> m
    void setUnkLocationActivates(android.content.Context,boolean) -> n
    void setWifiAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,java.lang.String,boolean) -> a
    void setWifiCellSelected(android.content.Context,java.lang.String,int,int,boolean) -> a
    void setWifiEnabled(android.content.Context,java.lang.String,boolean) -> a
    void setWifiSelected(android.content.Context,java.lang.String,boolean) -> b
    void setWizardStep(android.content.Context,int) -> c
org.cprados.wificellmanager.DataManager$1 -> org.cprados.wificellmanager.c:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compare(int[],int[]) -> a
org.cprados.wificellmanager.EventReceiver -> org.cprados.wificellmanager.EventReceiver:
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void activateReceiver(android.content.Context,boolean) -> o
    long getNextTimeMillis(int,int) -> a
    void requestEvent(android.content.Context,java.util.Date,java.lang.String,android.content.Intent,boolean) -> a
    void requestPeriodicEvents(android.content.Context,int[],long,java.lang.String,android.content.Intent,boolean) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.cprados.wificellmanager.ManagerService -> org.cprados.wificellmanager.ManagerService:
    java.lang.String INIT_ACTION -> an
    java.lang.String LOGTAG -> LOGTAG
    android.os.Bundle mStateData -> ao
    org.cprados.wificellmanager.StateMachine mStateMachine -> ap
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.util.List buildPlan(android.content.Intent,org.cprados.wificellmanager.StateMachine,android.os.Bundle,int) -> a
    void forwardEvent(android.content.Context,java.lang.String,android.content.Intent) -> a
    boolean loadState() -> b
    boolean performAction(org.cprados.wificellmanager.StateMachine$StateAction,org.cprados.wificellmanager.RequestedActionManager$RequestedAction,java.util.Date) -> a
    java.util.List performPlan(java.util.List,org.cprados.wificellmanager.RequestedActionManager$RequestedAction,java.util.Date) -> a
    void recordActivity(org.cprados.wificellmanager.StateMachine$State,org.cprados.wificellmanager.StateMachine$State,java.util.List,org.cprados.wificellmanager.RequestedActionManager$RequestedAction,java.util.Date,android.os.Bundle) -> a
    void saveState() -> c
    void subscribeService(boolean) -> a
    org.cprados.wificellmanager.StateMachine$StateAction validateAction(org.cprados.wificellmanager.StateMachine$StateAction) -> a
    java.util.List validatePlan(java.util.List) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
org.cprados.wificellmanager.ManagerService$1 -> org.cprados.wificellmanager.d:
    int[] $SwitchMap$org$cprados$wificellmanager$StateMachine$StateAction -> aq
    void <clinit>() -> <clinit>
org.cprados.wificellmanager.ManagerService$ManagerServiceBinder -> org.cprados.wificellmanager.e:
    org.cprados.wificellmanager.ManagerService this$0 -> ar
    void <init>(org.cprados.wificellmanager.ManagerService) -> <init>
    void syncForwardEvent(android.content.Context,java.lang.String,android.content.Intent) -> b
org.cprados.wificellmanager.R -> org.cprados.wificellmanager.f:
    void <init>() -> <init>
org.cprados.wificellmanager.R$array -> org.cprados.wificellmanager.R$array:
    int preference_names_freq -> preference_names_freq
    int preference_names_timeout_after_disc -> preference_names_timeout_after_disc
    int preference_values_timeout_after_disc -> preference_values_timeout_after_disc
    int preferences_values_freq -> preferences_values_freq
    void <init>() -> <init>
org.cprados.wificellmanager.R$attr -> org.cprados.wificellmanager.R$attr:
    int bold -> bold
    int color_stripe -> color_stripe
    int icon -> icon
    void <init>() -> <init>
org.cprados.wificellmanager.R$color -> org.cprados.wificellmanager.R$color:
    int color_audit_trail_green -> color_audit_trail_green
    int color_audit_trail_red -> color_audit_trail_red
    int color_audit_trail_yellow -> color_audit_trail_yellow
    int color_background_buttons_bar -> color_background_buttons_bar
    void <init>() -> <init>
org.cprados.wificellmanager.R$drawable -> org.cprados.wificellmanager.R$drawable:
    int ic_dialog_info -> ic_dialog_info
    int ic_dialog_time_grey -> ic_dialog_time_grey
    int ic_dialog_time_white -> ic_dialog_time_white
    int ic_launcher_icon -> ic_launcher_icon
    int ic_menu_agenda_grey -> ic_menu_agenda_grey
    int ic_menu_agenda_white -> ic_menu_agenda_white
    int ic_menu_delete -> ic_menu_delete
    int ic_menu_edit -> ic_menu_edit
    int ic_menu_enable -> ic_menu_enable
    int ic_menu_help -> ic_menu_help
    int ic_menu_manage_grey -> ic_menu_manage_grey
    int ic_menu_manage_white -> ic_menu_manage_white
    int ic_menu_toggle_wifi -> ic_menu_toggle_wifi
    int ic_preference_wifi_grey -> ic_preference_wifi_grey
    int ic_preference_wifi_white -> ic_preference_wifi_white
    int ic_settings_wifi -> ic_settings_wifi
    int ic_status_bac_icon -> ic_status_bac_icon
    int ic_status_bac_icon_big -> ic_status_bac_icon_big
    int ic_tab_audit -> ic_tab_audit
    int ic_tab_general -> ic_tab_general
    int ic_tab_time -> ic_tab_time
    int ic_tab_wifi_list -> ic_tab_wifi_list
    void <init>() -> <init>
org.cprados.wificellmanager.R$id -> org.cprados.wificellmanager.R$id:
    int alert_dialog_layout -> alert_dialog_layout
    int alert_dialog_message -> alert_dialog_message
    int bar_edit -> bar_edit
    int button_delete_wifis -> button_delete_wifis
    int button_enable_wifis -> button_enable_wifis
    int context_menu_edit -> context_menu_edit
    int context_menu_help -> context_menu_help
    int context_menu_toggle_wifi -> context_menu_toggle_wifi
    int dialog_welcome_extra_button -> dialog_welcome_extra_button
    int dialog_welcome_extra_text -> dialog_welcome_extra_text
    int dialog_welcome_extra_toggle -> dialog_welcome_extra_toggle
    void <init>() -> <init>
org.cprados.wificellmanager.R$layout -> org.cprados.wificellmanager.R$layout:
    int activity_list -> activity_list
    int dialog_custom_layout -> dialog_custom_layout
    int dialog_welcome_extra_layout -> dialog_welcome_extra_layout
    int preference -> preference
    int wifi_list_edit_bar_layout -> wifi_list_edit_bar_layout
    void <init>() -> <init>
org.cprados.wificellmanager.R$menu -> org.cprados.wificellmanager.R$menu:
    int menu_preferences -> menu_preferences
    int menu_wifi_prefereces -> menu_wifi_prefereces
    void <init>() -> <init>
org.cprados.wificellmanager.R$plurals -> org.cprados.wificellmanager.R$plurals:
    int preference_summary_wifi -> preference_summary_wifi
    int state_description_in_disc -> state_description_in_disc
    int state_description_in_off -> state_description_in_off
    int state_event_description_in -> state_event_description_in
    void <init>() -> <init>
org.cprados.wificellmanager.R$string -> org.cprados.wificellmanager.R$string:
    int activity_about_text_info -> activity_about_text_info
    int activity_audit_trail_empty -> activity_audit_trail_empty
    int activity_audit_trail_footer_summary -> activity_audit_trail_footer_summary
    int activity_audit_trail_footer_title -> activity_audit_trail_footer_title
    int app_name -> app_name
    int app_version -> app_version
    int button_title_delete_wifi -> button_title_delete_wifi
    int button_title_disable_wifi -> button_title_disable_wifi
    int button_title_enable_wifi -> button_title_enable_wifi
    int button_title_google_play -> button_title_google_play
    int button_title_help -> button_title_help
    int category_actions_wifi -> category_actions_wifi
    int category_title_cells -> category_title_cells
    int category_title_wifis -> category_title_wifis
    int categoty_title_advanced_behavior -> categoty_title_advanced_behavior
    int categoty_title_location -> categoty_title_location
    int context_menu_label_edit -> context_menu_label_edit
    int context_menu_label_edit_cells -> context_menu_label_edit_cells
    int context_menu_label_help -> context_menu_label_help
    int context_menu_label_toggle_wifi_off -> context_menu_label_toggle_wifi_off
    int context_menu_label_toggle_wifi_on -> context_menu_label_toggle_wifi_on
    int context_menu_shortcut_edit -> context_menu_shortcut_edit
    int context_menu_shortcut_help -> context_menu_shortcut_help
    int context_menu_shortcut_toggle_wifi -> context_menu_shortcut_toggle_wifi
    int dialog_button_confirm_preference_cancel -> dialog_button_confirm_preference_cancel
    int dialog_button_confirm_preference_ok -> dialog_button_confirm_preference_ok
    int dialog_button_welcome_back -> dialog_button_welcome_back
    int dialog_button_welcome_finish -> dialog_button_welcome_finish
    int dialog_button_welcome_next -> dialog_button_welcome_next
    int dialog_text_force_update_location -> dialog_text_force_update_location
    int dialog_text_mobile_data_managed -> dialog_text_mobile_data_managed
    int dialog_text_off_after_disc_timeout -> dialog_text_off_after_disc_timeout
    int dialog_text_turn_on_screen -> dialog_text_turn_on_screen
    int dialog_text_unk_location_activates_wifi -> dialog_text_unk_location_activates_wifi
    int dialog_text_welcome_1 -> dialog_text_welcome_1
    int dialog_text_welcome_2 -> dialog_text_welcome_2
    int dialog_text_welcome_3a -> dialog_text_welcome_3a
    int dialog_text_welcome_3b -> dialog_text_welcome_3b
    int dialog_text_welcome_4 -> dialog_text_welcome_4
    int dialog_text_welcome_activate -> dialog_text_welcome_activate
    int dialog_text_welcome_dont_show -> dialog_text_welcome_dont_show
    int dialog_text_welcome_wifi_settings -> dialog_text_welcome_wifi_settings
    int market_billing_donation_sku2 -> market_billing_donation_sku2
    int preference_button_time_cancel -> preference_button_time_cancel
    int preference_button_time_set -> preference_button_time_set
    int preference_donate_summary -> preference_donate_summary
    int preference_donate_title -> preference_donate_title
    int preference_history_example_summary -> preference_history_example_summary
    int preference_history_example_title -> preference_history_example_title
    int preference_summary_action_wifi_add -> preference_summary_action_wifi_add
    int preference_summary_action_wifi_off -> preference_summary_action_wifi_off
    int preference_summary_action_wifi_on -> preference_summary_action_wifi_on
    int preference_summary_activate -> preference_summary_activate
    int preference_summary_add_wifis -> preference_summary_add_wifis
    int preference_summary_advanced -> preference_summary_advanced
    int preference_summary_cell_description -> preference_summary_cell_description
    int preference_summary_cell_disabled -> preference_summary_cell_disabled
    int preference_summary_force_update_location -> preference_summary_force_update_location
    int preference_summary_freq -> preference_summary_freq
    int preference_summary_mobile_data_managed -> preference_summary_mobile_data_managed
    int preference_summary_notifications -> preference_summary_notifications
    int preference_summary_off_after_disc_timeout -> preference_summary_off_after_disc_timeout
    int preference_summary_time_interval_begin -> preference_summary_time_interval_begin
    int preference_summary_time_interval_enable -> preference_summary_time_interval_enable
    int preference_summary_time_interval_end -> preference_summary_time_interval_end
    int preference_summary_turn_on_screen -> preference_summary_turn_on_screen
    int preference_summary_unk_location_activates_wifi -> preference_summary_unk_location_activates_wifi
    int preference_summary_wifi_disabled -> preference_summary_wifi_disabled
    int preference_title_action_wifi_add -> preference_title_action_wifi_add
    int preference_title_action_wifi_off -> preference_title_action_wifi_off
    int preference_title_action_wifi_on -> preference_title_action_wifi_on
    int preference_title_activate -> preference_title_activate
    int preference_title_add_wifis -> preference_title_add_wifis
    int preference_title_advanced -> preference_title_advanced
    int preference_title_cell_description -> preference_title_cell_description
    int preference_title_force_update_location -> preference_title_force_update_location
    int preference_title_freq -> preference_title_freq
    int preference_title_mobile_data_managed -> preference_title_mobile_data_managed
    int preference_title_notifications -> preference_title_notifications
    int preference_title_off_after_disc_timeout -> preference_title_off_after_disc_timeout
    int preference_title_time_interval_begin -> preference_title_time_interval_begin
    int preference_title_time_interval_enable -> preference_title_time_interval_enable
    int preference_title_time_interval_end -> preference_title_time_interval_end
    int preference_title_turn_on_screen -> preference_title_turn_on_screen
    int preference_title_unk_location_activates_wifi -> preference_title_unk_location_activates_wifi
    int requested_action_deferred_off -> requested_action_deferred_off
    int requested_action_scheduled_off -> requested_action_scheduled_off
    int requested_action_scheduled_on -> requested_action_scheduled_on
    int state_action_description_add -> state_action_description_add
    int state_action_description_off -> state_action_description_off
    int state_action_description_on -> state_action_description_on
    int state_description_in_con -> state_description_in_con
    int state_description_out_con -> state_description_out_con
    int state_description_out_disc -> state_description_out_disc
    int state_description_out_off -> state_description_out_off
    int state_description_unk_con -> state_description_unk_con
    int state_description_unk_disc -> state_description_unk_disc
    int state_description_unk_off -> state_description_unk_off
    int state_event_description_con -> state_event_description_con
    int state_event_description_disc -> state_event_description_disc
    int state_event_description_init -> state_event_description_init
    int state_event_description_off -> state_event_description_off
    int state_event_description_out -> state_event_description_out
    int state_event_description_unk -> state_event_description_unk
    int tab_title_audit_trail -> tab_title_audit_trail
    int tab_title_options -> tab_title_options
    int tab_title_time_options -> tab_title_time_options
    int tab_title_wifi_list -> tab_title_wifi_list
    int toast_label_switching_wifi_off -> toast_label_switching_wifi_off
    int toast_label_switching_wifi_on -> toast_label_switching_wifi_on
    int url_amazon_marketplace_site -> url_amazon_marketplace_site
    int url_app_site -> url_app_site
    int url_google_play_site -> url_google_play_site
    int url_history_example -> url_history_example
    void <init>() -> <init>
org.cprados.wificellmanager.R$styleable -> org.cprados.wificellmanager.R$styleable:
    int[] IconPreference -> IconPreference
    int IconPreference_bold -> IconPreference_bold
    int IconPreference_color_stripe -> IconPreference_color_stripe
    int IconPreference_icon -> IconPreference_icon
    void <clinit>() -> <clinit>
    void <init>() -> <init>
org.cprados.wificellmanager.R$xml -> org.cprados.wificellmanager.R$xml:
    int advanced_preferences -> advanced_preferences
    int donate_preferences -> donate_preferences
    int general_preferences -> general_preferences
    int time_interval_preferences -> time_interval_preferences
    int wifi_list_preferences -> wifi_list_preferences
    int wifi_preferences -> wifi_preferences
    void <init>() -> <init>
org.cprados.wificellmanager.RequestedActionManager -> org.cprados.wificellmanager.g:
    java.lang.String EXPLICIT_ACTION_REQ -> as
    java.lang.String EXTRA_ACTION -> at
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.content.Intent createRequestedAction(org.cprados.wificellmanager.RequestedActionManager$RequestedAction) -> a
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction getRequestedAction(android.content.Intent) -> a
    org.cprados.wificellmanager.StateMachine$StateAction getStateAction(android.content.Context,android.content.Intent,org.cprados.wificellmanager.StateMachine$State) -> a
org.cprados.wificellmanager.RequestedActionManager$1 -> org.cprados.wificellmanager.h:
    int[] $SwitchMap$org$cprados$wificellmanager$RequestedActionManager$RequestedAction -> au
    void <clinit>() -> <clinit>
org.cprados.wificellmanager.RequestedActionManager$RequestedAction -> org.cprados.wificellmanager.i:
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction[] $VALUES -> av
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction DEFERRED_OFF -> aw
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction SCHEDULED_OFF -> ax
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction SCHEDULED_ON -> ay
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction valueOf(java.lang.String) -> valueOf
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction[] values() -> values
    java.lang.String getDescription(android.content.res.Resources,java.lang.Object[]) -> a
org.cprados.wificellmanager.StateMachine -> org.cprados.wificellmanager.j:
    java.lang.String LOGTAG -> LOGTAG
    org.cprados.wificellmanager.StateMachine$StateEvent lastEvent -> az
    org.cprados.wificellmanager.StateMachine$State mCurrentState -> aA
    java.util.List mNextActions -> aB
    void <clinit>() -> <clinit>
    void <init>(org.cprados.wificellmanager.StateMachine$State) -> <init>
    void <init>(org.cprados.wificellmanager.StateMachine$StateEvent,org.cprados.wificellmanager.StateMachine$StateEvent) -> <init>
    java.util.List manageGeneralStateChange(org.cprados.wificellmanager.StateMachine$StateEvent,java.util.List) -> a
    java.util.List manageWifiStateChange(org.cprados.wificellmanager.StateMachine$StateEvent,java.util.List) -> b
    org.cprados.wificellmanager.StateMachine$State getCurrentState() -> d
    org.cprados.wificellmanager.StateMachine$StateEvent getLastEvent() -> e
    java.util.List getNextActions() -> f
    java.util.List manageStateChange(org.cprados.wificellmanager.StateMachine$StateEvent,int) -> a
org.cprados.wificellmanager.StateMachine$1 -> org.cprados.wificellmanager.k:
    int[] $SwitchMap$org$cprados$wificellmanager$StateMachine$State -> aC
    int[] $SwitchMap$org$cprados$wificellmanager$StateMachine$StateAction -> aq
    int[] $SwitchMap$org$cprados$wificellmanager$StateMachine$StateEvent -> aD
    void <clinit>() -> <clinit>
org.cprados.wificellmanager.StateMachine$State -> org.cprados.wificellmanager.l:
    org.cprados.wificellmanager.StateMachine$State[] $VALUES -> aE
    org.cprados.wificellmanager.StateMachine$State IN_CON -> aF
    org.cprados.wificellmanager.StateMachine$State IN_DISC -> aG
    org.cprados.wificellmanager.StateMachine$State IN_OFF -> aH
    org.cprados.wificellmanager.StateMachine$State OUT_CON -> aI
    org.cprados.wificellmanager.StateMachine$State OUT_DISC -> aJ
    org.cprados.wificellmanager.StateMachine$State OUT_OFF -> aK
    org.cprados.wificellmanager.StateMachine$State UNK_CON -> aL
    org.cprados.wificellmanager.StateMachine$State UNK_DISC -> aM
    org.cprados.wificellmanager.StateMachine$State UNK_OFF -> aN
    org.cprados.wificellmanager.StateMachine$StateEvent mCellState -> aO
    org.cprados.wificellmanager.StateMachine$StateEvent mWifiState -> aP
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,org.cprados.wificellmanager.StateMachine$StateEvent,org.cprados.wificellmanager.StateMachine$StateEvent) -> <init>
    org.cprados.wificellmanager.StateMachine$StateEvent access$000(org.cprados.wificellmanager.StateMachine$State) -> a
    org.cprados.wificellmanager.StateMachine$State getState(org.cprados.wificellmanager.StateMachine$StateEvent,org.cprados.wificellmanager.StateMachine$StateEvent) -> a
    org.cprados.wificellmanager.StateMachine$State valueOf(java.lang.String) -> valueOf
    org.cprados.wificellmanager.StateMachine$State[] values() -> values
    boolean compare(org.cprados.wificellmanager.StateMachine$StateEvent,org.cprados.wificellmanager.StateMachine$StateEvent) -> b
    org.cprados.wificellmanager.StateMachine$StateEvent getCellState() -> g
    java.lang.String getDescription(android.content.res.Resources,java.lang.Object[]) -> a
    org.cprados.wificellmanager.StateMachine$StateEvent getWifiState() -> h
    org.cprados.wificellmanager.StateMachine$State transition(org.cprados.wificellmanager.StateMachine$StateEvent) -> a
org.cprados.wificellmanager.StateMachine$StateAction -> org.cprados.wificellmanager.m:
    org.cprados.wificellmanager.StateMachine$StateAction[] $VALUES -> aQ
    org.cprados.wificellmanager.StateMachine$StateAction ADD -> aR
    org.cprados.wificellmanager.StateMachine$StateAction CANCEL_DEFERRED_OFF -> aS
    org.cprados.wificellmanager.StateMachine$StateAction CREATE_DEFERRED_OFF -> aT
    org.cprados.wificellmanager.StateMachine$StateAction DATA_OFF -> aU
    org.cprados.wificellmanager.StateMachine$StateAction DATA_RESTORE -> aV
    org.cprados.wificellmanager.StateMachine$StateAction NONE -> aW
    org.cprados.wificellmanager.StateMachine$StateAction OFF -> aX
    org.cprados.wificellmanager.StateMachine$StateAction ON -> aY
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.cprados.wificellmanager.StateMachine$StateAction valueOf(java.lang.String) -> valueOf
    org.cprados.wificellmanager.StateMachine$StateAction[] values() -> values
    java.lang.String getDescription(android.content.res.Resources,java.lang.Object[]) -> a
    boolean isDeactivable() -> i
org.cprados.wificellmanager.StateMachine$StateEvent -> org.cprados.wificellmanager.n:
    org.cprados.wificellmanager.StateMachine$StateEvent[] $VALUES -> aZ
    org.cprados.wificellmanager.StateMachine$StateEvent CON -> ba
    org.cprados.wificellmanager.StateMachine$StateEvent DISC -> bb
    org.cprados.wificellmanager.StateMachine$StateEvent IN -> bc
    org.cprados.wificellmanager.StateMachine$StateEvent INIT -> bd
    org.cprados.wificellmanager.StateMachine$StateEvent OFF -> be
    org.cprados.wificellmanager.StateMachine$StateEvent OUT -> bf
    org.cprados.wificellmanager.StateMachine$StateEvent UNK -> bg
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.cprados.wificellmanager.StateMachine$StateEvent valueOf(java.lang.String) -> valueOf
    org.cprados.wificellmanager.StateMachine$StateEvent[] values() -> values
    java.lang.String getDescription(android.content.res.Resources,java.lang.Object[]) -> a
org.cprados.wificellmanager.sys.AuditTrailManager -> wy.d:
    int CACHE_PAGE_SIZE -> bh
    java.lang.String FILENAME_DATEFORMAT -> bi
    java.lang.String FILE_NAME_EXTENSION -> bj
    java.lang.String FILE_NAME_PREFIX -> bk
    java.lang.String FILE_NAME_REGEXP -> bl
    int INITIAL_NUM_PAGES -> bm
    java.lang.String LINE_SEPARATOR -> bn
    java.lang.String LOGTAG -> LOGTAG
    int MAX_FILES -> bo
    org.cprados.wificellmanager.sys.AuditTrailManager sInstance -> bp
    java.util.List mCache -> bq
    android.content.Context mContext -> mContext
    java.util.Date mLatestWrite -> br
    java.lang.String mLowestFile -> bs
    int mLowestRecord -> bt
    boolean mNewerRecords -> bu
    boolean mOlderRecords -> bv
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.lang.String access$000() -> j
    void closeOutStream(java.io.FileOutputStream) -> a
    void closeReader(java.io.BufferedReader) -> a
    boolean deleteFile(java.lang.String) -> deleteFile
    boolean deleteOldFiles(java.util.Date) -> a
    org.cprados.wificellmanager.sys.AuditTrailManager getInstance(android.content.Context) -> z
    java.util.Date getLogFileDate(java.lang.String) -> d
    java.lang.String getLogFileName(java.util.Date) -> b
    java.util.SortedSet getLogFileNames(java.lang.String,boolean) -> a
    java.io.FileOutputStream getOutStream(java.util.Date) -> c
    java.io.BufferedReader getReader(java.lang.String) -> e
    boolean isNewDay(java.util.Date) -> d
    boolean loadRecords(int) -> a
    boolean getNewerRecords() -> k
    int getNumRecords() -> l
    boolean getOlderRecords() -> m
    java.util.Date getOldestRecordDate() -> n
    boolean loadPages(int) -> b
    org.cprados.wificellmanager.sys.AuditTrailManager$ActivityRecord readRecord(int) -> c
    boolean refreshCache() -> o
    boolean releaseCache() -> p
    void writeRecord(org.cprados.wificellmanager.sys.AuditTrailManager$ActivityRecord) -> a
org.cprados.wificellmanager.sys.AuditTrailManager$ActivityRecord -> wy.e:
    java.lang.String FIELDS_REGEXP -> bw
    java.lang.String FIELD_SEPARATOR -> bx
    java.lang.String NULL_STRING -> by
    java.lang.String REPLACEMENT_STRING -> bz
    org.cprados.wificellmanager.StateMachine$StateAction action -> bA
    java.util.Date date -> bB
    java.lang.Object[] payload -> bC
    org.cprados.wificellmanager.RequestedActionManager$RequestedAction requestedAction -> bD
    org.cprados.wificellmanager.StateMachine$State state -> bE
    void <init>() -> <init>
    void <init>(java.util.Date) -> <init>
    void <init>(org.cprados.wificellmanager.StateMachine$State,org.cprados.wificellmanager.StateMachine$StateAction,org.cprados.wificellmanager.RequestedActionManager$RequestedAction,java.util.Date,java.lang.Object[]) -> <init>
    java.lang.String manageFieldSeparator(java.lang.String,boolean) -> b
    org.cprados.wificellmanager.sys.AuditTrailManager$ActivityRecord parseActivityRecord(java.lang.String) -> f
    void parsePayload(java.lang.Object[]) -> a
    java.lang.String toString() -> toString
org.cprados.wificellmanager.sys.CellStateListener -> wy.f:
    java.lang.String LOGTAG -> LOGTAG
    org.cprados.wificellmanager.sys.CellStateListener sInstance -> bF
    java.lang.String mAction -> bG
    android.content.Context mContext -> mContext
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,java.lang.String) -> <init>
    void delete() -> delete
    org.cprados.wificellmanager.sys.CellStateListener getCellChangeListener(android.content.Context,java.lang.String) -> g
    void requestCellChangeEvents(android.content.Context,java.lang.String,boolean) -> c
    void onCellLocationChanged(android.telephony.CellLocation) -> onCellLocationChanged
org.cprados.wificellmanager.sys.CellStateManager -> wy.g:
    java.lang.String CELL_CHANGE_ACTION -> bH
    int CELL_UNKNOWN -> bI
    java.lang.String EXTRA_CID -> bJ
    java.lang.String EXTRA_LAC -> bK
    java.lang.String EXTRA_NEARBY_WIFIS -> bL
    java.lang.String EXTRA_OP -> bM
    java.lang.String EXTRA_WIFIS_ACTION -> bN
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void forceLocationUpdate(android.content.Context) -> A
    boolean getActionEnabled(android.os.Bundle,org.cprados.wificellmanager.StateMachine$StateAction) -> a
    org.cprados.wificellmanager.StateMachine$StateEvent getCellState(android.content.Context,android.content.Intent,android.os.Bundle) -> a
    int getCid(android.os.Bundle) -> a
    int getLac(android.os.Bundle) -> b
    int getNearbyWifis(android.os.Bundle) -> c
    java.lang.String getOperator(android.os.Bundle) -> d
    void setActionEnabled(android.os.Bundle,org.cprados.wificellmanager.StateMachine$StateAction,boolean) -> a
    void setCurrentCell(android.os.Bundle,int[]) -> a
    void setNearbyWifis(android.os.Bundle,int) -> a
    void setOperator(android.os.Bundle,java.lang.String) -> a
org.cprados.wificellmanager.sys.MobileDataManager -> wy.h:
    java.lang.String EXTRA_PENDING_MOBILE_DATA_ACTION -> bO
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean getMobileDataState(android.content.Context) -> B
    boolean getPendingMobileDataAction(android.os.Bundle) -> e
    void setMobileDataState(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,android.os.Bundle) -> a
    boolean setMobileDataState(android.content.Context,boolean) -> p
    void setPendingMobileDataAction(android.os.Bundle,boolean) -> a
org.cprados.wificellmanager.sys.NotificationManager -> wy.i:
    int sNid -> bP
    void <init>() -> <init>
    void notifyAction(android.content.Context,org.cprados.wificellmanager.StateMachine$StateAction,org.cprados.wificellmanager.ui.DescribeableElement,java.util.Date,android.os.Bundle) -> a
    void putNotification(android.content.Context,java.lang.String,java.lang.String,java.util.Date) -> a
    void removeNotification(android.content.Context) -> C
org.cprados.wificellmanager.sys.WakeLockManager -> wy.j:
    java.lang.String WAKELOCK_TAG -> bQ
    org.cprados.wificellmanager.sys.WakeLockManager mInstance -> bR
    android.os.PowerManager$WakeLock mCpuWakeLock -> bS
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.cprados.wificellmanager.sys.WakeLockManager getWakeLockManager() -> q
    void acquireWakeLock(android.content.Context) -> D
    void releaseWakeLock() -> r
org.cprados.wificellmanager.sys.WifiStateManager -> wy.k:
    java.lang.String EXTRA_CURRENT_WIFI -> bT
    java.lang.String EXTRA_ORIGIN_WIFI_STATE -> bU
    java.lang.String EXTRA_SSID -> bV
    java.lang.String EXTRA_TARGET_WIFI_STATE -> bW
    java.lang.String EXTRA_WIFI_AP_STATE -> bX
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean getApModeEnabled(android.content.Context,android.content.Intent) -> a
    java.lang.String getCleanSSID(java.lang.String) -> g
    java.lang.String getCurrentWifi(android.os.Bundle) -> f
    org.cprados.wificellmanager.StateMachine$StateEvent[] getInflightWifiAction(android.os.Bundle) -> g
    org.cprados.wificellmanager.StateMachine$StateEvent getOriginWifiState(android.os.Bundle) -> h
    org.cprados.wificellmanager.StateMachine$StateEvent getTargetWifiState(android.os.Bundle) -> i
    org.cprados.wificellmanager.StateMachine$StateEvent getWifiState(android.content.Context,android.content.Intent,android.os.Bundle) -> b
    void setCurrentWifi(android.os.Bundle,java.lang.String) -> b
    void setInflightWifiAction(android.os.Bundle,org.cprados.wificellmanager.StateMachine$StateEvent[]) -> a
    void setOriginWifiState(android.os.Bundle,org.cprados.wificellmanager.StateMachine$StateEvent) -> a
    void setTargetWifiState(android.os.Bundle,org.cprados.wificellmanager.StateMachine$StateEvent) -> b
    void setWifiState(android.content.Context,org.cprados.wificellmanager.StateMachine$StateEvent,android.os.Bundle) -> a
org.cprados.wificellmanager.ui.AdvancedPreferences -> org.cprados.wificellmanager.ui.AdvancedPreferences:
    int DIALOG_CONFIRM_DISC_TIMEOUT -> bY
    int DIALOG_CONFIRM_FORCE_UPDATE -> bZ
    int DIALOG_CONFIRM_MOBILE_DATA_MANAGED -> ca
    int DIALOG_CONFIRM_SCREEN_ON -> cb
    int DIALOG_UNK_LOCATION_ACTIVATES_WIFI -> cc
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    void onResume() -> onResume
org.cprados.wificellmanager.ui.DescribeableElement -> org.cprados.wificellmanager.ui.a:
    java.lang.String getDescription(android.content.res.Resources,java.lang.Object[]) -> a
org.cprados.wificellmanager.ui.Dialogs -> org.cprados.wificellmanager.ui.b:
    void <init>() -> <init>
org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder -> org.cprados.wificellmanager.ui.c:
    int ABOUT_DIALOG_GRAVITY -> cd
    android.content.Context mContext -> mContext
    android.content.DialogInterface$OnClickListener mNeutralButtonListener -> ce
    android.content.DialogInterface$OnClickListener mPositiveButtonListener -> cf
    void <init>(android.content.Context) -> <init>
    android.content.Context access$000(org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder) -> a
    android.app.AlertDialog create() -> create
org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder$1 -> org.cprados.wificellmanager.ui.d:
    org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder this$0 -> cg
    void <init>(org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder$2 -> org.cprados.wificellmanager.ui.e:
    org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder this$0 -> cg
    void <init>(org.cprados.wificellmanager.ui.Dialogs$AboutDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder -> org.cprados.wificellmanager.ui.f:
    java.lang.Object mDefVal -> ch
    android.content.DialogInterface$OnKeyListener mKeyListerner -> ci
    android.content.DialogInterface$OnClickListener mNegativeButtonListener -> cj
    android.content.DialogInterface$OnClickListener mPositiveButtonListener -> cf
    android.preference.Preference mPreference -> ck
    int mTextId -> cl
    void <init>(android.content.Context,int,android.preference.Preference,java.lang.Object) -> <init>
    void access$100(org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder) -> a
    void cancelConfirmDialog() -> s
    android.app.AlertDialog create() -> create
org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder$1 -> org.cprados.wificellmanager.ui.g:
    org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder this$0 -> cm
    void <init>(org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder$2 -> org.cprados.wificellmanager.ui.h:
    org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder this$0 -> cm
    void <init>(org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder$3 -> org.cprados.wificellmanager.ui.i:
    org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder this$0 -> cm
    void <init>(org.cprados.wificellmanager.ui.Dialogs$ConfirmPreferenceDialogBuilder) -> <init>
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder -> org.cprados.wificellmanager.ui.j:
    int FINISHED_STEP -> cn
    int FIRST_STEP -> co
    int LAST_STEP -> cp
    android.content.DialogInterface$OnClickListener mButtonListener -> cq
    android.content.Context mContext -> mContext
    android.content.DialogInterface$OnKeyListener mKeyListerner -> ci
    int mStep -> cr
    void <init>(android.content.Context) -> <init>
    int access$200(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> a
    int access$202(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder,int) -> a
    int access$208(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> b
    int access$210(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> c
    void access$300(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder,android.app.AlertDialog) -> a
    android.content.Context access$400(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> d
    int getButtonText(int) -> d
    int getButtonVisibility(int) -> e
    java.lang.String getCurrentlyConnectedWifi() -> t
    java.lang.CharSequence getText() -> getText
    android.view.View getView() -> getView
    void refreshWelcomeDialog(android.app.AlertDialog) -> a
    android.app.AlertDialog create() -> create
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$1 -> org.cprados.wificellmanager.ui.k:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$2 -> org.cprados.wificellmanager.ui.l:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> <init>
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$3 -> org.cprados.wificellmanager.ui.m:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$4 -> org.cprados.wificellmanager.ui.n:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    android.view.View val$button -> ct
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder,android.view.View) -> <init>
    void onClick(android.view.View) -> onClick
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$5 -> org.cprados.wificellmanager.ui.o:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> <init>
    void onClick(android.view.View) -> onClick
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$6 -> org.cprados.wificellmanager.ui.p:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder$7 -> org.cprados.wificellmanager.ui.q:
    org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder this$0 -> cs
    android.view.View val$button -> ct
    void <init>(org.cprados.wificellmanager.ui.Dialogs$WelcomeDialogBuilder,android.view.View) -> <init>
    void onClick(android.view.View) -> onClick
org.cprados.wificellmanager.ui.GeneralPreferences -> org.cprados.wificellmanager.ui.GeneralPreferences:
    java.lang.String REFRESH_UI_ACTION -> cu
    android.content.BroadcastReceiver mRefreshReceiver -> cv
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void access$000(org.cprados.wificellmanager.ui.GeneralPreferences) -> a
    java.lang.String getStatusMessage() -> u
    void refreshUI() -> v
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onResume() -> onResume
org.cprados.wificellmanager.ui.GeneralPreferences$1 -> org.cprados.wificellmanager.ui.GeneralPreferences$1:
    org.cprados.wificellmanager.ui.GeneralPreferences this$0 -> cw
    void <init>(org.cprados.wificellmanager.ui.GeneralPreferences) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.cprados.wificellmanager.ui.IconPreference -> org.cprados.wificellmanager.ui.r:
    boolean mBold -> cx
    int mColorStripe -> cy
    android.graphics.drawable.Drawable mIcon -> cz
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    boolean getBold() -> w
    int getColorStripe() -> x
    android.graphics.drawable.Drawable getIcon() -> getIcon
    void onBindView(android.view.View) -> onBindView
    void setBold(boolean) -> b
    void setColorStripe(int) -> f
    void setMyIcon(android.graphics.drawable.Drawable) -> a
org.cprados.wificellmanager.ui.MyAlertDialogBuilder -> org.cprados.wificellmanager.ui.s:
    int BUTTON_LEFT -> cA
    int BUTTON_RIGHT -> cB
    boolean THEME_CLASSIC -> cC
    int sExtraViewPostion -> cD
    android.widget.LinearLayout mCustomLayoutView -> cE
    android.widget.TextView mCustomMessageView -> cF
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener mDialogShowListener -> cG
    android.content.DialogInterface$OnClickListener mDummyButtonClickListener -> cH
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener getDialogShowListener() -> y
    void setAutoLinkMask(android.app.AlertDialog,int) -> a
    void setButtonText(android.app.AlertDialog,int,int) -> a
    void setButtonVisibility(android.app.AlertDialog,int,int) -> b
    void setExtraView(android.app.AlertDialog,android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void setGravity(android.app.AlertDialog,int) -> b
    void setMessage(android.app.AlertDialog,int) -> c
    void setMessage(android.app.AlertDialog,java.lang.CharSequence) -> a
    android.app.AlertDialog create() -> create
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder setAutoLinkMask(int) -> g
    android.app.AlertDialog$Builder setButtonVisibility(int,int) -> b
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder setExtraView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder setGravity(int) -> h
    android.app.AlertDialog$Builder setLeftButton(int,android.content.DialogInterface$OnClickListener) -> a
    android.app.AlertDialog$Builder setLeftButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener) -> a
    android.app.AlertDialog$Builder setMessage(int) -> setMessage
    android.app.AlertDialog$Builder setMessage(java.lang.CharSequence) -> setMessage
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder setMessage(int) -> i
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder setMessage(java.lang.CharSequence) -> a
    android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener) -> setNegativeButton
    android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener) -> setNegativeButton
    android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener) -> setNeutralButton
    android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener) -> setNeutralButton
    android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener) -> setPositiveButton
    android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener) -> setPositiveButton
    android.app.AlertDialog$Builder setRightButton(int,android.content.DialogInterface$OnClickListener) -> b
    android.app.AlertDialog$Builder setRightButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener) -> b
org.cprados.wificellmanager.ui.MyAlertDialogBuilder$1 -> org.cprados.wificellmanager.ui.t:
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder this$0 -> cI
    void <init>(org.cprados.wificellmanager.ui.MyAlertDialogBuilder) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener -> org.cprados.wificellmanager.ui.u:
    android.content.DialogInterface$OnClickListener mNegativeListener -> cJ
    int mNegativeVisible -> cK
    android.content.DialogInterface$OnClickListener mNeutralListener -> cL
    int mNeutralVisible -> cM
    android.content.DialogInterface$OnClickListener mPositiveListener -> cN
    int mPositiveVisible -> cO
    boolean mShown -> cP
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder this$0 -> cI
    void <init>(org.cprados.wificellmanager.ui.MyAlertDialogBuilder) -> <init>
    void setButtonListener(android.app.AlertDialog,int,android.content.DialogInterface$OnClickListener) -> a
    void onShow(android.content.DialogInterface) -> onShow
org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener$1 -> org.cprados.wificellmanager.ui.v:
    org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener this$1 -> cQ
    int val$buttonId -> cR
    android.app.AlertDialog val$dialog -> cS
    android.content.DialogInterface$OnClickListener val$listener -> cT
    void <init>(org.cprados.wificellmanager.ui.MyAlertDialogBuilder$DialogShowListener,android.content.DialogInterface$OnClickListener,android.app.AlertDialog,int) -> <init>
    void onClick(android.view.View) -> onClick
org.cprados.wificellmanager.ui.MyCheckBoxPreference -> org.cprados.wificellmanager.ui.w:
    boolean sInitialized -> cU
    int sSummaryColor -> cV
    int mColorStripe -> cy
    boolean mGrey -> cW
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    int getSummaryColor() -> z
    int getSummaryColor(android.view.View) -> a
    int getColorStripe() -> x
    void onBindView(android.view.View) -> onBindView
    void setColorStripe(int) -> f
    void setGrey(boolean) -> c
org.cprados.wificellmanager.ui.MyListItemView -> org.cprados.wificellmanager.ui.MyListItemView:
    int mColorStripe -> cy
    boolean mDrawColorStripe -> cX
    android.graphics.Paint mPaint -> cY
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setColorStripe(boolean,int) -> a
org.cprados.wificellmanager.ui.Preferences -> org.cprados.wificellmanager.ui.Preferences:
    int DIALOG_ABOUT -> cZ
    int DIALOG_WELCOME -> da
    java.lang.String LOGTAG -> LOGTAG
    java.lang.String REFRESH_UI_ACTION -> cu
    int TAB_AUDIT -> db
    int TAB_DONATE -> dc
    int TAB_GENERAL -> dd
    int TAB_TIME -> de
    int TAB_WIFIS -> df
    boolean THEME_CLASSIC -> cC
    java.lang.Class sAuditTrailActivity -> dg
    java.lang.Class sDonateActivity -> dh
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void addTab(android.widget.TabHost,java.lang.Class,java.lang.String,android.graphics.drawable.Drawable) -> a
    void requestRefresh(android.content.Context) -> E
    void showTab(int,boolean,int) -> a
    void welcomeDialog() -> A
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(int,android.os.Bundle) -> onCreateDialog
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onResume() -> onResume
    void refreshTabs() -> B
org.cprados.wificellmanager.ui.TimeIntervalPreferences -> org.cprados.wificellmanager.ui.TimeIntervalPreferences:
    java.lang.String LOGTAG -> LOGTAG
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean compareTime(java.lang.String,int[]) -> a
    void setEnabled(boolean) -> setEnabled
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    void onResume() -> onResume
org.cprados.wificellmanager.ui.TimePreference -> org.cprados.wificellmanager.ui.x:
    boolean m24HourFormat -> di
    int mHour -> dj
    int mMinute -> dk
    android.widget.TextView mTimeDisplay -> dl
    android.widget.TimePicker mTimePicker -> dm
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void initializeDialogView(org.cprados.wificellmanager.ui.TimePreference$TimeSavedState) -> a
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onBindView(android.view.View) -> onBindView
    android.view.View onCreateDialogView() -> onCreateDialogView
    void onDialogClosed(boolean) -> onDialogClosed
    java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int) -> onGetDefaultValue
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    java.lang.String toString() -> toString
org.cprados.wificellmanager.ui.TimePreference$TimeSavedState -> org.cprados.wificellmanager.ui.y:
    int currentHour -> dn
    int currentMinute -> do
    android.os.Bundle dialogBundle -> dp
    boolean isDialogShowing -> dq
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcelable) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.cprados.wificellmanager.ui.WifiListPreferences -> org.cprados.wificellmanager.ui.WifiListPreferences:
    int FIRST_WIFI_PREFERENCE -> dr
    java.lang.String REFRESH_UI_ACTION -> cu
    android.view.View mEditBarView -> ds
    org.cprados.wificellmanager.ManagerService$ManagerServiceBinder mManagerServiceBinder -> dt
    android.content.ServiceConnection mManagerServiceConn -> du
    android.content.BroadcastReceiver mRefreshReceiver -> cv
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void access$000(org.cprados.wificellmanager.ui.WifiListPreferences) -> a
    org.cprados.wificellmanager.ManagerService$ManagerServiceBinder access$102(org.cprados.wificellmanager.ui.WifiListPreferences,org.cprados.wificellmanager.ManagerService$ManagerServiceBinder) -> a
    void addWifiPreference(android.preference.PreferenceCategory,java.lang.String,int,int,boolean,boolean,boolean,boolean,boolean) -> a
    void deleteSelectedWifisPreferences() -> C
    void deleteWifiPreference(android.preference.PreferenceCategory,java.lang.String,java.lang.String,boolean) -> a
    void enableSelectedWifisPreferences(boolean) -> d
    int getColorStripe(boolean,boolean,boolean) -> a
    void refreshUI() -> v
    boolean refreshWifiPreferences(boolean) -> e
    void showButtonsBar(boolean,boolean) -> a
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onPause() -> onPause
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onResume() -> onResume
org.cprados.wificellmanager.ui.WifiListPreferences$1 -> org.cprados.wificellmanager.ui.WifiListPreferences$1:
    org.cprados.wificellmanager.ui.WifiListPreferences this$0 -> dv
    void <init>(org.cprados.wificellmanager.ui.WifiListPreferences) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.cprados.wificellmanager.ui.WifiListPreferences$2 -> org.cprados.wificellmanager.ui.z:
    org.cprados.wificellmanager.ui.WifiListPreferences this$0 -> dv
    void <init>(org.cprados.wificellmanager.ui.WifiListPreferences) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.cprados.wificellmanager.ui.WifiPreferences -> org.cprados.wificellmanager.ui.WifiPreferences:
    java.lang.String EXTRA_ACTIVITY_WIFI_NAME -> dw
    int FIRST_WIFI_CELL_PREFERENCE -> dx
    java.lang.String REFRESH_UI_ACTION -> cu
    android.view.View mEditBarView -> ds
    org.cprados.wificellmanager.ManagerService$ManagerServiceBinder mManagerServiceBinder -> dt
    android.content.ServiceConnection mManagerServiceConn -> du
    android.content.BroadcastReceiver mRefreshReceiver -> cv
    java.lang.String mWifiName -> dy
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void access$000(org.cprados.wificellmanager.ui.WifiPreferences) -> a
    org.cprados.wificellmanager.ManagerService$ManagerServiceBinder access$102(org.cprados.wificellmanager.ui.WifiPreferences,org.cprados.wificellmanager.ManagerService$ManagerServiceBinder) -> a
    void addWifiCellPreference(android.preference.PreferenceCategory,int[],int,int,boolean,boolean,boolean,boolean,boolean) -> a
    void deleteSelectedWifiCellPreferences() -> D
    void deleteWifiCellPreference(android.preference.PreferenceCategory,java.lang.String,java.lang.String,int,int,boolean) -> a
    void enableSelectedWifiCellPreferences(boolean) -> f
    int getColorStripe(boolean,boolean,boolean) -> a
    void refreshUI() -> v
    boolean refreshWifiCellPreferences(boolean) -> g
    void setPreferencesWifiName(android.preference.PreferenceScreen,java.lang.String) -> a
    void showButtonsBar(boolean,boolean) -> a
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPause() -> onPause
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onResume() -> onResume
org.cprados.wificellmanager.ui.WifiPreferences$1 -> org.cprados.wificellmanager.ui.WifiPreferences$1:
    org.cprados.wificellmanager.ui.WifiPreferences this$0 -> dz
    void <init>(org.cprados.wificellmanager.ui.WifiPreferences) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.cprados.wificellmanager.ui.WifiPreferences$2 -> org.cprados.wificellmanager.ui.aa:
    org.cprados.wificellmanager.ui.WifiPreferences this$0 -> dz
    void <init>(org.cprados.wificellmanager.ui.WifiPreferences) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
