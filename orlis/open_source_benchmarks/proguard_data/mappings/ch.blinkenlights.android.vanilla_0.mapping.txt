android.support.iosched.tabs.SlidingTabLayout -> android.support.iosched.tabs.SlidingTabLayout:
    int TAB_VIEW_PADDING_DIPS -> a
    int TAB_VIEW_TEXT_SIZE_SP -> b
    int TITLE_OFFSET_DIPS -> c
    android.util.SparseArray mContentDescriptions -> d
    boolean mDistributeEvenly -> e
    android.support.iosched.tabs.SlidingTabStrip mTabStrip -> f
    int mTabViewLayoutId -> g
    int mTabViewTextViewId -> h
    int mTitleOffset -> i
    android.support.v4.view.ViewPager mViewPager -> j
    android.support.v4.view.ViewPager$OnPageChangeListener mViewPagerPageChangeListener -> k
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    android.support.iosched.tabs.SlidingTabStrip access$200(android.support.iosched.tabs.SlidingTabLayout) -> a
    void access$300(android.support.iosched.tabs.SlidingTabLayout,int,int) -> a
    android.support.v4.view.ViewPager$OnPageChangeListener access$400(android.support.iosched.tabs.SlidingTabLayout) -> b
    android.support.v4.view.ViewPager access$500(android.support.iosched.tabs.SlidingTabLayout) -> c
    void populateTabStrip() -> a
    void scrollToTab(int,int) -> a
    android.widget.TextView createDefaultTabView(android.content.Context) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void setContentDescription(int,java.lang.String) -> a
    void setCustomTabColorizer(android.support.iosched.tabs.SlidingTabLayout$TabColorizer) -> setCustomTabColorizer
    void setCustomTabView(int,int) -> b
    void setDistributeEvenly(boolean) -> setDistributeEvenly
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setSelectedIndicatorColors(int[]) -> setSelectedIndicatorColors
    void setViewPager(android.support.v4.view.ViewPager) -> setViewPager
android.support.iosched.tabs.SlidingTabLayout$1 -> android.support.iosched.tabs.a:
android.support.iosched.tabs.SlidingTabLayout$InternalViewPagerListener -> android.support.iosched.tabs.b:
    int mScrollState -> l
    android.support.iosched.tabs.SlidingTabLayout this$0 -> m
    void <init>(android.support.iosched.tabs.SlidingTabLayout) -> <init>
    void <init>(android.support.iosched.tabs.SlidingTabLayout,android.support.iosched.tabs.SlidingTabLayout$1) -> <init>
    void onPageScrollStateChanged(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> b
android.support.iosched.tabs.SlidingTabLayout$TabClickListener -> android.support.iosched.tabs.c:
    android.support.iosched.tabs.SlidingTabLayout this$0 -> m
    void <init>(android.support.iosched.tabs.SlidingTabLayout) -> <init>
    void <init>(android.support.iosched.tabs.SlidingTabLayout,android.support.iosched.tabs.SlidingTabLayout$1) -> <init>
    void onClick(android.view.View) -> onClick
android.support.iosched.tabs.SlidingTabLayout$TabColorizer -> android.support.iosched.tabs.d:
    int getIndicatorColor(int) -> c
android.support.iosched.tabs.SlidingTabStrip -> android.support.iosched.tabs.SlidingTabStrip:
    byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA -> n
    int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS -> o
    int DEFAULT_SELECTED_INDICATOR_COLOR -> p
    int SELECTED_INDICATOR_THICKNESS_DIPS -> q
    android.graphics.Paint mBottomBorderPaint -> r
    int mBottomBorderThickness -> s
    android.support.iosched.tabs.SlidingTabLayout$TabColorizer mCustomTabColorizer -> t
    android.support.iosched.tabs.SlidingTabStrip$SimpleTabColorizer mDefaultTabColorizer -> u
    android.graphics.Paint mSelectedIndicatorPaint -> v
    int mSelectedIndicatorThickness -> w
    int mSelectedPosition -> x
    float mSelectionOffset -> y
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    int blendColors(int,int,float) -> a
    int setColorAlpha(int,byte) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onViewPagerPageChanged(int,float) -> a
    void setCustomTabColorizer(android.support.iosched.tabs.SlidingTabLayout$TabColorizer) -> setCustomTabColorizer
    void setSelectedIndicatorColors(int[]) -> setSelectedIndicatorColors
android.support.iosched.tabs.SlidingTabStrip$1 -> android.support.iosched.tabs.e:
android.support.iosched.tabs.SlidingTabStrip$SimpleTabColorizer -> android.support.iosched.tabs.f:
    int[] mIndicatorColors -> z
    void <init>() -> <init>
    void <init>(android.support.iosched.tabs.SlidingTabStrip$1) -> <init>
    int getIndicatorColor(int) -> c
    void setIndicatorColors(int[]) -> a
android.support.iosched.tabs.VanillaTabLayout -> android.support.iosched.tabs.VanillaTabLayout:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    android.widget.TextView createDefaultTabView(android.content.Context) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.a:
    int POSITION_NONE -> A
    int POSITION_UNCHANGED -> B
    android.database.DataSetObservable mObservable -> C
    void <init>() -> <init>
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void finishUpdate(android.view.View) -> a
    void finishUpdate(android.view.ViewGroup) -> a
    int getCount() -> getCount
    int getItemPosition(java.lang.Object) -> a
    java.lang.CharSequence getPageTitle(int) -> d
    float getPageWidth(int) -> e
    java.lang.Object instantiateItem(android.view.View,int) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    android.os.Parcelable saveState() -> b
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void startUpdate(android.view.View) -> b
    void startUpdate(android.view.ViewGroup) -> b
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int CLOSE_ENOUGH -> D
    java.util.Comparator COMPARATOR -> E
    boolean DEBUG -> DEBUG
    int DEFAULT_GUTTER_SIZE -> F
    int DEFAULT_OFFSCREEN_PAGES -> G
    int DRAW_ORDER_DEFAULT -> H
    int DRAW_ORDER_FORWARD -> I
    int DRAW_ORDER_REVERSE -> J
    int INVALID_POINTER -> K
    int[] LAYOUT_ATTRS -> L
    int MAX_SETTLE_DURATION -> M
    int MIN_DISTANCE_FOR_FLING -> N
    int MIN_FLING_VELOCITY -> O
    int SCROLL_STATE_DRAGGING -> P
    int SCROLL_STATE_IDLE -> SCROLL_STATE_IDLE
    int SCROLL_STATE_SETTLING -> Q
    java.lang.String TAG -> TAG
    boolean USE_CACHE -> R
    android.view.animation.Interpolator sInterpolator -> S
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> T
    int mActivePointerId -> U
    android.support.v4.view.PagerAdapter mAdapter -> V
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> W
    int mBottomPageBounds -> a_
    boolean mCalledSuper -> b_
    int mChildHeightMeasureSpec -> c_
    int mChildWidthMeasureSpec -> aa
    int mCloseEnough -> ab
    int mCurItem -> ac
    int mDecorChildCount -> ad
    int mDefaultGutterSize -> ae
    int mDrawingOrder -> af
    java.util.ArrayList mDrawingOrderedChildren -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mExpectedAdapterCount -> ai
    long mFakeDragBeginTime -> aj
    boolean mFakeDragging -> ak
    boolean mFirstLayout -> al
    float mFirstOffset -> am
    int mFlingDistance -> an
    int mGutterSize -> ao
    boolean mInLayout -> ap
    float mInitialMotionX -> aq
    float mInitialMotionY -> ar
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> as
    boolean mIsBeingDragged -> at
    boolean mIsUnableToDrag -> au
    java.util.ArrayList mItems -> av
    float mLastMotionX -> aw
    float mLastMotionY -> ax
    float mLastOffset -> ay
    android.widget.EdgeEffect mLeftEdge -> az
    android.graphics.drawable.Drawable mMarginDrawable -> aA
    int mMaximumVelocity -> aB
    int mMinimumVelocity -> aC
    boolean mNeedCalculatePageOffsets -> aD
    android.support.v4.view.ViewPager$PagerObserver mObserver -> aE
    int mOffscreenPageLimit -> aF
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> aG
    java.util.List mOnPageChangeListeners -> aH
    int mPageMargin -> aI
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> aJ
    boolean mPopulatePending -> aK
    android.os.Parcelable mRestoredAdapterState -> aL
    java.lang.ClassLoader mRestoredClassLoader -> aM
    int mRestoredCurItem -> aN
    android.widget.EdgeEffect mRightEdge -> aO
    int mScrollState -> l
    android.widget.Scroller mScroller -> aP
    boolean mScrollingCacheEnabled -> aQ
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> aR
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> aS
    android.graphics.Rect mTempRect -> aT
    int mTopPageBounds -> aU
    int mTouchSlop -> aV
    android.view.VelocityTracker mVelocityTracker -> aW
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> c
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    boolean compatEdgeEffectOnRelease(android.widget.EdgeEffect) -> a
    void completeScroll(boolean) -> a
    int determineTargetPage(int,float,int,int) -> a
    void dispatchOnPageScrolled(int,float,int) -> b
    void dispatchOnPageSelected(int) -> f
    void dispatchOnScrollStateChanged(int) -> g
    void enableLayers(boolean) -> b
    void endDrag() -> d
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    int getClientWidth() -> getClientWidth
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> e
    boolean isGutterDrag(float,float) -> a
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    boolean pageScrolled(int) -> h
    boolean performDrag(float) -> a
    void recomputeScrollPosition(int,int,int,int) -> a
    void removeNonDecorViews() -> f
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    void scrollToItem(int,boolean,int,boolean) -> a
    void setScrollState(int) -> setScrollState
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    void sortChildDrawingOrder() -> g
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> c
    void addOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    void addTouchables(java.util.ArrayList) -> addTouchables
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    boolean arrowScroll(int) -> arrowScroll
    boolean beginFakeDrag() -> h
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    void clearOnPageChangeListeners() -> i
    void computeScroll() -> computeScroll
    void dataSetChanged() -> j
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    float distanceInfluenceForSnapDuration(float) -> b
    void draw(android.graphics.Canvas) -> draw
    void drawableStateChanged() -> drawableStateChanged
    void endFakeDrag() -> k
    boolean executeKeyEvent(android.view.KeyEvent) -> executeKeyEvent
    void fakeDragBy(float) -> c
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getCurrentItem() -> getCurrentItem
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    int getPageMargin() -> getPageMargin
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> c
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> d
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> i
    void initViewPager() -> l
    boolean isFakeDragging() -> m
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void onPageScrolled(int,float,int) -> a
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean pageLeft() -> n
    boolean pageRight() -> o
    void populate() -> p
    void populate(int) -> j
    void removeOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> b
    void removeView(android.view.View) -> removeView
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> c
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setPageMargin(int) -> setPageMargin
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer) -> a
    void smoothScrollTo(int,int) -> smoothScrollTo
    void smoothScrollTo(int,int,int) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
android.support.v4.view.ViewPager$1 -> android.support.v4.view.b:
    void <init>() -> <init>
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.c:
    void <init>() -> <init>
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.d:
    android.support.v4.view.ViewPager this$0 -> aX
    void <init>(android.support.v4.view.ViewPager) -> <init>
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.e:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.f:
    java.lang.Object object -> aY
    float offset -> aZ
    int position -> position
    boolean scrolling -> ba
    float widthFactor -> bb
    void <init>() -> <init>
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.g:
    int childIndex -> bc
    int gravity -> gravity
    boolean isDecor -> bd
    boolean needsMeasure -> be
    int position -> position
    float widthFactor -> bb
    void <init>() -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.h:
    android.support.v4.view.ViewPager this$0 -> aX
    void <init>(android.support.v4.view.ViewPager) -> <init>
    boolean canScroll() -> q
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.i:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.j:
    void onPageScrollStateChanged(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.k:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.l:
    android.support.v4.view.ViewPager this$0 -> aX
    void <init>(android.support.v4.view.ViewPager) -> <init>
    void <init>(android.support.v4.view.ViewPager,android.support.v4.view.ViewPager$1) -> <init>
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.m:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.os.Parcelable adapterState -> bf
    java.lang.ClassLoader loader -> bg
    int position -> position
    void <clinit>() -> <clinit>
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcelable) -> <init>
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.n:
    void <init>() -> <init>
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> k
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.view.ViewPager$SimpleOnPageChangeListener -> android.support.v4.view.o:
    void <init>() -> <init>
    void onPageScrollStateChanged(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> b
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.p:
    void <init>() -> <init>
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPagerIcsCompat -> android.support.v4.view.q:
    long FAKE_FRAME_TIME -> bh
    void <init>() -> <init>
    int getImportantForAccessibility(android.view.View) -> e
    void postInvalidateOnAnimation(android.view.View) -> f
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
ch.blinkenlights.android.vanilla.Action -> ch.blinkenlights.android.vanilla.a:
    ch.blinkenlights.android.vanilla.Action[] $VALUES -> bi
    ch.blinkenlights.android.vanilla.Action ClearQueue -> bj
    ch.blinkenlights.android.vanilla.Action EnqueueAlbum -> bk
    ch.blinkenlights.android.vanilla.Action EnqueueArtist -> bl
    ch.blinkenlights.android.vanilla.Action EnqueueGenre -> bm
    ch.blinkenlights.android.vanilla.Action Library -> bn
    ch.blinkenlights.android.vanilla.Action NextAlbum -> bo
    ch.blinkenlights.android.vanilla.Action NextSong -> bp
    ch.blinkenlights.android.vanilla.Action Nothing -> bq
    ch.blinkenlights.android.vanilla.Action PlayPause -> br
    ch.blinkenlights.android.vanilla.Action PreviousAlbum -> bs
    ch.blinkenlights.android.vanilla.Action PreviousSong -> bt
    ch.blinkenlights.android.vanilla.Action Repeat -> bu
    ch.blinkenlights.android.vanilla.Action SeekBackward -> bv
    ch.blinkenlights.android.vanilla.Action SeekForward -> bw
    ch.blinkenlights.android.vanilla.Action ShowQueue -> bx
    ch.blinkenlights.android.vanilla.Action Shuffle -> by
    ch.blinkenlights.android.vanilla.Action ToggleControls -> bz
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    ch.blinkenlights.android.vanilla.Action getAction(android.content.SharedPreferences,java.lang.String,ch.blinkenlights.android.vanilla.Action) -> a
    ch.blinkenlights.android.vanilla.Action valueOf(java.lang.String) -> valueOf
    ch.blinkenlights.android.vanilla.Action[] values() -> values
ch.blinkenlights.android.vanilla.AudioPickerActivity -> ch.blinkenlights.android.vanilla.AudioPickerActivity:
    ch.blinkenlights.android.vanilla.Song mSong -> bA
    void <init>() -> <init>
    ch.blinkenlights.android.vanilla.Song getSongForUri(android.net.Uri) -> a
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.BastpUtil -> ch.blinkenlights.android.vanilla.b:
    ch.blinkenlights.android.vanilla.BastpUtil$RGLruCache rgCache -> bB
    void <init>() -> <init>
    float getFloatFromString(java.lang.String) -> a
    ch.blinkenlights.android.vanilla.BastpUtil$GainValues getReplayGainValuesFromFile(java.lang.String) -> b
    ch.blinkenlights.android.vanilla.BastpUtil$GainValues getReplayGainValues(java.lang.String) -> c
ch.blinkenlights.android.vanilla.BastpUtil$GainValues -> ch.blinkenlights.android.vanilla.c:
    float album -> bC
    float base -> bD
    ch.blinkenlights.android.vanilla.BastpUtil this$0 -> bE
    float track -> bF
    void <init>(ch.blinkenlights.android.vanilla.BastpUtil) -> <init>
ch.blinkenlights.android.vanilla.BastpUtil$RGLruCache -> ch.blinkenlights.android.vanilla.d:
    ch.blinkenlights.android.vanilla.BastpUtil this$0 -> bE
    void <init>(ch.blinkenlights.android.vanilla.BastpUtil,int) -> <init>
ch.blinkenlights.android.vanilla.BottomBarControls -> ch.blinkenlights.android.vanilla.BottomBarControls:
    android.widget.TextView mArtist -> bG
    android.content.Context mContext -> mContext
    android.widget.LinearLayout mControlsContent -> bH
    android.widget.ImageView mCover -> bI
    android.view.View$OnClickListener mParentClickConsumer -> bJ
    android.app.Activity mParentMenuConsumer -> bK
    android.widget.PopupMenu mPopupMenu -> bL
    android.widget.SearchView mSearchView -> bM
    android.widget.TextView mTitle -> bN
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    int dpToPx(int) -> l
    android.widget.ImageButton getImageButton(android.graphics.drawable.Drawable) -> a
    boolean menuMargin() -> r
    void styleSearchView(android.view.View,int) -> b
    void enableOptionsMenu(android.app.Activity) -> a
    void onClick(android.view.View) -> onClick
    void onFinishInflate() -> onFinishInflate
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void openMenu() -> s
    void setCover(android.graphics.Bitmap) -> setCover
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener) -> setOnQueryTextListener
    void setSong(ch.blinkenlights.android.vanilla.Song) -> setSong
    boolean showSearch(boolean) -> d
ch.blinkenlights.android.vanilla.BuildConfig -> ch.blinkenlights.android.vanilla.e:
    java.lang.String APPLICATION_ID -> bO
    java.lang.String BUILD_TYPE -> bP
    boolean DEBUG -> DEBUG
    java.lang.String FLAVOR -> bQ
    int VERSION_CODE -> bR
    java.lang.String VERSION_NAME -> bS
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.CoverBitmap -> ch.blinkenlights.android.vanilla.f:
    android.graphics.Bitmap ALBUM_ICON -> bT
    android.graphics.Bitmap ARTIST_ICON -> bU
    int PADDING -> bV
    android.graphics.Bitmap SONG_ICON -> bW
    int STYLE_INFO_BELOW -> bX
    int STYLE_NO_INFO -> bY
    int STYLE_OVERLAPPING_BOX -> bZ
    int TEXT_SIZE -> ca
    int TEXT_SIZE_BIG -> cb
    int TEXT_SPACE -> cc
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.graphics.Bitmap createBitmap(android.content.Context,int,android.graphics.Bitmap,ch.blinkenlights.android.vanilla.Song,int,int) -> a
    android.graphics.Bitmap createOverlappingBitmap(android.content.Context,android.graphics.Bitmap,ch.blinkenlights.android.vanilla.Song,int,int) -> a
    android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int) -> a
    android.graphics.Bitmap createSeparatedBitmap(android.content.Context,android.graphics.Bitmap,ch.blinkenlights.android.vanilla.Song,int,int) -> b
    void drawText(android.graphics.Canvas,java.lang.String,int,int,int,int,android.graphics.Paint) -> a
    android.graphics.Bitmap generateDefaultCover(android.content.Context,int,int) -> a
    android.graphics.Bitmap generatePlaceholderCover(android.content.Context,int,int,java.lang.String) -> a
    void loadIcons(android.content.Context) -> b
    void loadTextSizes(android.content.Context) -> c
ch.blinkenlights.android.vanilla.CoverCache -> ch.blinkenlights.android.vanilla.g:
    int COVER_MODE_ALL -> cd
    int COVER_MODE_ANDROID -> ce
    int COVER_MODE_SHADOW -> cf
    int COVER_MODE_VANILLA -> cg
    int SIZE_LARGE -> SIZE_LARGE
    int SIZE_SMALL -> SIZE_SMALL
    int mCoverLoadMode -> ch
    ch.blinkenlights.android.vanilla.CoverCache$BitmapDiskCache sBitmapDiskCache -> ci
    java.io.File sDownloadsDir -> cj
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void evictAll() -> evictAll
    android.graphics.Bitmap getStoredCover(ch.blinkenlights.android.vanilla.CoverCache$CoverKey) -> a
    void storeCover(ch.blinkenlights.android.vanilla.CoverCache$CoverKey,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getCoverFromSong(ch.blinkenlights.android.vanilla.Song,int) -> a
ch.blinkenlights.android.vanilla.CoverCache$BitmapDiskCache -> ch.blinkenlights.android.vanilla.h:
    java.util.regex.Pattern[] COVER_MATCHES -> ck
    java.lang.String[] FULL_PROJECTION -> cl
    java.lang.String[] META_PROJECTION -> cm
    int OBJECT_TTL -> cn
    java.lang.String TABLE_NAME -> co
    long mCacheSize -> cp
    android.content.Context mContext -> mContext
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,long) -> <init>
    int getSampleSize(java.io.InputStream,android.graphics.BitmapFactory$Options,long) -> a
    long getUnixTime() -> t
    long getUsedSpace() -> u
    boolean isExpired(long) -> a
    void trim(long) -> b
    android.graphics.Bitmap createBitmap(ch.blinkenlights.android.vanilla.Song,long) -> a
    void evictAll() -> evictAll
    android.graphics.Bitmap get(ch.blinkenlights.android.vanilla.CoverCache$CoverKey) -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void put(ch.blinkenlights.android.vanilla.CoverCache$CoverKey,android.graphics.Bitmap) -> b
ch.blinkenlights.android.vanilla.CoverCache$CoverKey -> ch.blinkenlights.android.vanilla.i:
    int coverSize -> cq
    long mediaId -> cr
    int mediaType -> cs
    void <init>(int,long,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
ch.blinkenlights.android.vanilla.CoverView -> ch.blinkenlights.android.vanilla.CoverView:
    int MSG_GENERATE_BITMAP -> ct
    int MSG_LONG_CLICK -> cu
    int MSG_SCROLL -> cv
    double sDensity -> cw
    int sSnapVelocity -> cx
    android.graphics.Bitmap[] mActiveBitmaps -> cy
    android.graphics.Bitmap[] mBitmaps -> cz
    ch.blinkenlights.android.vanilla.CoverView$Callback mCallback -> cA
    int mCoverStyle -> cB
    android.graphics.Bitmap mDefaultCover -> cC
    android.os.Handler mHandler -> mHandler
    boolean mIgnoreNextUp -> cD
    float mLastMotionX -> aw
    float mLastMotionY -> ax
    boolean mPendingQuery -> cE
    int mScrollX -> cF
    android.widget.Scroller mScroller -> aP
    boolean mScrolling -> cG
    ch.blinkenlights.android.vanilla.Song[] mSongs -> cH
    float mStartX -> cI
    float mStartY -> cJ
    android.os.Handler mUiHandler -> cK
    android.view.VelocityTracker mVelocityTracker -> aW
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void generateBitmap(int) -> m
    void resetScroll() -> v
    boolean handleMessage(android.os.Message) -> handleMessage
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void querySongs(ch.blinkenlights.android.vanilla.PlaybackService) -> a
    void setSong(int,ch.blinkenlights.android.vanilla.Song) -> a
    void setup(android.os.Looper,ch.blinkenlights.android.vanilla.CoverView$Callback,int) -> a
ch.blinkenlights.android.vanilla.CoverView$Callback -> ch.blinkenlights.android.vanilla.j:
    void downSwipe() -> w
    void shiftCurrentSong(int) -> n
    void upSwipe() -> x
ch.blinkenlights.android.vanilla.DraggableRow -> ch.blinkenlights.android.vanilla.DraggableRow:
    int LAYOUT_CHECKBOXES -> cL
    int LAYOUT_COVERVIEW -> cM
    android.widget.CheckedTextView mCheckBox -> cN
    boolean mChecked -> cO
    ch.blinkenlights.android.vanilla.LazyCoverView mCoverView -> cP
    android.widget.ImageView mDragger -> cQ
    boolean mLayoutSet -> cR
    android.view.View mPmark -> cS
    android.widget.TextView mTextView -> cT
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    ch.blinkenlights.android.vanilla.LazyCoverView getCoverView() -> getCoverView
    android.widget.TextView getTextView() -> getTextView
    void highlightRow(boolean) -> e
    boolean isChecked() -> isChecked
    void onFinishInflate() -> onFinishInflate
    void setChecked(boolean) -> setChecked
    void setupLayout(int) -> setupLayout
    void showDragger(boolean) -> f
    void toggle() -> toggle
ch.blinkenlights.android.vanilla.FastScrollGuardedListView -> ch.blinkenlights.android.vanilla.FastScrollGuardedListView:
    int PROTECT_END_DP -> cU
    int PROTECT_START_DP -> cV
    float mEdgeProtectEndPx -> cW
    float mEdgeProtectStartPx -> cX
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
ch.blinkenlights.android.vanilla.FileSystemAdapter -> ch.blinkenlights.android.vanilla.k:
    java.util.regex.Pattern FILE_SEPARATOR -> cY
    java.util.regex.Pattern SPACE_SPLIT -> cZ
    ch.blinkenlights.android.vanilla.LibraryActivity mActivity -> da
    java.util.Comparator mFileComparator -> db
    java.io.FilenameFilter mFileFilter -> dc
    ch.blinkenlights.android.vanilla.FileSystemAdapter$Observer mFileObserver -> dd
    java.io.File[] mFiles -> de
    java.lang.String[] mFilter -> df
    android.graphics.drawable.Drawable mFolderIcon -> dg
    android.view.LayoutInflater mInflater -> dh
    ch.blinkenlights.android.vanilla.Limiter mLimiter -> di
    void <clinit>() -> <clinit>
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity,ch.blinkenlights.android.vanilla.Limiter) -> <init>
    ch.blinkenlights.android.vanilla.Limiter buildLimiter(java.io.File) -> a
    ch.blinkenlights.android.vanilla.Limiter buildLimiter(long) -> c
    void clear() -> clear
    void commitQuery(java.lang.Object) -> b
    android.content.Intent createData(android.view.View) -> g
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    ch.blinkenlights.android.vanilla.Limiter getLimiter() -> y
    int getMediaType() -> z
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onClick(android.view.View) -> onClick
    void onHandleRowClick(android.view.View) -> h
    java.lang.Object query() -> A
    void setFilter(java.lang.String) -> d
    void setLimiter(ch.blinkenlights.android.vanilla.Limiter) -> a
ch.blinkenlights.android.vanilla.FileSystemAdapter$1 -> ch.blinkenlights.android.vanilla.l:
    ch.blinkenlights.android.vanilla.FileSystemAdapter this$0 -> dj
    void <init>(ch.blinkenlights.android.vanilla.FileSystemAdapter) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
ch.blinkenlights.android.vanilla.FileSystemAdapter$2 -> ch.blinkenlights.android.vanilla.m:
    ch.blinkenlights.android.vanilla.FileSystemAdapter this$0 -> dj
    void <init>(ch.blinkenlights.android.vanilla.FileSystemAdapter) -> <init>
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ch.blinkenlights.android.vanilla.FileSystemAdapter$Observer -> ch.blinkenlights.android.vanilla.n:
    ch.blinkenlights.android.vanilla.FileSystemAdapter this$0 -> dj
    void <init>(ch.blinkenlights.android.vanilla.FileSystemAdapter,java.lang.String) -> <init>
    void onEvent(int,java.lang.String) -> onEvent
ch.blinkenlights.android.vanilla.FileUtils -> ch.blinkenlights.android.vanilla.o:
    void <init>() -> <init>
    boolean canDispatchIntent(android.content.Intent) -> a
    boolean dispatchIntent(ch.blinkenlights.android.vanilla.LibraryActivity,android.content.Intent) -> a
    java.io.File getFilesystemBrowseStart(android.content.Context) -> d
ch.blinkenlights.android.vanilla.FilebrowserStartActivity -> ch.blinkenlights.android.vanilla.FilebrowserStartActivity:
    java.lang.String mCurrentPath -> dk
    ch.blinkenlights.android.vanilla.FilebrowserStartAdapter mListAdapter -> dl
    android.widget.ListView mListView -> dm
    android.widget.TextView mPathDisplay -> dn
    android.content.SharedPreferences$Editor mPrefEditor -> do
    android.widget.Button mSaveButton -> dp
    void <init>() -> <init>
    java.lang.String access$000(ch.blinkenlights.android.vanilla.FilebrowserStartActivity) -> a
    android.content.SharedPreferences$Editor access$100(ch.blinkenlights.android.vanilla.FilebrowserStartActivity) -> b
    void refreshDirectoryList() -> B
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDirectoryClicked(int) -> o
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
ch.blinkenlights.android.vanilla.FilebrowserStartActivity$1 -> ch.blinkenlights.android.vanilla.p:
    ch.blinkenlights.android.vanilla.FilebrowserStartActivity this$0 -> dq
    void <init>(ch.blinkenlights.android.vanilla.FilebrowserStartActivity) -> <init>
    void onClick(android.view.View) -> onClick
ch.blinkenlights.android.vanilla.FilebrowserStartAdapter -> ch.blinkenlights.android.vanilla.q:
    ch.blinkenlights.android.vanilla.FilebrowserStartActivity mActivity -> dr
    android.graphics.drawable.Drawable mFolderIcon -> dg
    android.view.LayoutInflater mInflater -> dh
    void <init>(ch.blinkenlights.android.vanilla.FilebrowserStartActivity,int) -> <init>
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onClick(android.view.View) -> onClick
ch.blinkenlights.android.vanilla.FourLongWidget -> ch.blinkenlights.android.vanilla.FourLongWidget:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.android.vanilla.FourSquareWidget -> ch.blinkenlights.android.vanilla.FourSquareWidget:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.android.vanilla.FourWhiteWidget -> ch.blinkenlights.android.vanilla.FourWhiteWidget:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.android.vanilla.FullPlaybackActivity -> ch.blinkenlights.android.vanilla.FullPlaybackActivity:
    int DISPLAY_INFO_BELOW -> dt
    int DISPLAY_INFO_OVERLAP -> du
    int DISPLAY_INFO_WIDGETS -> dv
    int MSG_COMMIT_FAVOURITE_INFO -> dw
    int MSG_COMMIT_INFO -> dx
    int MSG_LOAD_EXTRA_INFO -> dy
    int MSG_LOAD_FAVOURITE_INFO -> dz
    int MSG_SAVE_CONTROLS -> dA
    int MSG_UPDATE_POSITION -> dB
    android.widget.TextView mAlbum -> dC
    android.widget.TextView mArtist -> bG
    java.lang.String mComposer -> dD
    android.widget.TextView mComposerView -> dE
    android.view.View mControlsTop -> dF
    boolean mControlsVisible -> dG
    ch.blinkenlights.android.vanilla.Action mCoverLongPressAction -> dH
    ch.blinkenlights.android.vanilla.Action mCoverPressAction -> dI
    ch.blinkenlights.android.vanilla.Song mCurrentSong -> dJ
    int mDisplayMode -> dK
    boolean mExtraInfoVisible -> dL
    android.view.MenuItem mFavorites -> dM
    java.lang.String mFormat -> dN
    android.widget.TextView mFormatView -> dO
    java.lang.String mGenre -> dP
    android.widget.TextView mGenreView -> dQ
    android.widget.TableLayout mInfoTable -> dR
    android.widget.TextView mOverlayText -> dS
    java.lang.String mPath -> dT
    android.widget.TextView mPathView -> dU
    android.widget.TextView mQueuePosView -> dV
    java.lang.String mReplayGain -> dW
    android.widget.TextView mReplayGainView -> dX
    android.widget.TextView mTitle -> bN
    java.lang.String mTrack -> dY
    android.widget.TextView mTrackView -> dZ
    java.lang.String mYear -> ea
    android.widget.TextView mYearView -> eb
    void <init>() -> <init>
    java.lang.String decodeMimeType(java.lang.String) -> e
    void hideMessageOverlay() -> C
    void loadExtraInfo() -> D
    void setControlsVisible(boolean) -> g
    void setExtraInfoVisible(boolean) -> h
    void showOverlayMessage(int) -> p
    void updateQueuePosition() -> E
    boolean handleMessage(android.os.Message) -> handleMessage
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPositionInfoChanged() -> F
    boolean onSearchRequested() -> onSearchRequested
    void onSlideFullyExpanded(boolean) -> i
    void onSongChange(ch.blinkenlights.android.vanilla.Song) -> a
    void onStart() -> onStart
    void onStateChange(int,int) -> d
    void performAction(ch.blinkenlights.android.vanilla.Action) -> a
ch.blinkenlights.android.vanilla.FullPlaybackActivity$1 -> ch.blinkenlights.android.vanilla.r:
    ch.blinkenlights.android.vanilla.FullPlaybackActivity this$0 -> ec
    void <init>(ch.blinkenlights.android.vanilla.FullPlaybackActivity) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.FullPlaybackActivity$2 -> ch.blinkenlights.android.vanilla.s:
    ch.blinkenlights.android.vanilla.FullPlaybackActivity this$0 -> ec
    ch.blinkenlights.android.vanilla.Song val$song -> ed
    void <init>(ch.blinkenlights.android.vanilla.FullPlaybackActivity,ch.blinkenlights.android.vanilla.Song) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.FullPlaybackActivity$3 -> ch.blinkenlights.android.vanilla.t:
    int[] $SwitchMap$ch$blinkenlights$android$vanilla$Action -> ee
    void <clinit>() -> <clinit>
ch.blinkenlights.android.vanilla.IdlePreference -> ch.blinkenlights.android.vanilla.u:
    int DEFAULT_VALUE -> ef
    int MAX -> eg
    int MIN -> eh
    int mValue -> ei
    android.widget.TextView mValueText -> ej
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    java.lang.String formatTime(int) -> q
    void updateText() -> G
    java.lang.CharSequence getSummary() -> getSummary
    android.view.View onCreateDialogView() -> onCreateDialogView
    void onDialogClosed(boolean) -> onDialogClosed
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
ch.blinkenlights.android.vanilla.LazyCoverView -> ch.blinkenlights.android.vanilla.LazyCoverView:
    int MSG_CREATE_COVER -> ek
    int MSG_DRAW_COVER -> el
    ch.blinkenlights.android.vanilla.LazyCoverView$BitmapLruCache sBitmapLruCache -> em
    android.graphics.Bitmap sFallbackBitmap -> en
    android.os.Handler sHandler -> eo
    android.os.Handler sUiHandler -> ep
    android.content.Context mContext -> mContext
    ch.blinkenlights.android.vanilla.CoverCache$CoverKey mExpectedKey -> eq
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    ch.blinkenlights.android.vanilla.CoverCache$CoverKey access$000(ch.blinkenlights.android.vanilla.LazyCoverView) -> a
    boolean drawFromCache(ch.blinkenlights.android.vanilla.CoverCache$CoverKey,boolean) -> a
    boolean handleMessage(android.os.Message) -> handleMessage
    void setCover(int,long,java.lang.String) -> a
ch.blinkenlights.android.vanilla.LazyCoverView$BitmapLruCache -> ch.blinkenlights.android.vanilla.v:
    void <init>(int) -> <init>
    int sizeOf(ch.blinkenlights.android.vanilla.CoverCache$CoverKey,android.graphics.Bitmap) -> c
    int sizeOf(java.lang.Object,java.lang.Object) -> sizeOf
ch.blinkenlights.android.vanilla.LazyCoverView$CoverMsg -> ch.blinkenlights.android.vanilla.w:
    ch.blinkenlights.android.vanilla.CoverCache$CoverKey key -> er
    java.lang.String title -> es
    ch.blinkenlights.android.vanilla.LazyCoverView view -> et
    void <init>(ch.blinkenlights.android.vanilla.CoverCache$CoverKey,ch.blinkenlights.android.vanilla.LazyCoverView,java.lang.String) -> <init>
    boolean isRecent() -> H
ch.blinkenlights.android.vanilla.LibraryActivity -> ch.blinkenlights.android.vanilla.LibraryActivity:
    int ACTION_DO_NOTHING -> eu
    int ACTION_ENQUEUE -> ev
    int ACTION_ENQUEUE_ALL -> ew
    int ACTION_ENQUEUE_AS_NEXT -> ex
    int ACTION_EXPAND -> ACTION_EXPAND
    int ACTION_LAST_USED -> ey
    int ACTION_PLAY -> ez
    int ACTION_PLAY_ALL -> eA
    int ACTION_PLAY_OR_ENQUEUE -> eB
    int CTX_MENU_DELETE -> eC
    int CTX_MENU_ENQUEUE -> eD
    int CTX_MENU_ENQUEUE_ALL -> eE
    int CTX_MENU_ENQUEUE_AS_NEXT -> eF
    int CTX_MENU_EXPAND -> eG
    int CTX_MENU_MORE_FROM_ALBUM -> eH
    int CTX_MENU_MORE_FROM_ARTIST -> eI
    int CTX_MENU_OPEN_EXTERNAL -> eJ
    int CTX_MENU_PLAY -> eK
    int CTX_MENU_PLAY_ALL -> eL
    int CTX_MENU_RENAME_PLAYLIST -> eM
    int MSG_SAVE_PAGE -> eN
    int MSG_UPDATE_COVER -> eO
    int[] modeForAction -> eP
    ch.blinkenlights.android.vanilla.BottomBarControls mBottomBarControls -> eQ
    ch.blinkenlights.android.vanilla.LibraryAdapter mCurrentAdapter -> eR
    int mDefaultAction -> eS
    long mLastActedId -> eT
    int mLastAction -> eU
    android.widget.HorizontalScrollView mLimiterScroller -> eV
    android.view.ViewGroup mLimiterViews -> eW
    ch.blinkenlights.android.vanilla.LibraryPagerAdapter mPagerAdapter -> eX
    android.support.iosched.tabs.VanillaTabLayout mVanillaTabLayout -> eY
    android.support.v4.view.ViewPager mViewPager -> j
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    ch.blinkenlights.android.vanilla.BottomBarControls access$000(ch.blinkenlights.android.vanilla.LibraryActivity) -> a
    void checkForLaunch(android.content.Intent) -> b
    void editPlaylist(android.content.Intent) -> c
    void expand(android.content.Intent) -> d
    void loadAlbumIntent(android.content.Intent) -> e
    void loadTabOrder() -> I
    void pickSongs(android.content.Intent,int) -> a
    void setLimiter(int,java.lang.String) -> b
    void updateCover(android.graphics.Bitmap) -> a
    void updateHeaders() -> J
    boolean handleMessage(android.os.Message) -> handleMessage
    void onClick(android.content.DialogInterface,int) -> onClick
    void onClick(android.view.View) -> onClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.content.Intent) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onItemClicked(android.content.Intent) -> f
    void onItemExpanded(android.content.Intent) -> g
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onMediaChange() -> K
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPageChanged(int,ch.blinkenlights.android.vanilla.LibraryAdapter) -> a
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    void onRestart() -> onRestart
    void onSongChange(ch.blinkenlights.android.vanilla.Song) -> a
    void onStart() -> onStart
    void onStateChange(int,int) -> d
    void openPlaybackActivity() -> L
    void updateLimiterViews() -> M
ch.blinkenlights.android.vanilla.LibraryActivity$1 -> ch.blinkenlights.android.vanilla.x:
    ch.blinkenlights.android.vanilla.LibraryActivity this$0 -> eZ
    android.graphics.Bitmap val$cover -> fa
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity,android.graphics.Bitmap) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.LibraryActivity$2 -> ch.blinkenlights.android.vanilla.y:
    ch.blinkenlights.android.vanilla.LibraryActivity this$0 -> eZ
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.LibraryActivity$3 -> ch.blinkenlights.android.vanilla.z:
    ch.blinkenlights.android.vanilla.LibraryActivity this$0 -> eZ
    android.content.Intent val$intent -> fb
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity,android.content.Intent) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.LibraryAdapter -> ch.blinkenlights.android.vanilla.aa:
    java.lang.String DATA_EXPANDABLE -> fc
    java.lang.String DATA_FILE -> fd
    java.lang.String DATA_ID -> DATA_ID
    java.lang.String DATA_TITLE -> fe
    java.lang.String DATA_TYPE -> ff
    long HEADER_ID -> fg
    long INVALID_ID -> fh
    ch.blinkenlights.android.vanilla.Limiter buildLimiter(long) -> c
    void clear() -> clear
    void commitQuery(java.lang.Object) -> b
    android.content.Intent createData(android.view.View) -> g
    ch.blinkenlights.android.vanilla.Limiter getLimiter() -> y
    int getMediaType() -> z
    java.lang.Object query() -> A
    void setFilter(java.lang.String) -> d
    void setLimiter(ch.blinkenlights.android.vanilla.Limiter) -> a
ch.blinkenlights.android.vanilla.LibraryPagerAdapter -> ch.blinkenlights.android.vanilla.ab:
    int[] DEFAULT_ORDER -> fi
    int MAX_ADAPTER_COUNT -> fj
    int MSG_COMMIT_QUERY -> fk
    int MSG_REQUEST_REQUERY -> fl
    int MSG_RUN_QUERY -> fm
    int MSG_SAVE_SORT -> fn
    int[] TITLES -> fo
    ch.blinkenlights.android.vanilla.LibraryPagerAdapter$AdaperPositionLruCache sLruAdapterPos -> fp
    ch.blinkenlights.android.vanilla.LibraryActivity mActivity -> da
    ch.blinkenlights.android.vanilla.LibraryAdapter[] mAdapters -> fq
    ch.blinkenlights.android.vanilla.MediaAdapter mAlbumAdapter -> fr
    android.widget.LinearLayout mAlbumHeader -> fs
    int mAlbumsPosition -> ft
    ch.blinkenlights.android.vanilla.MediaAdapter mArtistAdapter -> fu
    android.widget.LinearLayout mArtistHeader -> fv
    int mArtistsPosition -> fw
    ch.blinkenlights.android.vanilla.LibraryAdapter mCurrentAdapter -> eR
    int mCurrentPage -> fx
    ch.blinkenlights.android.vanilla.FileSystemAdapter mFilesAdapter -> fy
    java.lang.String mFilter -> fz
    ch.blinkenlights.android.vanilla.MediaAdapter mGenreAdapter -> fA
    int mGenresPosition -> fB
    java.lang.String mHeaderText -> fC
    android.widget.ListView[] mLists -> fD
    ch.blinkenlights.android.vanilla.Limiter mPendingAlbumLimiter -> fE
    ch.blinkenlights.android.vanilla.Limiter mPendingArtistLimiter -> fF
    ch.blinkenlights.android.vanilla.Limiter mPendingFileLimiter -> fG
    ch.blinkenlights.android.vanilla.Limiter mPendingSongLimiter -> fH
    ch.blinkenlights.android.vanilla.MediaAdapter mPlaylistAdapter -> fI
    android.database.ContentObserver mPlaylistObserver -> fJ
    boolean[] mRequeryNeeded -> fK
    ch.blinkenlights.android.vanilla.MediaAdapter mSongAdapter -> fL
    android.widget.LinearLayout mSongHeader -> fM
    int mSongsPosition -> fN
    int mTabCount -> fO
    int[] mTabOrder -> fP
    android.os.Handler mUiHandler -> cK
    android.os.Handler mWorkerHandler -> fQ
    void <clinit>() -> <clinit>
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity,android.os.Looper) -> <init>
    android.content.Intent createHeaderIntent(android.view.View) -> i
    void maintainPosition() -> N
    void postRunQuery(ch.blinkenlights.android.vanilla.LibraryAdapter) -> a
    void requeryIfNeeded(int) -> r
    void clearLimiter(int) -> s
    void computeExpansions() -> O
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    int getCount() -> getCount
    ch.blinkenlights.android.vanilla.Limiter getCurrentLimiter() -> P
    int getItemPosition(java.lang.Object) -> a
    java.lang.CharSequence getPageTitle(int) -> d
    boolean handleMessage(android.os.Message) -> handleMessage
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void invalidateData() -> Q
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    void loadSortOrder(ch.blinkenlights.android.vanilla.MediaAdapter) -> a
    boolean loadTabOrder() -> R
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onPageScrollStateChanged(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> b
    void postRequestRequery(ch.blinkenlights.android.vanilla.LibraryAdapter) -> b
    void requestRequery(ch.blinkenlights.android.vanilla.LibraryAdapter) -> c
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    android.os.Parcelable saveState() -> b
    void setFilter(java.lang.String) -> d
    void setHeaderText(java.lang.String) -> f
    int setLimiter(ch.blinkenlights.android.vanilla.Limiter) -> b
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void setSortMode(int) -> t
ch.blinkenlights.android.vanilla.LibraryPagerAdapter$1 -> ch.blinkenlights.android.vanilla.ac:
    ch.blinkenlights.android.vanilla.LibraryPagerAdapter this$0 -> fR
    void <init>(ch.blinkenlights.android.vanilla.LibraryPagerAdapter,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
ch.blinkenlights.android.vanilla.LibraryPagerAdapter$AdaperPositionLruCache -> ch.blinkenlights.android.vanilla.ad:
    ch.blinkenlights.android.vanilla.LibraryPagerAdapter this$0 -> fR
    void <init>(ch.blinkenlights.android.vanilla.LibraryPagerAdapter,int) -> <init>
    java.lang.String _k(ch.blinkenlights.android.vanilla.LibraryAdapter) -> d
    java.lang.Integer popPosition(ch.blinkenlights.android.vanilla.LibraryAdapter) -> e
    void storePosition(ch.blinkenlights.android.vanilla.LibraryAdapter,java.lang.Integer) -> a
ch.blinkenlights.android.vanilla.Limiter -> ch.blinkenlights.android.vanilla.ae:
    long serialVersionUID -> serialVersionUID
    java.lang.Object data -> data
    java.lang.String[] names -> fS
    int type -> type
    void <init>(int,java.lang.String[],java.lang.Object) -> <init>
ch.blinkenlights.android.vanilla.ListPreferenceSummary -> ch.blinkenlights.android.vanilla.af:
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    java.lang.CharSequence getSummary() -> getSummary
    void onDialogClosed(boolean) -> onDialogClosed
ch.blinkenlights.android.vanilla.MediaAdapter -> ch.blinkenlights.android.vanilla.ag:
    java.lang.String DB_NULLSTRING_FALLBACK -> fT
    java.lang.String SORT_MAGIC_PLAYCOUNT -> fU
    java.util.regex.Pattern SPACE_SPLIT -> cZ
    ch.blinkenlights.android.vanilla.LibraryActivity mActivity -> da
    java.util.List mAlphabet -> fV
    java.lang.String mConstraint -> fW
    android.content.Context mContext -> mContext
    int mCoverCacheType -> fX
    android.database.Cursor mCursor -> fY
    boolean mExpandable -> fZ
    java.lang.String[] mFieldKeys -> ga
    java.lang.String[] mFields -> gb
    android.view.LayoutInflater mInflater -> dh
    ch.blinkenlights.android.vanilla.Limiter mLimiter -> di
    java.lang.String[] mProjection -> gc
    java.lang.String mSongSort -> gd
    int[] mSortEntries -> ge
    int mSortMode -> gf
    java.lang.String[] mSortValues -> gg
    android.net.Uri mStore -> gh
    int mType -> gi
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,int,ch.blinkenlights.android.vanilla.Limiter,ch.blinkenlights.android.vanilla.LibraryActivity) -> <init>
    void buildAlphabet() -> S
    ch.blinkenlights.android.vanilla.QueryTask buildQuery(java.lang.String[],boolean) -> a
    java.lang.String getFirstSortColumn() -> T
    ch.blinkenlights.android.vanilla.Limiter buildLimiter(long) -> c
    ch.blinkenlights.android.vanilla.QueryTask buildSongQuery(java.lang.String[]) -> a
    void changeCursor(android.database.Cursor) -> changeCursor
    void clear() -> clear
    void commitQuery(java.lang.Object) -> b
    android.content.Intent createData(android.view.View) -> g
    int getCount() -> getCount
    int getDefaultSortMode() -> U
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    ch.blinkenlights.android.vanilla.Limiter getLimiter() -> y
    int getLimiterType() -> V
    int getMediaType() -> z
    int getPositionForSection(int) -> getPositionForSection
    int getSectionForPosition(int) -> getSectionForPosition
    java.lang.Object[] getSections() -> getSections
    int[] getSortEntries() -> W
    int getSortMode() -> X
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean hasStableIds() -> hasStableIds
    void onClick(android.view.View) -> onClick
    android.database.Cursor query() -> Y
    java.lang.Object query() -> A
    void setExpandable(boolean) -> j
    void setFilter(java.lang.String) -> d
    void setLimiter(ch.blinkenlights.android.vanilla.Limiter) -> a
    void setSortMode(int) -> t
ch.blinkenlights.android.vanilla.MediaAdapter$SectionIndex -> ch.blinkenlights.android.vanilla.ah:
    java.lang.Object hint -> gj
    int position -> position
    ch.blinkenlights.android.vanilla.MediaAdapter this$0 -> gk
    void <init>(ch.blinkenlights.android.vanilla.MediaAdapter,java.lang.Object,int) -> <init>
    int access$000(ch.blinkenlights.android.vanilla.MediaAdapter$SectionIndex) -> a
    java.lang.String toString() -> toString
ch.blinkenlights.android.vanilla.MediaButtonReceiver -> ch.blinkenlights.android.vanilla.MediaButtonReceiver:
    int DOUBLE_CLICK_DELAY -> gl
    int sBeep -> gm
    android.media.AsyncPlayer sBeepPlayer -> gn
    android.net.Uri sBeepSound -> go
    long sLastClickTime -> gp
    int sUseControls -> gq
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void beep(android.content.Context) -> e
    boolean processKey(android.content.Context,android.view.KeyEvent) -> a
    void reloadPreference(android.content.Context) -> f
    boolean useHeadsetControls(android.content.Context) -> g
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
ch.blinkenlights.android.vanilla.MediaUtils -> ch.blinkenlights.android.vanilla.ai:
    java.lang.String ALBUM_SORT -> gr
    java.lang.String DEFAULT_SORT -> gs
    int TYPE_ALBUM -> gt
    int TYPE_ARTIST -> gu
    int TYPE_COUNT -> gv
    int TYPE_FILE -> TYPE_FILE
    int TYPE_GENRE -> gw
    int TYPE_INVALID -> gx
    int TYPE_PLAYLIST -> gy
    int TYPE_SONG -> gz
    long[] sAllSongs -> gA
    int sAllSongsIdx -> gB
    java.util.Random sRandom -> gC
    int sSongCount -> gD
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String addDirEndSlash(java.lang.String) -> g
    ch.blinkenlights.android.vanilla.QueryTask buildFileQuery(java.lang.String,java.lang.String[]) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildGenreExcludeEmptyQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildGenreQuery(long,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,boolean) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildMediaQuery(int,long,java.lang.String[],java.lang.String) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildPlaylistQuery(long,java.lang.String[],java.lang.String) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildQuery(int,long,java.lang.String[],java.lang.String) -> b
    boolean deleteFile(java.io.File) -> b
    android.database.Cursor getCursorForFileQuery(java.lang.String) -> h
    java.util.Random getRandom() -> Z
    ch.blinkenlights.android.vanilla.Song getSongByTypeId(android.content.ContentResolver,int,long) -> a
    boolean isSongAvailable(android.content.ContentResolver) -> a
    void onMediaChange() -> K
    long[] queryAllSongs(android.content.ContentResolver) -> b
    long queryGenreForSong(android.content.ContentResolver,long) -> a
    android.database.Cursor queryResolver(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    ch.blinkenlights.android.vanilla.Song randomSong(android.content.ContentResolver) -> c
    java.lang.String sanitizeMediaPath(java.lang.String) -> i
    void shuffle(java.util.List,boolean) -> a
    void shuffle(long[]) -> a
ch.blinkenlights.android.vanilla.MiniPlaybackActivity -> ch.blinkenlights.android.vanilla.MiniPlaybackActivity:
    void <init>() -> <init>
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService -> ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService:
    java.lang.String CUSTOM_ACTION_REPEAT -> gE
    java.lang.String CUSTOM_ACTION_SHUFFLE -> gF
    int[] FINISH_ICONS -> gG
    int MSG_NEXTSONG -> gH
    int MSG_PAUSE -> gI
    int MSG_PLAY -> gJ
    int MSG_PLAY_QUERY -> gK
    int MSG_PREVSONG -> gL
    int MSG_REPEAT -> gM
    int MSG_SEEKBW -> gN
    int MSG_SEEKFW -> gO
    int MSG_SEEKTO -> gP
    int MSG_SHUFFLE -> gQ
    int MSG_STOP -> gR
    int MSG_UPDATE_STATE -> gS
    int[] SHUFFLE_ICONS -> gT
    java.lang.String TAG -> TAG
    ch.blinkenlights.android.vanilla.MediaAdapter mAlbumAdapter -> fr
    ch.blinkenlights.android.vanilla.MediaAdapter mArtistAdapter -> fu
    ch.blinkenlights.android.vanilla.MediaAdapter mGenreAdapter -> fA
    android.os.Handler mHandler -> mHandler
    android.os.Looper mLooper -> gU
    ch.blinkenlights.android.vanilla.MediaAdapter[] mMediaAdapters -> gV
    java.util.List mMediaRoot -> gW
    ch.blinkenlights.android.vanilla.MediaAdapter mPlaylistAdapter -> fI
    java.util.List mQueryResult -> gX
    boolean mServiceStarted -> gY
    android.media.session.MediaSession mSession -> gZ
    android.os.Bundle mSessionExtras -> ha
    ch.blinkenlights.android.vanilla.MediaAdapter mSongAdapter -> fL
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.util.List access$100(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> a
    void access$200(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> b
    ch.blinkenlights.android.vanilla.MediaAdapter[] access$300(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> c
    void access$400(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService,java.util.List,int,ch.blinkenlights.android.vanilla.MediaAdapter) -> a
    ch.blinkenlights.android.vanilla.MediaAdapter access$500(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> d
    ch.blinkenlights.android.vanilla.MediaAdapter access$600(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> e
    ch.blinkenlights.android.vanilla.MediaAdapter access$700(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> f
    android.os.Handler access$800(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> g
    ch.blinkenlights.android.vanilla.Limiter buildLimiterFromMediaID(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID) -> a
    ch.blinkenlights.android.vanilla.QueryTask buildQueryFromMediaID(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID,boolean,boolean) -> a
    void clearLimiters() -> aa
    long getAvailableActions() -> ab
    void loadChildrenAsync(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID,android.service.media.MediaBrowserService$Result) -> a
    void runQuery(java.util.List,int,ch.blinkenlights.android.vanilla.MediaAdapter) -> a
    void setCustomAction(android.media.session.PlaybackState$Builder) -> a
    void setSessionActive() -> ac
    void setSessionInactive() -> ad
    java.lang.String subtitleForMediaType(int) -> u
    void updatePlaybackState(java.lang.String) -> j
    boolean handleMessage(android.os.Message) -> handleMessage
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void onError(java.lang.String) -> onError
    android.service.media.MediaBrowserService$BrowserRoot onGetRoot(java.lang.String,int,android.os.Bundle) -> onGetRoot
    void onLoadChildren(java.lang.String,android.service.media.MediaBrowserService$Result) -> onLoadChildren
    void onMediaChange() -> K
    void onMediaChanged() -> ae
    void onPositionInfoChanged() -> F
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onTimelineChanged() -> af
    void recreate() -> recreate
    void replaceSong(int,ch.blinkenlights.android.vanilla.Song) -> b
    void setSong(long,ch.blinkenlights.android.vanilla.Song) -> a
    void setState(long,int) -> a
ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$1 -> ch.blinkenlights.android.vanilla.aj:
    ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService this$0 -> hb
    void <init>(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$2 -> ch.blinkenlights.android.vanilla.ak:
    int ASYNCTASK_FAILED -> hc
    int ASYNCTASK_SUCCEEDED -> hd
    ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService this$0 -> hb
    ch.blinkenlights.android.vanilla.Limiter val$limiter -> he
    ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID val$parent -> hf
    android.service.media.MediaBrowserService$Result val$result -> hg
    void <init>(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService,ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID,ch.blinkenlights.android.vanilla.Limiter,android.service.media.MediaBrowserService$Result) -> <init>
    java.lang.Integer doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaID -> ch.blinkenlights.android.vanilla.al:
    java.lang.String FILTER_SEPARATOR -> hh
    java.lang.String ID_TYPE_ROOT -> hi
    java.lang.String MEDIATYPE_SEPARATOR -> hj
    long mId -> hk
    java.lang.String mLabel -> hl
    int mType -> gi
    void <clinit>() -> <clinit>
    void <init>(int,long,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean isTopAdapter(java.lang.String) -> k
    java.lang.String toString(int,long,java.lang.String) -> b
    boolean isInvalid() -> ag
    boolean isTopAdapter() -> ah
    java.lang.String toString() -> toString
ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$MediaSessionCallback -> ch.blinkenlights.android.vanilla.am:
    ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService this$0 -> hb
    void <init>(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService) -> <init>
    void <init>(ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService,ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService$1) -> <init>
    void onCustomAction(java.lang.String,android.os.Bundle) -> onCustomAction
    void onFastForward() -> onFastForward
    void onPause() -> onPause
    void onPlay() -> onPlay
    void onPlayFromMediaId(java.lang.String,android.os.Bundle) -> onPlayFromMediaId
    void onRewind() -> onRewind
    void onSeekTo(long) -> onSeekTo
    void onSkipToNext() -> onSkipToNext
    void onSkipToPrevious() -> onSkipToPrevious
    void onStop() -> onStop
ch.blinkenlights.android.vanilla.NewPlaylistDialog -> ch.blinkenlights.android.vanilla.an:
    boolean mAccepted -> hm
    int mActionRes -> hn
    java.lang.String mInitialText -> ho
    ch.blinkenlights.android.vanilla.PlaylistTask mPlaylistTask -> hp
    android.widget.Button mPositiveButton -> hq
    android.widget.EditText mText -> hr
    void <init>(android.content.Context,java.lang.String,int,ch.blinkenlights.android.vanilla.PlaylistTask) -> <init>
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    ch.blinkenlights.android.vanilla.PlaylistTask getPlaylistTask() -> ai
    java.lang.String getText() -> getText
    boolean isAccepted() -> aj
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
ch.blinkenlights.android.vanilla.OneCellWidget -> ch.blinkenlights.android.vanilla.OneCellWidget:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.android.vanilla.PermissionRequestActivity -> ch.blinkenlights.android.vanilla.PermissionRequestActivity:
    java.lang.String[] NEEDED_PERMISSIONS -> hs
    android.content.Intent mCallbackIntent -> ht
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean havePermissions(android.content.Context) -> h
    boolean requestPermissions(android.app.Activity,android.content.Intent) -> a
    void showWarning(ch.blinkenlights.android.vanilla.LibraryActivity,android.content.Intent) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
ch.blinkenlights.android.vanilla.PermissionRequestActivity$1 -> ch.blinkenlights.android.vanilla.ao:
    ch.blinkenlights.android.vanilla.LibraryActivity val$activity -> hu
    android.content.Intent val$intent -> fb
    void <init>(ch.blinkenlights.android.vanilla.LibraryActivity,android.content.Intent) -> <init>
    void onClick(android.view.View) -> onClick
ch.blinkenlights.android.vanilla.PlayCountsHelper -> ch.blinkenlights.android.vanilla.ap:
    java.lang.String DATABASE_CREATE -> hv
    java.lang.String DATABASE_NAME -> hw
    int DATABASE_VERSION -> hx
    java.lang.String INDEX_TYPE_CREATE -> hy
    java.lang.String INDEX_UNIQUE_CREATE -> hz
    java.lang.String TABLE_PLAYCOUNTS -> hA
    android.content.Context ctx -> hB
    void <init>(android.content.Context) -> <init>
    int performGC(int) -> v
    void countSong(ch.blinkenlights.android.vanilla.Song) -> b
    java.util.ArrayList getTopSongs(int) -> w
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
ch.blinkenlights.android.vanilla.PlaybackActivity -> ch.blinkenlights.android.vanilla.PlaybackActivity:
    int CTX_MENU_GRP_FINISH -> hC
    int CTX_MENU_GRP_SHUFFLE -> hD
    int MENU_ADD_TO_PLAYLIST -> hE
    int MENU_CLEAR_QUEUE -> hF
    int MENU_DELETE -> hG
    int MENU_EMPTY_QUEUE -> hH
    int MENU_ENQUEUE_ALBUM -> hI
    int MENU_ENQUEUE_ARTIST -> hJ
    int MENU_ENQUEUE_GENRE -> hK
    int MENU_HIDE_QUEUE -> hL
    int MENU_LIBRARY -> hM
    int MENU_PLAYBACK -> hN
    int MENU_PREFS -> hO
    int MENU_SAVE_QUEUE_AS_PLAYLIST -> hP
    int MENU_SEARCH -> hQ
    int MENU_SHOW_QUEUE -> hR
    int MENU_SONG_FAVORITE -> hS
    int MENU_SORT -> hT
    int MSG_ADD_TO_PLAYLIST -> hU
    int MSG_DELETE -> hV
    int MSG_NEW_PLAYLIST -> hW
    int MSG_NOTIFY_PLAYLIST_CHANGED -> hX
    int MSG_REMOVE_FROM_PLAYLIST -> hY
    int MSG_RENAME_PLAYLIST -> hZ
    int MSG_SAVE_QUEUE_AS_PLAYLIST -> ia
    ch.blinkenlights.android.vanilla.CoverView mCoverView -> ib
    ch.blinkenlights.android.vanilla.Action mDownAction -> ic
    android.widget.ImageButton mEndButton -> ie
    android.os.Handler mHandler -> mHandler
    long mLastSongEvent -> if
    long mLastStateEvent -> ig
    android.os.Looper mLooper -> gU
    android.widget.ImageButton mPlayPauseButton -> ih
    android.widget.ImageButton mShuffleButton -> ii
    int mState -> ij
    android.os.Handler mUiHandler -> cK
    ch.blinkenlights.android.vanilla.Action mUpAction -> ik
    void <init>() -> <init>
    void delete(android.content.Intent) -> h
    void removeFromPlaylist(ch.blinkenlights.android.vanilla.PlaylistTask) -> a
    void rewindCurrentSong() -> ak
    void showToast(java.lang.String,int) -> a
    void addToPlaylist(ch.blinkenlights.android.vanilla.PlaylistTask) -> b
    void bindControlButtons() -> al
    void cycleFinishAction() -> am
    void cycleShuffle() -> an
    void downSwipe() -> w
    boolean handleMessage(android.os.Message) -> handleMessage
    void onClick(android.view.View) -> onClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onMediaChange() -> K
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPositionInfoChanged() -> F
    void onResume() -> onResume
    void onServiceReady() -> ao
    void onSongChange(ch.blinkenlights.android.vanilla.Song) -> a
    void onStart() -> onStart
    void onStateChange(int,int) -> d
    void onTimelineChanged() -> af
    void openLibrary(ch.blinkenlights.android.vanilla.Song) -> c
    void performAction(ch.blinkenlights.android.vanilla.Action) -> a
    void playPause() -> ap
    void replaceSong(int,ch.blinkenlights.android.vanilla.Song) -> b
    void setSong(long,ch.blinkenlights.android.vanilla.Song) -> a
    void setSong(ch.blinkenlights.android.vanilla.Song) -> setSong
    void setState(int) -> setState
    void setState(long,int) -> a
    void shiftCurrentSong(int) -> n
    void upSwipe() -> x
ch.blinkenlights.android.vanilla.PlaybackActivity$1 -> ch.blinkenlights.android.vanilla.aq:
    ch.blinkenlights.android.vanilla.PlaybackActivity this$0 -> il
    int val$state -> im
    int val$toggled -> in
    void <init>(ch.blinkenlights.android.vanilla.PlaybackActivity,int,int) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.PlaybackActivity$2 -> ch.blinkenlights.android.vanilla.ar:
    ch.blinkenlights.android.vanilla.PlaybackActivity this$0 -> il
    ch.blinkenlights.android.vanilla.Song val$song -> ed
    void <init>(ch.blinkenlights.android.vanilla.PlaybackActivity,ch.blinkenlights.android.vanilla.Song) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.PlaybackActivity$3 -> ch.blinkenlights.android.vanilla.as:
    ch.blinkenlights.android.vanilla.PlaybackActivity this$0 -> il
    int val$duration -> io
    java.lang.String val$message -> ip
    void <init>(ch.blinkenlights.android.vanilla.PlaybackActivity,java.lang.String,int) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.PlaybackActivity$SaveAsPlaylistDismiss -> ch.blinkenlights.android.vanilla.at:
    ch.blinkenlights.android.vanilla.PlaybackActivity this$0 -> il
    void <init>(ch.blinkenlights.android.vanilla.PlaybackActivity) -> <init>
    void onDismiss(android.content.DialogInterface) -> onDismiss
ch.blinkenlights.android.vanilla.PlaybackService -> ch.blinkenlights.android.vanilla.PlaybackService:
    java.lang.String ACTION_CLOSE_NOTIFICATION -> iq
    java.lang.String ACTION_CYCLE_REPEAT -> ir
    java.lang.String ACTION_CYCLE_SHUFFLE -> is
    java.lang.String ACTION_NEXT_SONG -> it
    java.lang.String ACTION_NEXT_SONG_AUTOPLAY -> iu
    java.lang.String ACTION_NEXT_SONG_DELAYED -> iv
    java.lang.String ACTION_PAUSE -> iw
    java.lang.String ACTION_PLAY -> ix
    java.lang.String ACTION_PREVIOUS_SONG -> iy
    java.lang.String ACTION_PREVIOUS_SONG_AUTOPLAY -> iz
    java.lang.String ACTION_TOGGLE_PLAYBACK -> iA
    java.lang.String ACTION_TOGGLE_PLAYBACK_DELAYED -> iB
    java.lang.String ACTION_TOGGLE_PLAYBACK_NOTIFICATION -> iC
    int ALWAYS -> iD
    int FLAG_DUCKING -> iE
    int FLAG_EMPTY_QUEUE -> iF
    int FLAG_ERROR -> iG
    int FLAG_NO_MEDIA -> iH
    int FLAG_PLAYING -> iI
    long IDLE_GRACE_PERIOD -> iJ
    int MASK_FINISH -> iK
    int MASK_SHUFFLE -> iL
    int MIN_SHAKE_PERIOD -> iM
    int MSG_BROADCAST_CHANGE -> iN
    int MSG_CALL_GO -> iO
    int MSG_ENTER_SLEEP_STATE -> iP
    int MSG_FADE_OUT -> iQ
    int MSG_GAPLESS_UPDATE -> iR
    int MSG_IDLE_TIMEOUT -> iS
    int MSG_PROCESS_SONG -> iT
    int MSG_PROCESS_STATE -> iU
    int MSG_QUERY -> iV
    int MSG_SAVE_STATE -> iW
    int MSG_SKIP_BROKEN_SONG -> iX
    int MSG_UPDATE_PLAYCOUNTS -> iY
    int NEVER -> iZ
    int NOTIFICATION_ID -> ja
    int NOT_ACTION_FULL_ACTIVITY -> jb
    int NOT_ACTION_MAIN_ACTIVITY -> jc
    int NOT_ACTION_MINI_ACTIVITY -> jd
    int NOT_ACTION_NEXT_SONG -> je
    int REWIND_AFTER_PLAYED_MS -> jf
    int SAVE_STATE_DELAY -> jg
    int SHIFT_DUCKING -> jh
    int SHIFT_FINISH -> ji
    int SHIFT_SHUFFLE -> jj
    int SLEEP_STATE_DELAY -> jk
    java.lang.String STATE_FILE -> jl
    long STATE_FILE_MAGIC -> jm
    int STATE_VERSION -> jn
    int WHEN_PLAYING -> jo
    java.util.ArrayList sCallbacks -> jp
    ch.blinkenlights.android.vanilla.PlaybackService sInstance -> jq
    android.content.SharedPreferences sSettings -> jr
    java.lang.Object[] sWait -> js
    double mAccelFiltered -> jt
    double mAccelLast -> ju
    android.media.AudioManager mAudioManager -> jv
    int mAutoPlPlaycounts -> jw
    ch.blinkenlights.android.vanilla.BastpUtil mBastpUtil -> jx
    ch.blinkenlights.android.vanilla.Song mCurrentSong -> dJ
    java.lang.String mErrorMessage -> mErrorMessage
    float mFadeOut -> jy
    boolean mForceNotificationVisible -> jz
    android.os.Handler mHandler -> mHandler
    boolean mHeadsetOnly -> jA
    boolean mHeadsetPause -> jB
    long mIdleStart -> jC
    int mIdleTimeout -> jD
    boolean mIgnoreAudioFocusLoss -> jE
    long mLastShakeTime -> jF
    android.os.Looper mLooper -> gU
    ch.blinkenlights.android.vanilla.VanillaMediaPlayer mMediaPlayer -> jG
    boolean mMediaPlayerAudioFxActive -> jH
    boolean mMediaPlayerInitialized -> jI
    android.app.PendingIntent mNotificationAction -> jJ
    android.app.NotificationManager mNotificationManager -> jK
    int mNotificationMode -> jL
    boolean mNotificationNag -> jM
    android.database.ContentObserver mObserver -> jN
    int mPendingSeek -> jO
    long mPendingSeekSong -> jP
    ch.blinkenlights.android.vanilla.PlayCountsHelper mPlayCounts -> jQ
    ch.blinkenlights.android.vanilla.VanillaMediaPlayer mPreparedMediaPlayer -> jR
    ch.blinkenlights.android.vanilla.ReadaheadThread mReadahead -> jS
    boolean mReadaheadEnabled -> jT
    ch.blinkenlights.android.vanilla.PlaybackService$Receiver mReceiver -> jU
    ch.blinkenlights.android.vanilla.RemoteControl$Client mRemoteControlClient -> jV
    boolean mReplayGainAlbumEnabled -> jW
    int mReplayGainBump -> jX
    boolean mReplayGainTrackEnabled -> jY
    int mReplayGainUntaggedDeBump -> jZ
    boolean mScrobble -> ka
    android.hardware.SensorManager mSensorManager -> kb
    ch.blinkenlights.android.vanilla.Action mShakeAction -> kc
    double mShakeThreshold -> kd
    int mSkipBroken -> ke
    int mState -> ij
    java.lang.Object[] mStateLock -> kf
    boolean mStockBroadcast -> kg
    ch.blinkenlights.android.vanilla.SongTimeline mTimeline -> kh
    boolean mTransientAudioLoss -> ki
    int mVolumeDuringDucking -> kj
    android.os.PowerManager$WakeLock mWakeLock -> kk
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void addTimelineCallback(ch.blinkenlights.android.vanilla.TimelineCallback) -> a
    void applyReplayGain(ch.blinkenlights.android.vanilla.VanillaMediaPlayer) -> a
    void broadcastChange(int,ch.blinkenlights.android.vanilla.Song,long) -> a
    void enterSleepState() -> aq
    int finishAction(int) -> x
    ch.blinkenlights.android.vanilla.PlaybackService get(android.content.Context) -> i
    ch.blinkenlights.android.vanilla.MirrorLinkMediaBrowserService getMirrorLinkCallback() -> ar
    ch.blinkenlights.android.vanilla.VanillaMediaPlayer getNewMediaPlayer() -> as
    android.content.SharedPreferences getSettings(android.content.Context) -> j
    boolean hasInstance() -> at
    void initWidgets() -> au
    boolean isSpeakerOn() -> av
    void loadPreference(java.lang.String) -> l
    void processNewState(int,int) -> e
    void processSong(ch.blinkenlights.android.vanilla.Song) -> d
    void refreshDuckingValues() -> aw
    void refreshReplayGainValues() -> ax
    void removeTimelineCallback(ch.blinkenlights.android.vanilla.TimelineCallback) -> b
    void scrobble() -> ay
    ch.blinkenlights.android.vanilla.Song setCurrentSong(int) -> y
    void setupSensor() -> az
    void showMirrorLinkSafeToast(int,int) -> f
    void showMirrorLinkSafeToast(java.lang.CharSequence,int) -> a
    int shuffleMode(int) -> z
    void stockMusicBroadcast() -> aA
    void triggerGaplessUpdate() -> aB
    void triggerReadAhead() -> aC
    void updateNotification() -> aD
    int updateState(int) -> A
    void updateWidgets() -> aE
    void activeSongReplaced(int,ch.blinkenlights.android.vanilla.Song) -> c
    void addSongs(ch.blinkenlights.android.vanilla.QueryTask) -> a
    void clearQueue() -> aF
    android.app.Notification createNotification(ch.blinkenlights.android.vanilla.Song,int,int) -> a
    android.app.PendingIntent createNotificationAction(android.content.SharedPreferences) -> a
    int cycleFinishAction() -> aG
    int cycleShuffle() -> aH
    int deleteMedia(int,long) -> a
    void emptyQueue() -> aI
    void enqueueFromSong(ch.blinkenlights.android.vanilla.Song,int) -> b
    int getAudioSession() -> aJ
    int getDuration() -> getDuration
    java.lang.String getErrorMessage() -> aK
    int getPosition() -> getPosition
    ch.blinkenlights.android.vanilla.BastpUtil$GainValues getReplayGainValues(java.lang.String) -> c
    ch.blinkenlights.android.vanilla.Song getSong(int) -> B
    ch.blinkenlights.android.vanilla.Song getSongByQueuePosition(int) -> C
    int getState() -> getState
    int getTimelineLength() -> aL
    int getTimelinePosition() -> aM
    boolean handleMessage(android.os.Message) -> handleMessage
    boolean isPlaying() -> isPlaying
    void jumpToQueuePosition(int) -> D
    int loadState() -> aN
    void moveSongPosition(int,int) -> g
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onAudioFocusChange(int) -> onAudioFocusChange
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    void onMediaChange() -> K
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    int pause() -> aO
    void performAction(ch.blinkenlights.android.vanilla.Action,ch.blinkenlights.android.vanilla.PlaybackActivity) -> a
    int play() -> aP
    int playPause() -> aQ
    void positionInfoChanged() -> aR
    void prepareMediaPlayer(ch.blinkenlights.android.vanilla.VanillaMediaPlayer,java.lang.String) -> a
    void removeSongPosition(int) -> E
    ch.blinkenlights.android.vanilla.Song rewindCurrentSong() -> aS
    void runQuery(ch.blinkenlights.android.vanilla.QueryTask) -> b
    void saveState(int) -> F
    void seekToProgress(int) -> G
    int setFinishAction(int) -> H
    void setFlag(int) -> I
    int setShuffleMode(int) -> J
    ch.blinkenlights.android.vanilla.Song shiftCurrentSong(int) -> K
    void timelineChanged() -> aT
    void unsetFlag(int) -> L
    void userActionTriggered() -> aU
ch.blinkenlights.android.vanilla.PlaybackService$1 -> ch.blinkenlights.android.vanilla.au:
    ch.blinkenlights.android.vanilla.PlaybackService this$0 -> kl
    void <init>(ch.blinkenlights.android.vanilla.PlaybackService,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
ch.blinkenlights.android.vanilla.PlaybackService$2 -> ch.blinkenlights.android.vanilla.av:
    int[] $SwitchMap$ch$blinkenlights$android$vanilla$Action -> ee
    void <clinit>() -> <clinit>
ch.blinkenlights.android.vanilla.PlaybackService$Receiver -> ch.blinkenlights.android.vanilla.PlaybackService$Receiver:
    ch.blinkenlights.android.vanilla.PlaybackService this$0 -> kl
    void <init>(ch.blinkenlights.android.vanilla.PlaybackService) -> <init>
    void <init>(ch.blinkenlights.android.vanilla.PlaybackService,ch.blinkenlights.android.vanilla.PlaybackService$1) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
ch.blinkenlights.android.vanilla.Playlist -> ch.blinkenlights.android.vanilla.aw:
    void <init>() -> <init>
    void _copyToPlaylist(android.content.ContentResolver,long,long) -> a
    int addToPlaylist(android.content.ContentResolver,long,ch.blinkenlights.android.vanilla.QueryTask) -> a
    int addToPlaylist(android.content.ContentResolver,long,java.util.ArrayList) -> a
    long createPlaylist(android.content.ContentResolver,java.lang.String) -> a
    void deletePlaylist(android.content.ContentResolver,long) -> b
    long getFavoritesId(android.content.Context,boolean) -> a
    long getPlaylist(android.content.ContentResolver,java.lang.String) -> b
    boolean isInPlaylist(android.content.ContentResolver,long,ch.blinkenlights.android.vanilla.Song) -> a
    android.database.Cursor queryPlaylists(android.content.ContentResolver) -> d
    int removeFromPlaylist(android.content.ContentResolver,long,java.util.ArrayList) -> b
    void renamePlaylist(android.content.ContentResolver,long,java.lang.String) -> a
ch.blinkenlights.android.vanilla.PlaylistActivity -> ch.blinkenlights.android.vanilla.PlaylistActivity:
    int MENU_ENQUEUE -> km
    int MENU_ENQUEUE_ALL -> kn
    int MENU_ENQUEUE_AS_NEXT -> ko
    int MENU_PLAY -> kp
    int MENU_PLAY_ALL -> kq
    int MENU_REMOVE -> kr
    int[] MODE_FOR_ACTION -> ks
    ch.blinkenlights.android.vanilla.PlaylistAdapter mAdapter -> kt
    int mDefaultAction -> eS
    android.widget.Button mDeleteButton -> ku
    android.widget.Button mEditButton -> kv
    boolean mEditing -> kw
    int mLastAction -> eU
    com.mobeta.android.dslv.DragSortListView mListView -> kx
    android.os.Looper mLooper -> gU
    long mPlaylistId -> ky
    java.lang.String mPlaylistName -> kz
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void performAction(int,int,long) -> a
    void drop(int,int) -> h
    void onClick(android.content.DialogInterface,int) -> onClick
    void onClick(android.view.View) -> onClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onDestroy() -> onDestroy
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStart() -> onStart
    void remove(int) -> remove
    void setEditing(boolean) -> k
ch.blinkenlights.android.vanilla.PlaylistAdapter -> ch.blinkenlights.android.vanilla.ax:
    int MSG_RUN_QUERY -> fm
    int MSG_UPDATE_CURSOR -> kA
    java.lang.String[] PROJECTION -> kB
    android.content.Context mContext -> mContext
    boolean mEditable -> kC
    android.view.LayoutInflater mInflater -> dh
    long mPlaylistId -> ky
    android.os.Handler mUiHandler -> cK
    android.os.Handler mWorkerHandler -> fQ
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,android.os.Looper) -> <init>
    android.database.Cursor runQuery(android.content.ContentResolver) -> e
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    boolean handleMessage(android.os.Message) -> handleMessage
    void moveItem(int,int) -> i
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    void removeItem(int) -> removeItem
    void setEditable(boolean) -> setEditable
    void setPlaylistId(long) -> d
ch.blinkenlights.android.vanilla.PlaylistDialog -> ch.blinkenlights.android.vanilla.ay:
    int VALUE_CREATE_PLAYLIST -> kD
    ch.blinkenlights.android.vanilla.PlaylistDialog$Callback mCallback -> kE
    android.content.Intent mIntent -> kF
    java.lang.String[] mItemName -> kG
    long[] mItemValue -> kH
    void <init>(ch.blinkenlights.android.vanilla.PlaylistDialog$Callback,android.content.Intent) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
ch.blinkenlights.android.vanilla.PlaylistDialog$Callback -> ch.blinkenlights.android.vanilla.az:
    void appendToPlaylistFromIntent(android.content.Intent) -> i
    void createNewPlaylistFromIntent(android.content.Intent) -> j
ch.blinkenlights.android.vanilla.PlaylistTask -> ch.blinkenlights.android.vanilla.ba:
    java.util.ArrayList audioIds -> kI
    java.lang.String name -> name
    long playlistId -> kJ
    ch.blinkenlights.android.vanilla.QueryTask query -> kK
    void <init>(long,java.lang.String) -> <init>
ch.blinkenlights.android.vanilla.PrefDefaults -> ch.blinkenlights.android.vanilla.bb:
    int AUTOPLAYLIST_PLAYCOUNTS -> kL
    boolean COVERLOADER_ANDROID -> kM
    boolean COVERLOADER_SHADOW -> kN
    boolean COVERLOADER_VANILLA -> kO
    ch.blinkenlights.android.vanilla.Action COVER_LONGPRESS_ACTION -> kP
    boolean COVER_ON_LOCKSCREEN -> kQ
    ch.blinkenlights.android.vanilla.Action COVER_PRESS_ACTION -> kR
    java.lang.String DEFAULT_ACTION_INT -> kS
    java.lang.String DEFAULT_PLAYLIST_ACTION -> kT
    boolean DISABLE_LOCKSCREEN -> kU
    java.lang.String DISPLAY_MODE -> kV
    boolean DOUBLE_TAP -> kW
    boolean ENABLE_ALBUM_REPLAYGAIN -> kX
    boolean ENABLE_READAHEAD -> kY
    boolean ENABLE_SHAKE -> kZ
    boolean ENABLE_TRACK_REPLAYGAIN -> la
    java.lang.String FILESYSTEM_BROWSE_START -> lb
    boolean HEADSET_ONLY -> lc
    boolean HEADSET_PAUSE -> ld
    int IDLE_TIMEOUT -> le
    boolean IGNORE_AUDIOFOCUS_LOSS -> lf
    int LIBRARY_PAGE -> lg
    boolean MEDIA_BUTTON -> lh
    boolean MEDIA_BUTTON_BEEP -> li
    java.lang.String NOTIFICATION_ACTION -> lj
    java.lang.String NOTIFICATION_MODE -> lk
    boolean NOTIFICATION_NAG -> ll
    boolean PLAYBACK_ON_STARTUP -> lm
    int REPLAYGAIN_BUMP -> ln
    int REPLAYGAIN_UNTAGGED_DEBUMP -> lo
    boolean SCROBBLE -> lp
    java.lang.String SELECTED_THEME -> lq
    ch.blinkenlights.android.vanilla.Action SHAKE_ACTION -> lr
    int SHAKE_THRESHOLD -> ls
    boolean STOCK_BROADCAST -> lt
    ch.blinkenlights.android.vanilla.Action SWIPE_DOWN_ACTION -> lu
    ch.blinkenlights.android.vanilla.Action SWIPE_UP_ACTION -> lv
    java.lang.String TAB_ORDER -> lw
    boolean USE_IDLE_TIMEOUT -> lx
    boolean VISIBLE_CONTROLS -> ly
    boolean VISIBLE_EXTRA_INFO -> lz
    int VOLUME_DURING_DUCKING -> lA
    void <clinit>() -> <clinit>
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.PrefKeys -> ch.blinkenlights.android.vanilla.bc:
    java.lang.String AUTOPLAYLIST_PLAYCOUNTS -> lB
    java.lang.String COVERLOADER_ANDROID -> lC
    java.lang.String COVERLOADER_SHADOW -> lD
    java.lang.String COVERLOADER_VANILLA -> lE
    java.lang.String COVER_LONGPRESS_ACTION -> lF
    java.lang.String COVER_ON_LOCKSCREEN -> lG
    java.lang.String COVER_PRESS_ACTION -> lH
    java.lang.String DEFAULT_ACTION_INT -> kS
    java.lang.String DEFAULT_PLAYLIST_ACTION -> kT
    java.lang.String DISABLE_LOCKSCREEN -> lI
    java.lang.String DISPLAY_MODE -> kV
    java.lang.String DOUBLE_TAP -> lJ
    java.lang.String ENABLE_ALBUM_REPLAYGAIN -> lK
    java.lang.String ENABLE_READAHEAD -> lL
    java.lang.String ENABLE_SHAKE -> lM
    java.lang.String ENABLE_TRACK_REPLAYGAIN -> lN
    java.lang.String FILESYSTEM_BROWSE_START -> lb
    java.lang.String HEADSET_ONLY -> lO
    java.lang.String HEADSET_PAUSE -> lP
    java.lang.String IDLE_TIMEOUT -> lQ
    java.lang.String IGNORE_AUDIOFOCUS_LOSS -> lR
    java.lang.String LIBRARY_PAGE -> lS
    java.lang.String MEDIA_BUTTON -> lT
    java.lang.String MEDIA_BUTTON_BEEP -> lU
    java.lang.String NOTIFICATION_ACTION -> lj
    java.lang.String NOTIFICATION_MODE -> lk
    java.lang.String NOTIFICATION_NAG -> lV
    java.lang.String PLAYBACK_ON_STARTUP -> lW
    java.lang.String REPLAYGAIN_BUMP -> lX
    java.lang.String REPLAYGAIN_UNTAGGED_DEBUMP -> lY
    java.lang.String SCROBBLE -> lZ
    java.lang.String SELECTED_THEME -> lq
    java.lang.String SHAKE_ACTION -> ma
    java.lang.String SHAKE_THRESHOLD -> mb
    java.lang.String STOCK_BROADCAST -> mc
    java.lang.String SWIPE_DOWN_ACTION -> md
    java.lang.String SWIPE_UP_ACTION -> me
    java.lang.String TAB_ORDER -> lw
    java.lang.String USE_IDLE_TIMEOUT -> mf
    java.lang.String VISIBLE_CONTROLS -> mg
    java.lang.String VISIBLE_EXTRA_INFO -> mh
    java.lang.String VOLUME_DURING_DUCKING -> mi
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.PreferencesActivity -> ch.blinkenlights.android.vanilla.PreferencesActivity:
    java.lang.String VPLUG_PACKAGE_NAME -> mj
    void <init>() -> <init>
    boolean isValidFragment(java.lang.String) -> isValidFragment
    void onBuildHeaders(java.util.List) -> onBuildHeaders
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
ch.blinkenlights.android.vanilla.PreferencesActivity$AboutFragment -> ch.blinkenlights.android.vanilla.bd:
    void <init>() -> <init>
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
ch.blinkenlights.android.vanilla.PreferencesActivity$AudioFragment -> ch.blinkenlights.android.vanilla.be:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$CoverArtFragment -> ch.blinkenlights.android.vanilla.bf:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$EqualizerFragment -> ch.blinkenlights.android.vanilla.bg:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment -> ch.blinkenlights.android.vanilla.bh:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment$1 -> ch.blinkenlights.android.vanilla.bi:
    ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment this$0 -> mk
    void <init>(ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment$2 -> ch.blinkenlights.android.vanilla.bj:
    ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment this$0 -> mk
    void <init>(ch.blinkenlights.android.vanilla.PreferencesActivity$HeadsetLaunchFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
ch.blinkenlights.android.vanilla.PreferencesActivity$LibraryFragment -> ch.blinkenlights.android.vanilla.bk:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$MiscFragment -> ch.blinkenlights.android.vanilla.bl:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$NotificationsFragment -> ch.blinkenlights.android.vanilla.bm:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$PlaybackFragment -> ch.blinkenlights.android.vanilla.bn:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$ReplayGainFragment -> ch.blinkenlights.android.vanilla.bo:
    android.preference.CheckBoxPreference cbAlbumReplayGain -> ml
    android.preference.CheckBoxPreference cbTrackReplayGain -> mm
    ch.blinkenlights.android.vanilla.SeekBarPreference sbGainBump -> mn
    ch.blinkenlights.android.vanilla.SeekBarPreference sbUntaggedDebump -> mo
    void <init>() -> <init>
    void access$000(ch.blinkenlights.android.vanilla.PreferencesActivity$ReplayGainFragment) -> a
    void updateConfigWidgets() -> aV
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesActivity$ReplayGainFragment$1 -> ch.blinkenlights.android.vanilla.bp:
    ch.blinkenlights.android.vanilla.PreferencesActivity$ReplayGainFragment this$0 -> mp
    void <init>(ch.blinkenlights.android.vanilla.PreferencesActivity$ReplayGainFragment) -> <init>
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
ch.blinkenlights.android.vanilla.PreferencesActivity$ShakeFragment -> ch.blinkenlights.android.vanilla.bq:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
ch.blinkenlights.android.vanilla.PreferencesTheme -> ch.blinkenlights.android.vanilla.br:
    android.content.Context mContext -> mContext
    void <init>() -> <init>
    int[] decodeValue(java.lang.String) -> m
    android.graphics.drawable.Drawable generateThemePreview(int[]) -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
ch.blinkenlights.android.vanilla.QueryTask -> ch.blinkenlights.android.vanilla.bs:
    long data -> mq
    int mode -> mode
    java.lang.String[] projection -> projection
    java.lang.String selection -> selection
    java.lang.String[] selectionArgs -> selectionArgs
    java.lang.String sortOrder -> mr
    int type -> type
    android.net.Uri uri -> uri
    void <init>(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> <init>
    android.database.Cursor runQuery(android.content.ContentResolver) -> e
ch.blinkenlights.android.vanilla.R -> ch.blinkenlights.android.vanilla.bt:
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$array -> ch.blinkenlights.android.vanilla.R$array:
    int default_action_entries -> default_action_entries
    int default_action_entry_values -> default_action_entry_values
    int default_playlist_action_entries -> default_playlist_action_entries
    int default_playlist_action_entry_values -> default_playlist_action_entry_values
    int display_mode_entries -> display_mode_entries
    int entry_values -> entry_values
    int letter_tile_colors -> letter_tile_colors
    int notification_action_entries -> notification_action_entries
    int notification_mode_entries -> notification_mode_entries
    int swipe_action_entries -> swipe_action_entries
    int swipe_action_values -> swipe_action_values
    int theme_entries -> theme_entries
    int theme_styles -> theme_styles
    int theme_values -> theme_values
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$attr -> ch.blinkenlights.android.vanilla.R$attr:
    int click_remove_id -> click_remove_id
    int collapsed_height -> collapsed_height
    int controls_active -> controls_active
    int controls_normal -> controls_normal
    int drag_enabled -> drag_enabled
    int drag_handle_id -> drag_handle_id
    int drag_scroll_start -> drag_scroll_start
    int drag_start_mode -> drag_start_mode
    int drop_animation_duration -> drop_animation_duration
    int fling_handle_id -> fling_handle_id
    int float_alpha -> float_alpha
    int float_background_color -> float_background_color
    int float_color -> float_color
    int max_drag_scroll_speed -> max_drag_scroll_speed
    int now_playing_marker -> now_playing_marker
    int overlay_background_color -> overlay_background_color
    int overlay_foreground_color -> overlay_foreground_color
    int remove_animation_duration -> remove_animation_duration
    int remove_enabled -> remove_enabled
    int remove_mode -> remove_mode
    int sbpCheckBoxKey -> sbpCheckBoxKey
    int sbpCheckBoxText -> sbpCheckBoxText
    int sbpMaxValue -> sbpMaxValue
    int sbpSteps -> sbpSteps
    int sbpSummaryFormat -> sbpSummaryFormat
    int sbpSummaryText -> sbpSummaryText
    int sbpSummaryValueAddition -> sbpSummaryValueAddition
    int sbpSummaryValueMultiplication -> sbpSummaryValueMultiplication
    int sbpSummaryZeroText -> sbpSummaryZeroText
    int slide_shuffle_speed -> slide_shuffle_speed
    int slider_handle_id -> slider_handle_id
    int slider_slave_id -> slider_slave_id
    int sort_enabled -> sort_enabled
    int tabs_background -> tabs_background
    int track_drag_sort -> track_drag_sort
    int use_default_controller -> use_default_controller
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$color -> ch.blinkenlights.android.vanilla.R$color:
    int button_material_dark -> button_material_dark
    int button_material_light -> button_material_light
    int material_grey_300 -> material_grey_300
    int material_grey_400 -> material_grey_400
    int material_grey_500 -> material_grey_500
    int material_grey_600 -> material_grey_600
    int material_grey_900 -> material_grey_900
    int overlay_background_dark -> overlay_background_dark
    int overlay_background_light -> overlay_background_light
    int overlay_foreground_dark -> overlay_foreground_dark
    int overlay_foreground_light -> overlay_foreground_light
    int tab_text_selector -> tab_text_selector
    int tabs_active_indicator -> tabs_active_indicator
    int vanillaAccent -> vanillaAccent
    int vanillaPrimary -> vanillaPrimary
    int vanillaPrimaryDark -> vanillaPrimaryDark
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$dimen -> ch.blinkenlights.android.vanilla.R$dimen:
    int cover_padding -> cover_padding
    int cover_padding_with_pmark -> cover_padding_with_pmark
    int cover_size -> cover_size
    int divider_size -> divider_size
    int pmark_size -> pmark_size
    int row_normal_height -> row_normal_height
    int text_padding -> text_padding
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$drawable -> ch.blinkenlights.android.vanilla.R$drawable:
    int arrow -> arrow
    int btn_rating_star_off_mtrl_alpha -> btn_rating_star_off_mtrl_alpha
    int btn_rating_star_on_mtrl_alpha -> btn_rating_star_on_mtrl_alpha
    int empty -> empty
    int fallback_cover -> fallback_cover
    int folder -> folder
    int grabber -> grabber
    int hidden_next -> hidden_next
    int hidden_pause -> hidden_pause
    int hidden_play -> hidden_play
    int ic_disk -> ic_disk
    int ic_menu_add -> ic_menu_add
    int ic_menu_moreoverflow -> ic_menu_moreoverflow
    int ic_menu_moreoverflow_normal_holo_dark -> ic_menu_moreoverflow_normal_holo_dark
    int ic_menu_music_library -> ic_menu_music_library
    int ic_menu_preferences -> ic_menu_preferences
    int ic_menu_search -> ic_menu_search
    int ic_menu_search_holo -> ic_menu_search_holo
    int ic_menu_search_material -> ic_menu_search_material
    int ic_menu_sort_alphabetically -> ic_menu_sort_alphabetically
    int ic_microphone -> ic_microphone
    int ic_musicnote -> ic_musicnote
    int icon -> icon
    int inset_divider -> inset_divider
    int next -> next
    int notification_close -> notification_close
    int notification_close_dark -> notification_close_dark
    int pause -> pause
    int play -> play
    int preview_widget_d -> preview_widget_d
    int preview_widget_e -> preview_widget_e
    int preview_widget_four_long -> preview_widget_four_long
    int preview_widget_four_square -> preview_widget_four_square
    int preview_widget_four_white -> preview_widget_four_white
    int preview_widget_one_cell -> preview_widget_one_cell
    int previous -> previous
    int random_active -> random_active
    int repeat_active -> repeat_active
    int repeat_current_active -> repeat_current_active
    int repeat_inactive -> repeat_inactive
    int repeat_inactive_service -> repeat_inactive_service
    int shuffle_active -> shuffle_active
    int shuffle_album_active -> shuffle_album_active
    int shuffle_inactive -> shuffle_inactive
    int shuffle_inactive_service -> shuffle_inactive_service
    int status_icon -> status_icon
    int stop_current_active -> stop_current_active
    int unbound_ripple_light -> unbound_ripple_light
    int vinyl -> vinyl
    int widget_bg -> widget_bg
    int widget_next -> widget_next
    int widget_pause -> widget_pause
    int widget_play -> widget_play
    int widget_previous -> widget_previous
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$id -> ch.blinkenlights.android.vanilla.R$id:
    int album -> album
    int arrow -> arrow
    int artist -> artist
    int bottombar_controls -> bottombar_controls
    int buttons -> buttons
    int cancel -> cancel
    int check_box -> check_box
    int checkbox -> checkbox
    int clickRemove -> clickRemove
    int close -> close
    int composer -> composer
    int content -> content
    int content_controls -> content_controls
    int controls_top -> controls_top
    int cover -> cover
    int cover_view -> cover_view
    int create -> create
    int debug_label -> debug_label
    int delete -> delete
    int divider -> divider
    int done -> done
    int dragger -> dragger
    int duration -> duration
    int edit -> edit
    int elapsed -> elapsed
    int end_action -> end_action
    int enqueue -> enqueue
    int filepath -> filepath
    int flingRemove -> flingRemove
    int format -> format
    int frameLayout1 -> frameLayout1
    int genre -> genre
    int icon -> icon
    int info_table -> info_table
    int limiter_layout -> limiter_layout
    int limiter_scroller -> limiter_scroller
    int linearLayout1 -> linearLayout1
    int list -> list
    int next -> next
    int onDown -> onDown
    int onLongPress -> onLongPress
    int onMove -> onMove
    int pager -> pager
    int path -> path
    int path_display -> path_display
    int permission_request_button -> permission_request_button
    int permission_request_title -> permission_request_title
    int play -> play
    int play_pause -> play_pause
    int playlist_name -> playlist_name
    int pmark -> pmark
    int previous -> previous
    int progress_bar -> progress_bar
    int progress_label -> progress_label
    int queue -> queue
    int queue_pos -> queue_pos
    int queue_slider -> queue_slider
    int replaygain -> replaygain
    int restore_default -> restore_default
    int reverse_sort -> reverse_sort
    int save_button -> save_button
    int search_view -> search_view
    int seek_bar -> seek_bar
    int shuffle -> shuffle
    int sliding_tabs -> sliding_tabs
    int sliding_view -> sliding_view
    int start_button -> start_button
    int text -> text
    int text_layout -> text_layout
    int title -> title
    int track -> track
    int value -> value
    int vinyl -> vinyl
    int year -> year
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$layout -> ch.blinkenlights.android.vanilla.R$layout:
    int audiopicker -> audiopicker
    int bottombar_controls -> bottombar_controls
    int controls -> controls
    int controls_widget -> controls_widget
    int draggable_row -> draggable_row
    int filebrowser_content -> filebrowser_content
    int four_long_widget -> four_long_widget
    int four_square_widget -> four_square_widget
    int four_white_widget -> four_white_widget
    int full_playback -> full_playback
    int full_playback_alt -> full_playback_alt
    int library_content -> library_content
    int library_row_expandable -> library_row_expandable
    int listview -> listview
    int mini_playback -> mini_playback
    int new_playlist_dialog -> new_playlist_dialog
    int notification -> notification
    int notification_expanded -> notification_expanded
    int one_cell_widget -> one_cell_widget
    int permission_request -> permission_request
    int playlist_activity -> playlist_activity
    int playlist_buttons -> playlist_buttons
    int sdscanner_fragment -> sdscanner_fragment
    int seekbar_pref -> seekbar_pref
    int showqueue_listview -> showqueue_listview
    int sort_dialog -> sort_dialog
    int tab_order -> tab_order
    int widget_d -> widget_d
    int widget_e -> widget_e
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$plurals -> ch.blinkenlights.android.vanilla.R$plurals:
    int added_to_playlist -> added_to_playlist
    int deleted -> deleted
    int enqueued -> enqueued
    int hours -> hours
    int minutes -> minutes
    int playing -> playing
    int removed_from_playlist -> removed_from_playlist
    int seconds -> seconds
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$raw -> ch.blinkenlights.android.vanilla.R$raw:
    int beep -> beep
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$string -> ch.blinkenlights.android.vanilla.R$string:
    int _album -> _album
    int _artist -> _artist
    int _composer -> _composer
    int _format -> _format
    int _genre -> _genre
    int _path -> _path
    int _replaygain -> _replaygain
    int _title -> _title
    int _track -> _track
    int _year -> _year
    int about -> about
    int accelerometer_shake -> accelerometer_shake
    int add_to_favorites -> add_to_favorites
    int add_to_playlist -> add_to_playlist
    int album_track -> album_track
    int albums -> albums
    int all_songs -> all_songs
    int always_show -> always_show
    int app_name -> app_name
    int artist_album -> artist_album
    int artist_album_title -> artist_album_title
    int artist_album_track -> artist_album_track
    int artist_year -> artist_year
    int artists -> artists
    int ascending -> ascending
    int audio -> audio
    int autoplaylist_playcounts_disabled -> autoplaylist_playcounts_disabled
    int autoplaylist_playcounts_fmt -> autoplaylist_playcounts_fmt
    int autoplaylist_playcounts_name -> autoplaylist_playcounts_name
    int autoplaylist_playcounts_summary -> autoplaylist_playcounts_summary
    int autoplaylist_playcounts_title -> autoplaylist_playcounts_title
    int button_start -> button_start
    int cancel -> cancel
    int choose_playlist_name -> choose_playlist_name
    int clear_queue -> clear_queue
    int clear_search -> clear_search
    int close_notification -> close_notification
    int controls_in_selector_summary -> controls_in_selector_summary
    int controls_in_selector_title -> controls_in_selector_title
    int cover_art -> cover_art
    int cover_longpress_action_title -> cover_longpress_action_title
    int cover_on_lockscreen_summary -> cover_on_lockscreen_summary
    int cover_on_lockscreen_title -> cover_on_lockscreen_title
    int cover_press_action_title -> cover_press_action_title
    int coverloader_android_summary -> coverloader_android_summary
    int coverloader_android_title -> coverloader_android_title
    int coverloader_shadow_summary -> coverloader_shadow_summary
    int coverloader_shadow_title -> coverloader_shadow_title
    int coverloader_vanilla_summary -> coverloader_vanilla_summary
    int coverloader_vanilla_title -> coverloader_vanilla_title
    int create -> create
    int customize_filebrowser_start -> customize_filebrowser_start
    int customize_tab_order -> customize_tab_order
    int cycle_continuous_shuffling -> cycle_continuous_shuffling
    int cycle_continuous_shuffling_summary -> cycle_continuous_shuffling_summary
    int cycle_repeat_mode -> cycle_repeat_mode
    int cycle_shuffle_mode -> cycle_shuffle_mode
    int database_proc -> database_proc
    int date_added -> date_added
    int db_error_failure -> db_error_failure
    int db_error_recovered -> db_error_recovered
    int db_error_retrying -> db_error_retrying
    int db_label -> db_label
    int default_action_title -> default_action_title
    int default_playlist_action_title -> default_playlist_action_title
    int delete -> delete
    int delete_file -> delete_file
    int delete_file_failed -> delete_file_failed
    int delete_item -> delete_item
    int delete_playlist -> delete_playlist
    int delete_proc -> delete_proc
    int deleted -> deleted
    int deleted_item -> deleted_item
    int dequeue_rest -> dequeue_rest
    int descending -> descending
    int disable_cover_art_summary -> disable_cover_art_summary
    int disable_cover_art_title -> disable_cover_art_title
    int disable_lockscreen_summary -> disable_lockscreen_summary
    int disable_lockscreen_title -> disable_lockscreen_title
    int display_mode_title -> display_mode_title
    int do_nothing -> do_nothing
    int done -> done
    int double_tap_summary -> double_tap_summary
    int double_tap_title -> double_tap_title
    int edit -> edit
    int empty_queue -> empty_queue
    int empty_the_queue -> empty_the_queue
    int enable_shake_summary -> enable_shake_summary
    int enable_shake_title -> enable_shake_title
    int enqueue -> enqueue
    int enqueue_all -> enqueue_all
    int enqueue_as_next -> enqueue_as_next
    int enqueue_current_album -> enqueue_current_album
    int enqueue_current_artist -> enqueue_current_artist
    int enqueue_current_genre -> enqueue_current_genre
    int equalizer -> equalizer
    int expand -> expand
    int filebrowser_start -> filebrowser_start
    int files -> files
    int final_proc -> final_proc
    int finished_scanning -> finished_scanning
    int fixed_info -> fixed_info
    int genres -> genres
    int headset_launch_app_missing -> headset_launch_app_missing
    int headset_launch_summary -> headset_launch_summary
    int headset_launch_title -> headset_launch_title
    int headset_only_summary -> headset_only_summary
    int headset_only_title -> headset_only_title
    int headset_pause_summary -> headset_pause_summary
    int headset_pause_title -> headset_pause_title
    int headset_play_summary -> headset_play_summary
    int headset_play_title -> headset_play_title
    int hide_queue -> hide_queue
    int idle_timeout_title -> idle_timeout_title
    int ignore_audiofocus_loss_summary -> ignore_audiofocus_loss_summary
    int info_below_cover -> info_below_cover
    int info_on_cover -> info_on_cover
    int last_used_action -> last_used_action
    int library -> library
    int library_screen -> library_screen
    int media_button_beep_summary -> media_button_beep_summary
    int media_button_beep_title -> media_button_beep_title
    int media_button_summary -> media_button_summary
    int media_button_title -> media_button_title
    int media_scan -> media_scan
    int misc_features -> misc_features
    int more_from_album -> more_from_album
    int more_from_artist -> more_from_artist
    int name -> name
    int never_show -> never_show
    int new_playlist -> new_playlist
    int next_album -> next_album
    int next_song -> next_song
    int no_repeat -> no_repeat
    int no_shuffle -> no_shuffle
    int no_songs -> no_songs
    int none -> none
    int notification_action_title -> notification_action_title
    int notification_invert_color_summary -> notification_invert_color_summary
    int notification_invert_color_title -> notification_invert_color_title
    int notification_mode_title -> notification_mode_title
    int notification_nag -> notification_nag
    int notification_nag_summary -> notification_nag_summary
    int notification_title_paused -> notification_title_paused
    int notifications -> notifications
    int number_of_tracks -> number_of_tracks
    int open -> open
    int open_full_player -> open_full_player
    int open_library -> open_library
    int open_main_activity -> open_main_activity
    int open_mini_popup -> open_mini_popup
    int overwrite -> overwrite
    int permission_request_summary -> permission_request_summary
    int play -> play
    int play_all -> play_all
    int play_or_enqueue -> play_or_enqueue
    int play_pause -> play_pause
    int playback_on_startup_summary -> playback_on_startup_summary
    int playback_on_startup_title -> playback_on_startup_title
    int playback_screen -> playback_screen
    int playback_view -> playback_view
    int playlist_favorites -> playlist_favorites
    int playlists -> playlists
    int preferences_action_clear_queue -> preferences_action_clear_queue
    int preferences_action_enqueue_current_album -> preferences_action_enqueue_current_album
    int preferences_action_enqueue_current_artist -> preferences_action_enqueue_current_artist
    int preferences_action_enqueue_current_genre -> preferences_action_enqueue_current_genre
    int preferences_action_show_queue -> preferences_action_show_queue
    int previous_album -> previous_album
    int previous_song -> previous_song
    int progress_completed_label -> progress_completed_label
    int progress_database_label -> progress_database_label
    int progress_error_bad_path_label -> progress_error_bad_path_label
    int progress_filelist_label -> progress_filelist_label
    int progress_unstarted_label -> progress_unstarted_label
    int queue -> queue
    int queue_cleared -> queue_cleared
    int random -> random
    int random_enabling -> random_enabling
    int readahead -> readahead
    int readahead_summary -> readahead_summary
    int remove -> remove
    int remove_from_favorites -> remove_from_favorites
    int rename -> rename
    int repeat -> repeat
    int repeat_current_song -> repeat_current_song
    int replaygain -> replaygain
    int replaygain_album_summary -> replaygain_album_summary
    int replaygain_album_title -> replaygain_album_title
    int replaygain_bump_title -> replaygain_bump_title
    int replaygain_preamp_note_content -> replaygain_preamp_note_content
    int replaygain_preamp_note_title -> replaygain_preamp_note_title
    int replaygain_summary -> replaygain_summary
    int replaygain_track_summary -> replaygain_track_summary
    int replaygain_track_title -> replaygain_track_title
    int replaygain_untagged_debump_summary -> replaygain_untagged_debump_summary
    int replaygain_untagged_debump_title -> replaygain_untagged_debump_title
    int restore_default -> restore_default
    int reverse_sort -> reverse_sort
    int save_as_playlist -> save_as_playlist
    int scan_in_progress -> scan_in_progress
    int scrobble_summary -> scrobble_summary
    int scrobble_title -> scrobble_title
    int sdscan_help -> sdscan_help
    int sdscanner -> sdscanner
    int search -> search
    int seek_10s_backward -> seek_10s_backward
    int seek_10s_forward -> seek_10s_forward
    int select -> select
    int settings -> settings
    int shake_action_title -> shake_action_title
    int shake_threshold_title -> shake_threshold_title
    int show_queue -> show_queue
    int show_when_playing -> show_when_playing
    int shuffle_albums -> shuffle_albums
    int shuffle_songs -> shuffle_songs
    int shuffle_songs_continuously -> shuffle_songs_continuously
    int skip_to_next_song -> skip_to_next_song
    int skipping_folder_label -> skipping_folder_label
    int song_load_failed -> song_load_failed
    int song_playcount -> song_playcount
    int songs -> songs
    int sort_by -> sort_by
    int stock_broadcast_summary -> stock_broadcast_summary
    int stock_broadcast_title -> stock_broadcast_title
    int stop_current_song -> stop_current_song
    int swipe_down_action_title -> swipe_down_action_title
    int swipe_up_action_title -> swipe_up_action_title
    int tabs -> tabs
    int tap_to_scan -> tap_to_scan
    int theme -> theme
    int toggle_controls -> toggle_controls
    int unknown -> unknown
    int use_idle_timeout_summary -> use_idle_timeout_summary
    int use_idle_timeout_title -> use_idle_timeout_title
    int volume_during_ducking_summary -> volume_during_ducking_summary
    int volume_during_ducking_title -> volume_during_ducking_title
    int volume_title -> volume_title
    int year -> year
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$style -> ch.blinkenlights.android.vanilla.R$style:
    int BackActionBar -> BackActionBar
    int Dark_BackActionBar -> Dark_BackActionBar
    int Dark_Library -> Dark_Library
    int Dark_Playback -> Dark_Playback
    int Dark_PopupDialog -> Dark_PopupDialog
    int Dark_VanillaBase -> Dark_VanillaBase
    int Greyish_BackActionBar -> Greyish_BackActionBar
    int Greyish_Dark_BackActionBar -> Greyish_Dark_BackActionBar
    int Greyish_Dark_Library -> Greyish_Dark_Library
    int Greyish_Dark_Playback -> Greyish_Dark_Playback
    int Greyish_Dark_PopupDialog -> Greyish_Dark_PopupDialog
    int Greyish_Dark_VanillaBase -> Greyish_Dark_VanillaBase
    int Greyish_Library -> Greyish_Library
    int Greyish_Playback -> Greyish_Playback
    int Greyish_PopupDialog -> Greyish_PopupDialog
    int Greyish_VanillaBase -> Greyish_VanillaBase
    int Library -> Library
    int Orange_BackActionBar -> Orange_BackActionBar
    int Orange_Dark_BackActionBar -> Orange_Dark_BackActionBar
    int Orange_Dark_Library -> Orange_Dark_Library
    int Orange_Dark_Playback -> Orange_Dark_Playback
    int Orange_Dark_PopupDialog -> Orange_Dark_PopupDialog
    int Orange_Dark_VanillaBase -> Orange_Dark_VanillaBase
    int Orange_Library -> Orange_Library
    int Orange_Playback -> Orange_Playback
    int Orange_PopupDialog -> Orange_PopupDialog
    int Orange_VanillaBase -> Orange_VanillaBase
    int Playback -> Playback
    int PopupDialog -> PopupDialog
    int Universal_PlaybackActionBar -> Universal_PlaybackActionBar
    int VanillaBase -> VanillaBase
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$styleable -> ch.blinkenlights.android.vanilla.R$styleable:
    int[] DragSortListView -> DragSortListView
    int DragSortListView_click_remove_id -> DragSortListView_click_remove_id
    int DragSortListView_collapsed_height -> DragSortListView_collapsed_height
    int DragSortListView_drag_enabled -> DragSortListView_drag_enabled
    int DragSortListView_drag_handle_id -> DragSortListView_drag_handle_id
    int DragSortListView_drag_scroll_start -> DragSortListView_drag_scroll_start
    int DragSortListView_drag_start_mode -> DragSortListView_drag_start_mode
    int DragSortListView_drop_animation_duration -> DragSortListView_drop_animation_duration
    int DragSortListView_fling_handle_id -> DragSortListView_fling_handle_id
    int DragSortListView_float_alpha -> DragSortListView_float_alpha
    int DragSortListView_float_background_color -> DragSortListView_float_background_color
    int DragSortListView_max_drag_scroll_speed -> DragSortListView_max_drag_scroll_speed
    int DragSortListView_remove_animation_duration -> DragSortListView_remove_animation_duration
    int DragSortListView_remove_enabled -> DragSortListView_remove_enabled
    int DragSortListView_remove_mode -> DragSortListView_remove_mode
    int DragSortListView_slide_shuffle_speed -> DragSortListView_slide_shuffle_speed
    int DragSortListView_sort_enabled -> DragSortListView_sort_enabled
    int DragSortListView_track_drag_sort -> DragSortListView_track_drag_sort
    int DragSortListView_use_default_controller -> DragSortListView_use_default_controller
    int[] SeekBarPreference -> SeekBarPreference
    int SeekBarPreference_sbpCheckBoxKey -> SeekBarPreference_sbpCheckBoxKey
    int SeekBarPreference_sbpCheckBoxText -> SeekBarPreference_sbpCheckBoxText
    int SeekBarPreference_sbpMaxValue -> SeekBarPreference_sbpMaxValue
    int SeekBarPreference_sbpSteps -> SeekBarPreference_sbpSteps
    int SeekBarPreference_sbpSummaryFormat -> SeekBarPreference_sbpSummaryFormat
    int SeekBarPreference_sbpSummaryText -> SeekBarPreference_sbpSummaryText
    int SeekBarPreference_sbpSummaryValueAddition -> SeekBarPreference_sbpSummaryValueAddition
    int SeekBarPreference_sbpSummaryValueMultiplication -> SeekBarPreference_sbpSummaryValueMultiplication
    int SeekBarPreference_sbpSummaryZeroText -> SeekBarPreference_sbpSummaryZeroText
    int[] SlidingViewPreferences -> SlidingViewPreferences
    int SlidingViewPreferences_slider_handle_id -> SlidingViewPreferences_slider_handle_id
    int SlidingViewPreferences_slider_slave_id -> SlidingViewPreferences_slider_slave_id
    void <clinit>() -> <clinit>
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.R$xml -> ch.blinkenlights.android.vanilla.R$xml:
    int four_long_widget -> four_long_widget
    int four_square_widget -> four_square_widget
    int four_white_widget -> four_white_widget
    int one_cell_widget -> one_cell_widget
    int preference_audio -> preference_audio
    int preference_coverart -> preference_coverart
    int preference_headers -> preference_headers
    int preference_library -> preference_library
    int preference_misc -> preference_misc
    int preference_notifications -> preference_notifications
    int preference_playback -> preference_playback
    int preference_replaygain -> preference_replaygain
    int preference_shake -> preference_shake
    int widget_d -> widget_d
    int widget_e -> widget_e
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.ReadaheadThread -> ch.blinkenlights.android.vanilla.bu:
    int BYTES_PER_READ -> ms
    int MSG_READ_CHUNK -> mt
    int MSG_SET_PATH -> mu
    int MS_DELAY_PER_READ -> mv
    java.io.FileInputStream mFis -> mw
    android.os.Handler mHandler -> mHandler
    java.lang.String mPath -> dT
    byte[] mScratch -> mx
    void <init>() -> <init>
    boolean handleMessage(android.os.Message) -> handleMessage
    void pause() -> pause
    void setSource(java.lang.String) -> n
ch.blinkenlights.android.vanilla.RemoteControl -> ch.blinkenlights.android.vanilla.bv:
    void <init>() -> <init>
    ch.blinkenlights.android.vanilla.RemoteControl$Client getClient(android.content.Context) -> k
ch.blinkenlights.android.vanilla.RemoteControl$Client -> ch.blinkenlights.android.vanilla.bw:
    void initializeRemote() -> aW
    void reloadPreference() -> aX
    void unregisterRemote() -> aY
    void updateRemote(ch.blinkenlights.android.vanilla.Song,int,boolean) -> a
ch.blinkenlights.android.vanilla.RemoteControlImplICS -> ch.blinkenlights.android.vanilla.bx:
    android.content.Context mContext -> mContext
    android.media.RemoteControlClient mRemote -> my
    int mShowCover -> mz
    void <init>(android.content.Context) -> <init>
    void initializeRemote() -> aW
    void reloadPreference() -> aX
    void unregisterRemote() -> aY
    void updateRemote(ch.blinkenlights.android.vanilla.Song,int,boolean) -> a
ch.blinkenlights.android.vanilla.RemoteControlImplLp -> ch.blinkenlights.android.vanilla.by:
    android.content.Context mContext -> mContext
    android.media.session.MediaSession mMediaSession -> mA
    int mShowCover -> mz
    void <init>(android.content.Context) -> <init>
    android.content.Context access$000(ch.blinkenlights.android.vanilla.RemoteControlImplLp) -> a
    void initializeRemote() -> aW
    void reloadPreference() -> aX
    void unregisterRemote() -> aY
    void updateRemote(ch.blinkenlights.android.vanilla.Song,int,boolean) -> a
ch.blinkenlights.android.vanilla.RemoteControlImplLp$1 -> ch.blinkenlights.android.vanilla.bz:
    ch.blinkenlights.android.vanilla.RemoteControlImplLp this$0 -> mB
    void <init>(ch.blinkenlights.android.vanilla.RemoteControlImplLp) -> <init>
    void onPause() -> onPause
    void onPlay() -> onPlay
    void onSkipToNext() -> onSkipToNext
    void onSkipToPrevious() -> onSkipToPrevious
ch.blinkenlights.android.vanilla.SDScannerFragment -> ch.blinkenlights.android.vanilla.ca:
    com.gmail.jerickson314.sdscanner.ScanFragment mScanFragment -> mC
    java.io.File[] mScanTargetStages -> mD
    void <init>() -> <init>
    android.view.View findViewById(int) -> findViewById
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onDestroy() -> onDestroy
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    void signalFinished() -> aZ
    void startButtonPressed(android.view.View) -> j
    void updateDebugMessages(com.gmail.jerickson314.sdscanner.UIStringGenerator) -> a
    void updatePath(java.lang.String) -> o
    void updateProgressNum(int) -> M
    void updateProgressText(com.gmail.jerickson314.sdscanner.UIStringGenerator) -> b
    void updateStartButtonEnabled(boolean) -> l
ch.blinkenlights.android.vanilla.SDScannerFragment$1 -> ch.blinkenlights.android.vanilla.cb:
    ch.blinkenlights.android.vanilla.SDScannerFragment this$0 -> mE
    void <init>(ch.blinkenlights.android.vanilla.SDScannerFragment) -> <init>
    void onClick(android.view.View) -> onClick
ch.blinkenlights.android.vanilla.SeekBarPreference -> ch.blinkenlights.android.vanilla.cc:
    android.widget.CheckBox mCheckBox -> mF
    java.lang.String mCheckBoxKey -> mG
    java.lang.String mCheckBoxText -> mH
    android.content.Context mContext -> mContext
    int mInitialValue -> mI
    int mMaxValue -> mJ
    int mSteps -> mK
    java.lang.String mSummaryFormat -> mL
    java.lang.String mSummaryText -> mM
    float mSummaryValueAddition -> mN
    float mSummaryValueMultiplication -> mO
    int mValue -> ei
    android.widget.TextView mValueText -> ej
    java.lang.String mZeroText -> mP
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    boolean getCheckBoxPreference() -> ba
    java.lang.String getSummary(int) -> N
    void initDefaults(android.util.AttributeSet) -> a
    void saveCheckBoxPreference(boolean) -> m
    void setValue(int) -> setValue
    java.lang.CharSequence getSummary() -> getSummary
    android.view.View onCreateDialogView() -> onCreateDialogView
    void onDialogClosed(boolean) -> onDialogClosed
    java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int) -> onGetDefaultValue
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
ch.blinkenlights.android.vanilla.ShowQueueAdapter -> ch.blinkenlights.android.vanilla.cd:
    android.content.Context mContext -> mContext
    int mHighlightRow -> mQ
    int mResource -> mR
    void <init>(android.content.Context,int) -> <init>
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void highlightRow(int) -> O
ch.blinkenlights.android.vanilla.ShowQueueFragment -> ch.blinkenlights.android.vanilla.ce:
    int CTX_MENU_ENQUEUE_ALBUM -> mS
    int CTX_MENU_ENQUEUE_ARTIST -> mT
    int CTX_MENU_ENQUEUE_GENRE -> mU
    int CTX_MENU_PLAY -> eK
    int CTX_MENU_REMOVE -> mV
    ch.blinkenlights.android.vanilla.ShowQueueAdapter mListAdapter -> mW
    com.mobeta.android.dslv.DragSortListView mListView -> kx
    ch.blinkenlights.android.vanilla.PlaybackService mService -> mX
    void <init>() -> <init>
    ch.blinkenlights.android.vanilla.PlaybackService access$000(ch.blinkenlights.android.vanilla.ShowQueueFragment) -> a
    ch.blinkenlights.android.vanilla.ShowQueueAdapter access$100(ch.blinkenlights.android.vanilla.ShowQueueFragment) -> b
    void access$200(ch.blinkenlights.android.vanilla.ShowQueueFragment,int) -> a
    void scrollToCurrentSong(int) -> P
    void drop(int,int) -> h
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onDestroyView() -> onDestroyView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onMediaChange() -> K
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void onPositionInfoChanged() -> F
    void onResume() -> onResume
    void onTimelineChanged() -> af
    void recreate() -> recreate
    void refreshSongQueueList(boolean) -> n
    void remove(int) -> remove
    void replaceSong(int,ch.blinkenlights.android.vanilla.Song) -> b
    void setSong(long,ch.blinkenlights.android.vanilla.Song) -> a
    void setState(long,int) -> a
ch.blinkenlights.android.vanilla.ShowQueueFragment$1 -> ch.blinkenlights.android.vanilla.cf:
    ch.blinkenlights.android.vanilla.ShowQueueFragment this$0 -> mY
    boolean val$scroll -> mZ
    void <init>(ch.blinkenlights.android.vanilla.ShowQueueFragment,boolean) -> <init>
    void run() -> run
ch.blinkenlights.android.vanilla.SlidingPlaybackActivity -> ch.blinkenlights.android.vanilla.SlidingPlaybackActivity:
    int CTX_MENU_ADD_TO_PLAYLIST -> na
    int MSG_SEEK_TO_PROGRESS -> nb
    int MSG_UPDATE_PROGRESS -> nc
    long mDuration -> nd
    android.widget.TextView mDurationView -> ne
    android.widget.TextView mElapsedView -> nf
    android.view.Menu mMenu -> ng
    boolean mPaused -> nh
    android.widget.SeekBar mSeekBar -> ni
    boolean mSeekBarTracking -> nj
    ch.blinkenlights.android.vanilla.SlidingView mSlidingView -> nk
    java.lang.StringBuilder mTimeBuilder -> nl
    void <init>() -> <init>
    void setDuration(long) -> setDuration
    void updateElapsedTime() -> bb
    void adjustSpines() -> bc
    void appendToPlaylistFromIntent(android.content.Intent) -> i
    void bindControlButtons() -> al
    ch.blinkenlights.android.vanilla.QueryTask buildQueryFromIntent(android.content.Intent,boolean,ch.blinkenlights.android.vanilla.MediaAdapter) -> a
    void createNewPlaylistFromIntent(android.content.Intent) -> j
    boolean handleMessage(android.os.Message) -> handleMessage
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPause() -> onPause
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onResume() -> onResume
    void onSlideFullyExpanded(boolean) -> i
    void onSongChange(ch.blinkenlights.android.vanilla.Song) -> a
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStateChange(int,int) -> d
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
ch.blinkenlights.android.vanilla.SlidingView -> ch.blinkenlights.android.vanilla.SlidingView:
    int ANIMATION_DURATION -> nm
    float MAX_PROGRESS -> nn
    ch.blinkenlights.android.vanilla.SlidingView$Callback mCallback -> no
    int mCurrentStage -> np
    boolean mDelayedHide -> nq
    android.view.GestureDetector mDetector -> nr
    boolean mDidScroll -> ns
    float mFlingVelocity -> nt
    float mMaxOffsetY -> nu
    float mPreviousY -> nv
    float mProgressPx -> nw
    android.view.View mSlaveView -> nx
    int mSliderHandleId -> ny
    java.util.ArrayList mStages -> nz
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    float access$002(ch.blinkenlights.android.vanilla.SlidingView,float) -> a
    void access$100(ch.blinkenlights.android.vanilla.SlidingView,int) -> a
    ch.blinkenlights.android.vanilla.SlidingView$Callback access$200(ch.blinkenlights.android.vanilla.SlidingView) -> a
    void setExpansionStage(int) -> setExpansionStage
    void setSlaveViewStage(int) -> setSlaveViewStage
    void expandSlide() -> bd
    void hideSlide() -> be
    void hideSlideDelayed() -> bf
    boolean isExpanded() -> bg
    boolean isHidden() -> isHidden
    void onFinishInflate() -> onFinishInflate
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
    void setCallback(ch.blinkenlights.android.vanilla.SlidingView$Callback) -> setCallback
ch.blinkenlights.android.vanilla.SlidingView$AnimationListener -> ch.blinkenlights.android.vanilla.cg:
    ch.blinkenlights.android.vanilla.SlidingView this$0 -> nA
    void <init>(ch.blinkenlights.android.vanilla.SlidingView) -> <init>
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
ch.blinkenlights.android.vanilla.SlidingView$Callback -> ch.blinkenlights.android.vanilla.ch:
    void onSlideFullyExpanded(boolean) -> i
ch.blinkenlights.android.vanilla.SlidingView$GestureListener -> ch.blinkenlights.android.vanilla.ci:
    ch.blinkenlights.android.vanilla.SlidingView this$0 -> nA
    void <init>(ch.blinkenlights.android.vanilla.SlidingView) -> <init>
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
ch.blinkenlights.android.vanilla.Song -> ch.blinkenlights.android.vanilla.cj:
    java.lang.String[] EMPTY_PLAYLIST_PROJECTION -> nB
    java.lang.String[] EMPTY_PROJECTION -> nC
    java.lang.String[] FILLED_PLAYLIST_PROJECTION -> nD
    java.lang.String[] FILLED_PROJECTION -> nE
    int FLAG_COUNT -> nF
    int FLAG_NO_COVER -> nG
    int FLAG_RANDOM -> nH
    ch.blinkenlights.android.vanilla.CoverCache sCoverCache -> nI
    java.lang.String album -> nJ
    long albumId -> nK
    java.lang.String artist -> nL
    long artistId -> nM
    long duration -> nN
    int flags -> flags
    long id -> id
    java.lang.String path -> nO
    java.lang.String title -> es
    int trackNumber -> nP
    void <clinit>() -> <clinit>
    void <init>(long) -> <init>
    void <init>(long,int) -> <init>
    android.graphics.Bitmap getCoverInternal(android.content.Context,int) -> a
    long getId(ch.blinkenlights.android.vanilla.Song) -> e
    int compareTo(ch.blinkenlights.android.vanilla.Song) -> f
    int compareTo(java.lang.Object) -> compareTo
    android.graphics.Bitmap getCover(android.content.Context) -> l
    android.graphics.Bitmap getSmallCover(android.content.Context) -> m
    boolean isFilled() -> bh
    boolean isRandom() -> bi
    void populate(android.database.Cursor) -> a
    java.lang.String toString() -> toString
ch.blinkenlights.android.vanilla.SongTimeline -> ch.blinkenlights.android.vanilla.ck:
    int[] FINISH_ICONS -> gG
    int FINISH_RANDOM -> nQ
    int FINISH_REPEAT -> nR
    int FINISH_REPEAT_CURRENT -> nS
    int FINISH_STOP -> nT
    int FINISH_STOP_CURRENT -> nU
    int MODE_ENQUEUE -> nV
    int MODE_ENQUEUE_AS_NEXT -> nW
    int MODE_ENQUEUE_ID_FIRST -> nX
    int MODE_ENQUEUE_POS_FIRST -> nY
    int MODE_FLUSH_AND_PLAY_NEXT -> nZ
    int MODE_PLAY -> oa
    int MODE_PLAY_ID_FIRST -> ob
    int MODE_PLAY_POS_FIRST -> oc
    int SHIFT_KEEP_SONG -> od
    int SHIFT_NEXT_ALBUM -> oe
    int SHIFT_NEXT_SONG -> of
    int SHIFT_PREVIOUS_ALBUM -> og
    int SHIFT_PREVIOUS_SONG -> oh
    int SHUFFLE_ALBUMS -> oi
    int[] SHUFFLE_ICONS -> gT
    int SHUFFLE_NONE -> oj
    int SHUFFLE_SONGS -> ok
    ch.blinkenlights.android.vanilla.SongTimeline$Callback mCallback -> ol
    android.content.Context mContext -> mContext
    int mCurrentPos -> om
    int mFinishAction -> on
    ch.blinkenlights.android.vanilla.Song mSavedCurrent -> oo
    ch.blinkenlights.android.vanilla.Song mSavedNext -> op
    int mSavedPos -> oq
    ch.blinkenlights.android.vanilla.Song mSavedPrevious -> or
    int mSavedSize -> os
    java.util.ArrayList mShuffleCache -> ot
    int mShuffleMode -> ou
    int mShuffleTicket -> ov
    java.util.ArrayList mSongs -> ow
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void broadcastChangedSongs() -> bj
    void changed() -> bk
    java.util.ArrayList getShuffledTimeline(boolean) -> o
    void reshuffleTimeline() -> bl
    void saveActiveSongs() -> bm
    void shiftCurrentSongInternal(int) -> Q
    void shrinkQueue(int) -> R
    int addSongs(android.content.Context,ch.blinkenlights.android.vanilla.QueryTask) -> a
    void clearQueue() -> aF
    void emptyQueue() -> aI
    int getFinishAction() -> bn
    int getLength() -> getLength
    int getPosition() -> getPosition
    int getShuffleMode() -> bo
    ch.blinkenlights.android.vanilla.Song getSong(int) -> B
    ch.blinkenlights.android.vanilla.Song getSongByQueuePosition(int) -> C
    boolean isEndOfQueue() -> bp
    void moveSongPosition(int,int) -> g
    void readState(java.io.DataInputStream) -> a
    void removeSong(long) -> e
    void removeSongPosition(int) -> E
    void setCallback(ch.blinkenlights.android.vanilla.SongTimeline$Callback) -> a
    ch.blinkenlights.android.vanilla.Song setCurrentQueuePosition(int) -> S
    void setFinishAction(int) -> T
    void setShuffleMode(int) -> U
    ch.blinkenlights.android.vanilla.Song shiftCurrentSong(int) -> K
    void writeState(java.io.DataOutputStream) -> a
ch.blinkenlights.android.vanilla.SongTimeline$Callback -> ch.blinkenlights.android.vanilla.cl:
    void activeSongReplaced(int,ch.blinkenlights.android.vanilla.Song) -> c
    void positionInfoChanged() -> aR
    void timelineChanged() -> aT
ch.blinkenlights.android.vanilla.SongTimeline$FlagComparator -> ch.blinkenlights.android.vanilla.cm:
    void <init>() -> <init>
    int compare(ch.blinkenlights.android.vanilla.Song,ch.blinkenlights.android.vanilla.Song) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ch.blinkenlights.android.vanilla.SongTimeline$IdComparator -> ch.blinkenlights.android.vanilla.cn:
    void <init>() -> <init>
    int compare(ch.blinkenlights.android.vanilla.Song,ch.blinkenlights.android.vanilla.Song) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ch.blinkenlights.android.vanilla.TabOrderActivity -> ch.blinkenlights.android.vanilla.TabOrderActivity:
    ch.blinkenlights.android.vanilla.TabOrderAdapter mAdapter -> ox
    com.mobeta.android.dslv.DragSortListView mList -> oy
    void <init>() -> <init>
    void drop(int,int) -> h
    void load() -> bq
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void restoreDefault() -> br
    void save() -> save
ch.blinkenlights.android.vanilla.TabOrderAdapter -> ch.blinkenlights.android.vanilla.co:
    ch.blinkenlights.android.vanilla.TabOrderActivity mActivity -> oz
    android.view.LayoutInflater mInflater -> dh
    int[] mTabIds -> oA
    void <init>(ch.blinkenlights.android.vanilla.TabOrderActivity) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int[] getTabIds() -> bs
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean hasStableIds() -> hasStableIds
    void setTabIds(int[]) -> c
ch.blinkenlights.android.vanilla.ThemeHelper -> ch.blinkenlights.android.vanilla.cp:
    void <init>() -> <init>
    int[] getDefaultCoverColors(android.content.Context) -> n
    int getPlayButtonResource(boolean) -> p
    int getSelectedTheme(android.content.Context) -> o
    int setTheme(android.content.Context,int) -> b
    boolean usesDarkTheme(android.content.Context) -> p
    boolean usesHoloTheme() -> bt
ch.blinkenlights.android.vanilla.TimelineCallback -> ch.blinkenlights.android.vanilla.cq:
    void onMediaChange() -> K
    void onPositionInfoChanged() -> F
    void onTimelineChanged() -> af
    void recreate() -> recreate
    void replaceSong(int,ch.blinkenlights.android.vanilla.Song) -> b
    void setSong(long,ch.blinkenlights.android.vanilla.Song) -> a
    void setState(long,int) -> a
ch.blinkenlights.android.vanilla.TimestampedObject -> ch.blinkenlights.android.vanilla.cr:
    java.lang.Object object -> aY
    long uptime -> oB
    void <init>(java.lang.Object) -> <init>
ch.blinkenlights.android.vanilla.VanillaImageButton -> ch.blinkenlights.android.vanilla.VanillaImageButton:
    int mActiveTint -> oC
    int mNormalTint -> oD
    android.content.Context mContext -> mContext
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    int fetchAttrColor(int) -> V
    void updateImageTint(int) -> W
    void setImageResource(int) -> setImageResource
ch.blinkenlights.android.vanilla.VanillaMediaPlayer -> ch.blinkenlights.android.vanilla.cs:
    android.content.Context mContext -> mContext
    java.lang.String mDataSource -> oE
    float mDuckingFactor -> oF
    boolean mHasNextMediaPlayer -> oG
    boolean mIsDucking -> oH
    float mReplayGain -> oI
    void <init>(android.content.Context) -> <init>
    void updateVolume() -> bu
    void closeAudioFx() -> bv
    java.lang.String getDataSource() -> bw
    boolean hasNextMediaPlayer() -> bx
    void openAudioFx() -> by
    void release() -> release
    void reset() -> reset
    void setDataSource(java.lang.String) -> setDataSource
    void setDuckingFactor(float) -> d
    void setIsDucking(boolean) -> q
    void setNextMediaPlayer(ch.blinkenlights.android.vanilla.VanillaMediaPlayer) -> b
    void setReplayGain(float) -> e
ch.blinkenlights.android.vanilla.ViewHolder -> ch.blinkenlights.android.vanilla.ct:
    android.widget.ImageView arrow -> oJ
    ch.blinkenlights.android.vanilla.LazyCoverView cover -> oK
    android.view.View divider -> oL
    long id -> id
    android.widget.TextView text -> oM
    java.lang.String title -> es
    void <init>() -> <init>
ch.blinkenlights.android.vanilla.WidgetD -> ch.blinkenlights.android.vanilla.WidgetD:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.android.vanilla.WidgetE -> ch.blinkenlights.android.vanilla.WidgetE:
    boolean sEnabled -> ds
    void <init>() -> <init>
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,ch.blinkenlights.android.vanilla.Song,int) -> a
    void onDisabled(android.content.Context) -> onDisabled
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
ch.blinkenlights.bastp.Bastp -> wy.a:
    void <init>() -> <init>
    void inheritTag(java.lang.String,java.util.HashMap,java.util.HashMap) -> a
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
    java.util.HashMap getTags(java.lang.String) -> p
ch.blinkenlights.bastp.Common -> wy.b:
    long MAX_PKT_SIZE -> oN
    void <init>() -> <init>
    void addTagEntry(java.util.HashMap,java.lang.String,java.lang.String) -> a
    int b2be32(byte[],int) -> a
    int b2le16(byte[],int) -> b
    int b2le32(byte[],int) -> c
    int b2u(byte) -> a
    void debug(java.lang.String) -> q
    java.util.HashMap parse_vorbis_comment(java.io.RandomAccessFile,long,long) -> a
    int swap32(int) -> X
    void xdie(java.lang.String) -> r
ch.blinkenlights.bastp.FlacFile -> wy.c:
    int FLAC_TYPE_COMMENT -> oO
    int FLAC_TYPE_STREAMINFO -> oP
    void <init>() -> <init>
    int[] parse_metadata_block(java.io.RandomAccessFile,long) -> a
    java.util.HashMap parse_streaminfo_block(java.io.RandomAccessFile,long,long) -> b
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
ch.blinkenlights.bastp.ID3v2File -> wy.d:
    int ID3_ENC_LATIN -> oQ
    int ID3_ENC_UTF16BE -> oR
    int ID3_ENC_UTF16LE -> oS
    int ID3_ENC_UTF8 -> oT
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String getDecodedString(byte[]) -> a
    java.lang.String[] normalizeTaginfo(java.lang.String,byte[]) -> a
    int unsyncsafe(int) -> Y
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
    java.util.HashMap parse_v3_frames(java.io.RandomAccessFile,long,int) -> a
ch.blinkenlights.bastp.LameHeader -> wy.e:
    int[][] sampleRates -> oU
    int[][] samplesPerFrame -> oV
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
    java.util.HashMap parseLameHeader(java.io.RandomAccessFile,long) -> b
ch.blinkenlights.bastp.OggFile -> wy.f:
    int OGG_PAGE_SIZE -> oW
    int OGG_TYPE_COMMENT -> oX
    int OGG_TYPE_IDENTIFICATION -> oY
    void <init>() -> <init>
    java.util.HashMap parse_ogg_vorbis_comment(java.io.RandomAccessFile,long,long) -> c
    java.util.HashMap parse_ogg_vorbis_identification(java.io.RandomAccessFile,long,long) -> d
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
    long[] parse_ogg_page(java.io.RandomAccessFile,long) -> c
ch.blinkenlights.bastp.OpusFile -> wy.g:
    java.lang.String[] FORBIDDEN_TAGS -> oZ
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void calculate_gain(java.util.HashMap,java.util.HashMap) -> a
    java.util.HashMap parse_opus_head(java.io.RandomAccessFile,long,long) -> e
    java.util.HashMap parse_opus_vorbis_comment(java.io.RandomAccessFile,long,long) -> f
    java.util.HashMap getTags(java.io.RandomAccessFile) -> a
com.gmail.jerickson314.sdscanner.ScanFragment -> wy.h:
    int DB_RETRIES -> pa
    java.lang.String[] MEDIA_PROJECTION -> pb
    java.lang.String[] STAR -> pc
    android.content.Context mApplicationContext -> pd
    com.gmail.jerickson314.sdscanner.ScanFragment$ScanProgressCallbacks mCallbacks -> pe
    com.gmail.jerickson314.sdscanner.UIStringGenerator mDebugMessages -> pf
    java.util.ArrayList mDirectoryScanList -> pg
    java.util.TreeSet mFilesToProcess -> ph
    android.os.Handler mHandler -> mHandler
    boolean mHasStarted -> pi
    int mLastGoodProcessedIndex -> pj
    java.util.ArrayList mPathNames -> pk
    int mProgressNum -> pl
    com.gmail.jerickson314.sdscanner.UIStringGenerator mProgressText -> pm
    boolean mStartButtonEnabled -> pn
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.os.Handler access$000(com.gmail.jerickson314.sdscanner.ScanFragment) -> a
    java.lang.String[] access$100() -> bz
    void access$200(com.gmail.jerickson314.sdscanner.ScanFragment,int,java.lang.String) -> a
    void access$300(com.gmail.jerickson314.sdscanner.ScanFragment,int) -> a
    void access$400(com.gmail.jerickson314.sdscanner.ScanFragment,int) -> b
    void access$500(com.gmail.jerickson314.sdscanner.ScanFragment,int,java.lang.String) -> b
    void addDebugMessage(int,java.lang.String) -> c
    void addDebugMessage(java.lang.String) -> s
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate databaseUpdate(java.lang.String,int) -> b
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate debugUpdate(int) -> Z
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate debugUpdate(int,java.lang.String) -> d
    void resetDebugMessages() -> bA
    void signalFinished() -> aZ
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate stateUpdate(int) -> aa
    void updateProgressNum(int) -> M
    void updateProgressText(int) -> ab
    void updateProgressText(int,java.lang.String) -> e
    void updateProgressText(com.gmail.jerickson314.sdscanner.UIStringGenerator) -> b
    void updateStartButtonEnabled(boolean) -> l
    void advanceScanner() -> bB
    com.gmail.jerickson314.sdscanner.UIStringGenerator getDebugMessages() -> bC
    boolean getHasStarted() -> bD
    int getProgressNum() -> bE
    com.gmail.jerickson314.sdscanner.UIStringGenerator getProgressText() -> bF
    boolean getStartButtonEnabled() -> bG
    void listPathNamesOnDebug() -> bH
    void onAttach(android.app.Activity) -> onAttach
    void onCreate(android.os.Bundle) -> onCreate
    void setScanProgressCallbacks(com.gmail.jerickson314.sdscanner.ScanFragment$ScanProgressCallbacks) -> a
    void startMediaScanner() -> bI
    void startScan(java.io.File,boolean) -> a
    void startScan(java.io.File[]) -> a
com.gmail.jerickson314.sdscanner.ScanFragment$1 -> wy.i:
    com.gmail.jerickson314.sdscanner.ScanFragment this$0 -> po
    void <init>(com.gmail.jerickson314.sdscanner.ScanFragment) -> <init>
    void onScanCompleted(java.lang.String,android.net.Uri) -> onScanCompleted
com.gmail.jerickson314.sdscanner.ScanFragment$2 -> wy.j:
    int[] $SwitchMap$com$gmail$jerickson314$sdscanner$ScanFragment$ProgressUpdate$Type -> pp
    void <clinit>() -> <clinit>
com.gmail.jerickson314.sdscanner.ScanFragment$PreprocessTask -> wy.k:
    com.gmail.jerickson314.sdscanner.ScanFragment this$0 -> po
    void <init>(com.gmail.jerickson314.sdscanner.ScanFragment) -> <init>
    void recursiveAddFiles(java.io.File,com.gmail.jerickson314.sdscanner.ScanFragment$ScanParameters) -> a
    void dbOneTry(com.gmail.jerickson314.sdscanner.ScanFragment$ScanParameters) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    java.lang.Void doInBackground(com.gmail.jerickson314.sdscanner.ScanFragment$ScanParameters[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPostExecute(java.lang.Void) -> a
    void onProgressUpdate(com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate[]) -> a
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate -> wy.l:
    int mProgress -> pq
    int mResId -> pr
    java.lang.String mString -> ps
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type mType -> pt
    void <init>(com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type,int,java.lang.String,int) -> <init>
    int getProgress() -> getProgress
    int getResId() -> bJ
    java.lang.String getString() -> getString
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type getType() -> bK
com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type -> wy.m:
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type[] $VALUES -> pu
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type DATABASE -> pv
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type DEBUG -> pw
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type STATE -> px
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type valueOf(java.lang.String) -> valueOf
    com.gmail.jerickson314.sdscanner.ScanFragment$ProgressUpdate$Type[] values() -> values
com.gmail.jerickson314.sdscanner.ScanFragment$ScanParameters -> wy.n:
    java.io.File mPath -> py
    boolean mRestrictDbUpdate -> pz
    void <init>(java.io.File,boolean) -> <init>
    java.io.File getPath() -> bL
    boolean shouldScan(java.io.File,boolean) -> b
com.gmail.jerickson314.sdscanner.ScanFragment$ScanProgressCallbacks -> wy.o:
    void signalFinished() -> aZ
    void updateDebugMessages(com.gmail.jerickson314.sdscanner.UIStringGenerator) -> a
    void updatePath(java.lang.String) -> o
    void updateProgressNum(int) -> M
    void updateProgressText(com.gmail.jerickson314.sdscanner.UIStringGenerator) -> b
    void updateStartButtonEnabled(boolean) -> l
com.gmail.jerickson314.sdscanner.ScanFragment$Updater -> wy.p:
    java.lang.String mPathScanned -> pA
    com.gmail.jerickson314.sdscanner.ScanFragment this$0 -> po
    void <init>(com.gmail.jerickson314.sdscanner.ScanFragment,java.lang.String) -> <init>
    void run() -> run
com.gmail.jerickson314.sdscanner.UIStringGenerator -> wy.q:
    java.util.ArrayList mSubGenerators -> pB
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void addSubGenerator(int) -> ac
    void addSubGenerator(java.lang.String) -> t
    java.lang.String toString(android.app.Activity) -> b
com.gmail.jerickson314.sdscanner.UIStringGenerator$ResourceSubGenerator -> wy.r:
    int mResId -> pr
    void <init>(int) -> <init>
    java.lang.String toString(android.app.Activity) -> b
com.gmail.jerickson314.sdscanner.UIStringGenerator$StringSubGenerator -> wy.s:
    java.lang.String mString -> ps
    void <init>(java.lang.String) -> <init>
    java.lang.String toString(android.app.Activity) -> b
com.gmail.jerickson314.sdscanner.UIStringGenerator$SubGenerator -> wy.t:
    java.lang.String toString(android.app.Activity) -> b
com.mobeta.android.dslv.DragSortController -> com.mobeta.android.dslv.a:
    int CLICK_REMOVE -> pC
    int FLING_REMOVE -> pD
    int MISS -> pE
    int ON_DOWN -> pF
    int ON_DRAG -> pG
    int ON_LONG_PRESS -> pH
    boolean mCanDrag -> pI
    int mClickRemoveHitPos -> pJ
    int mClickRemoveId -> pK
    int mCurrX -> pL
    int mCurrY -> pM
    android.view.GestureDetector mDetector -> nr
    int mDragHandleId -> pN
    int mDragInitMode -> pO
    boolean mDragging -> pP
    com.mobeta.android.dslv.DragSortListView mDslv -> pQ
    int mFlingHandleId -> pR
    int mFlingHitPos -> pS
    android.view.GestureDetector mFlingRemoveDetector -> pT
    android.view.GestureDetector$OnGestureListener mFlingRemoveListener -> pU
    float mFlingSpeed -> pV
    int mHitPos -> pW
    boolean mIsRemoving -> pX
    int mItemX -> pY
    int mItemY -> pZ
    int mPositionX -> qa
    boolean mRemoveEnabled -> qb
    int mRemoveMode -> qc
    boolean mSortEnabled -> qd
    int[] mTempLoc -> qe
    int mTouchSlop -> aV
    void <init>(com.mobeta.android.dslv.DragSortListView) -> <init>
    void <init>(com.mobeta.android.dslv.DragSortListView,int,int,int) -> <init>
    void <init>(com.mobeta.android.dslv.DragSortListView,int,int,int,int) -> <init>
    void <init>(com.mobeta.android.dslv.DragSortListView,int,int,int,int,int) -> <init>
    boolean access$000(com.mobeta.android.dslv.DragSortController) -> a
    boolean access$100(com.mobeta.android.dslv.DragSortController) -> b
    boolean access$102(com.mobeta.android.dslv.DragSortController,boolean) -> a
    com.mobeta.android.dslv.DragSortListView access$200(com.mobeta.android.dslv.DragSortController) -> c
    float access$300(com.mobeta.android.dslv.DragSortController) -> d
    int access$400(com.mobeta.android.dslv.DragSortController) -> e
    int dragHandleHitPosition(android.view.MotionEvent) -> b
    int flingHandleHitPosition(android.view.MotionEvent) -> c
    int getDragInitMode() -> bM
    int getRemoveMode() -> bN
    boolean isRemoveEnabled() -> bO
    boolean isSortEnabled() -> bP
    boolean onDown(android.view.MotionEvent) -> onDown
    void onDragFloatView(android.view.View,android.graphics.Point,android.graphics.Point) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setClickRemoveId(int) -> ad
    void setDragHandleId(int) -> ae
    void setDragInitMode(int) -> af
    void setFlingHandleId(int) -> ag
    void setRemoveEnabled(boolean) -> r
    void setRemoveMode(int) -> ah
    void setSortEnabled(boolean) -> s
    boolean startDrag(int,int,int) -> b
    int startDragPosition(android.view.MotionEvent) -> d
    int startFlingPosition(android.view.MotionEvent) -> e
    int viewIdHitPosition(android.view.MotionEvent,int) -> a
com.mobeta.android.dslv.DragSortController$1 -> com.mobeta.android.dslv.b:
    com.mobeta.android.dslv.DragSortController this$0 -> qf
    void <init>(com.mobeta.android.dslv.DragSortController) -> <init>
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.mobeta.android.dslv.DragSortCursorAdapter -> com.mobeta.android.dslv.c:
    int REMOVED -> qg
    android.util.SparseIntArray mListMapping -> qh
    java.util.ArrayList mRemovedCursorPositions -> qi
    void <init>(android.content.Context,android.database.Cursor) -> <init>
    void <init>(android.content.Context,android.database.Cursor,int) -> <init>
    void <init>(android.content.Context,android.database.Cursor,boolean) -> <init>
    void cleanMapping() -> bQ
    void resetMappings() -> bR
    void changeCursor(android.database.Cursor) -> changeCursor
    void drag(int,int) -> j
    void drop(int,int) -> h
    int getCount() -> getCount
    int getCursorPosition(int) -> ai
    java.util.ArrayList getCursorPositions() -> bS
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getListPosition(int) -> aj
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void remove(int) -> remove
    void reset() -> reset
    android.database.Cursor swapCursor(android.database.Cursor) -> swapCursor
com.mobeta.android.dslv.DragSortItemView -> com.mobeta.android.dslv.DragSortItemView:
    int mGravity -> qj
    void <init>(android.content.Context) -> <init>
    int getGravity() -> getGravity
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void setGravity(int) -> setGravity
com.mobeta.android.dslv.DragSortItemViewCheckable -> com.mobeta.android.dslv.DragSortItemViewCheckable:
    void <init>(android.content.Context) -> <init>
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    void toggle() -> toggle
com.mobeta.android.dslv.DragSortListView -> com.mobeta.android.dslv.DragSortListView:
    int DRAGGING -> qk
    int DRAG_NEG_X -> ql
    int DRAG_NEG_Y -> qm
    int DRAG_POS_X -> qn
    int DRAG_POS_Y -> qo
    int DROPPING -> qp
    int IDLE -> IDLE
    int NO_CANCEL -> qq
    int ON_INTERCEPT_TOUCH_EVENT -> qr
    int ON_TOUCH_EVENT -> qs
    int REMOVING -> qt
    int STOPPED -> STOPPED
    int sCacheSize -> qu
    com.mobeta.android.dslv.DragSortListView$AdapterWrapper mAdapterWrapper -> qv
    boolean mAnimate -> qw
    boolean mBlockLayoutRequests -> qx
    android.view.MotionEvent mCancelEvent -> qy
    int mCancelMethod -> qz
    com.mobeta.android.dslv.DragSortListView$HeightCache mChildHeightCache -> qA
    float mCurrFloatAlpha -> qB
    int mDownScrollStartY -> qC
    float mDownScrollStartYF -> qD
    int mDragDeltaX -> qE
    int mDragDeltaY -> qF
    float mDragDownScrollHeight -> qG
    float mDragDownScrollStartFrac -> qH
    boolean mDragEnabled -> qI
    int mDragFlags -> qJ
    com.mobeta.android.dslv.DragSortListView$DragListener mDragListener -> qK
    com.mobeta.android.dslv.DragSortListView$DragScroller mDragScroller -> qL
    com.mobeta.android.dslv.DragSortListView$DragSortTracker mDragSortTracker -> qM
    int mDragStartY -> qN
    int mDragState -> qO
    float mDragUpScrollHeight -> qP
    float mDragUpScrollStartFrac -> qQ
    com.mobeta.android.dslv.DragSortListView$DropAnimator mDropAnimator -> qR
    com.mobeta.android.dslv.DragSortListView$DropListener mDropListener -> qS
    int mFirstExpPos -> qT
    float mFloatAlpha -> qU
    android.graphics.Point mFloatLoc -> qV
    int mFloatPos -> qW
    android.view.View mFloatView -> qX
    int mFloatViewHeight -> qY
    int mFloatViewHeightHalf -> qZ
    boolean mFloatViewInvalidated -> ra
    com.mobeta.android.dslv.DragSortListView$FloatViewManager mFloatViewManager -> rb
    int mFloatViewMid -> rc
    boolean mFloatViewOnMeasured -> rd
    boolean mIgnoreTouchEvent -> re
    boolean mInTouchEvent -> rf
    int mItemHeightCollapsed -> rg
    boolean mLastCallWasIntercept -> rh
    int mLastX -> ri
    int mLastY -> rj
    com.mobeta.android.dslv.DragSortListView$LiftAnimator mLiftAnimator -> rk
    boolean mListViewIntercepted -> rl
    float mMaxScrollSpeed -> rm
    android.database.DataSetObserver mObserver -> rn
    int mOffsetX -> ro
    int mOffsetY -> rp
    com.mobeta.android.dslv.DragSortListView$RemoveAnimator mRemoveAnimator -> rq
    com.mobeta.android.dslv.DragSortListView$RemoveListener mRemoveListener -> rr
    float mRemoveVelocityX -> rs
    android.view.View[] mSampleViewTypes -> rt
    com.mobeta.android.dslv.DragSortListView$DragScrollProfile mScrollProfile -> ru
    int mSecondExpPos -> rv
    float mSlideFrac -> rw
    float mSlideRegionFrac -> rx
    int mSrcPos -> ry
    android.graphics.Point mTouchLoc -> rz
    boolean mTrackDragSort -> rA
    int mUpScrollStartY -> rB
    float mUpScrollStartYF -> rC
    boolean mUseRemoveVelocity -> rD
    int mWidthMeasureSpec -> rE
    int mX -> rF
    int mY -> rG
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    float access$000(com.mobeta.android.dslv.DragSortListView) -> a
    int access$100(com.mobeta.android.dslv.DragSortListView) -> b
    int access$1000(com.mobeta.android.dslv.DragSortListView) -> c
    int access$102(com.mobeta.android.dslv.DragSortListView,int) -> a
    int access$1100(com.mobeta.android.dslv.DragSortListView) -> d
    void access$1200(com.mobeta.android.dslv.DragSortListView) -> e
    int access$1300(com.mobeta.android.dslv.DragSortListView) -> f
    int access$1400(com.mobeta.android.dslv.DragSortListView) -> g
    boolean access$1500(com.mobeta.android.dslv.DragSortListView) -> h
    float access$1600(com.mobeta.android.dslv.DragSortListView) -> i
    float access$1602(com.mobeta.android.dslv.DragSortListView,float) -> a
    void access$1700(com.mobeta.android.dslv.DragSortListView) -> j
    int access$1800(com.mobeta.android.dslv.DragSortListView,int,android.view.View,boolean) -> a
    void access$1900(com.mobeta.android.dslv.DragSortListView) -> k
    void access$200(com.mobeta.android.dslv.DragSortListView,int,android.view.View,boolean) -> b
    int access$2000(com.mobeta.android.dslv.DragSortListView) -> l
    float access$2100(com.mobeta.android.dslv.DragSortListView) -> m
    float access$2200(com.mobeta.android.dslv.DragSortListView) -> n
    com.mobeta.android.dslv.DragSortListView$DragScrollProfile access$2300(com.mobeta.android.dslv.DragSortListView) -> o
    float access$2400(com.mobeta.android.dslv.DragSortListView) -> p
    float access$2500(com.mobeta.android.dslv.DragSortListView) -> q
    boolean access$2602(com.mobeta.android.dslv.DragSortListView,boolean) -> a
    void access$2700(com.mobeta.android.dslv.DragSortListView,int,android.view.View,boolean) -> c
    int access$2800(com.mobeta.android.dslv.DragSortListView,int) -> b
    int access$2900(com.mobeta.android.dslv.DragSortListView,int) -> c
    int access$300(com.mobeta.android.dslv.DragSortListView) -> r
    int access$3000(com.mobeta.android.dslv.DragSortListView) -> s
    int access$302(com.mobeta.android.dslv.DragSortListView,int) -> d
    int access$3100(com.mobeta.android.dslv.DragSortListView,int,int) -> a
    int access$400(com.mobeta.android.dslv.DragSortListView) -> t
    android.graphics.Point access$500(com.mobeta.android.dslv.DragSortListView) -> u
    int access$600(com.mobeta.android.dslv.DragSortListView) -> v
    void access$700(com.mobeta.android.dslv.DragSortListView,boolean) -> b
    int access$800(com.mobeta.android.dslv.DragSortListView) -> w
    int access$900(com.mobeta.android.dslv.DragSortListView) -> x
    void adjustAllItems() -> bT
    void adjustItem(int) -> ak
    void adjustItem(int,android.view.View,boolean) -> a
    void adjustOnReorder() -> bU
    int adjustScroll(int,android.view.View,int,int) -> a
    int buildRunList(android.util.SparseBooleanArray,int,int,int[],int[]) -> a
    int calcItemHeight(int,int) -> k
    int calcItemHeight(int,android.view.View,boolean) -> b
    void clearPositions() -> bV
    void continueDrag(int,int) -> l
    void destroyFloatView() -> bW
    void doActionUpOrCancel() -> bX
    void doDragFloatView(int,android.view.View,boolean) -> c
    void doDragFloatView(boolean) -> t
    void doRemoveItem() -> bY
    void doRemoveItem(int) -> al
    void drawDivider(int,android.graphics.Canvas) -> a
    void dropFloatView() -> bZ
    int findFirstSetIndex(android.util.SparseBooleanArray,int,int) -> a
    int getChildHeight(int) -> am
    int getChildHeight(int,android.view.View,boolean) -> d
    int getItemHeight(int) -> an
    int getShuffleEdge(int,int) -> m
    int insertionIndexForKey(android.util.SparseBooleanArray,int) -> a
    void invalidateFloatView() -> ca
    void measureFloatView() -> cb
    void measureItem(android.view.View) -> k
    void printPosData() -> cc
    int rotate(int,int,int,int) -> b
    void saveTouchCoords(android.view.MotionEvent) -> f
    void updateFloatView() -> cd
    boolean updatePositions() -> ce
    void updateScrollStarts() -> cf
    void cancelDrag() -> cg
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    float getFloatAlpha() -> getFloatAlpha
    android.widget.ListAdapter getInputAdapter() -> getInputAdapter
    boolean isDragEnabled() -> ch
    void layoutChildren() -> layoutChildren
    boolean listViewIntercepted() -> ci
    void moveCheckState(int,int) -> n
    void moveItem(int,int) -> i
    boolean onDragTouchEvent(android.view.MotionEvent) -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void removeCheckState(int) -> ao
    void removeItem(int) -> removeItem
    void removeItem(int,float) -> b
    void requestLayout() -> requestLayout
    void setAdapter(android.widget.Adapter) -> setAdapter
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setDragEnabled(boolean) -> setDragEnabled
    void setDragListener(com.mobeta.android.dslv.DragSortListView$DragListener) -> setDragListener
    void setDragScrollProfile(com.mobeta.android.dslv.DragSortListView$DragScrollProfile) -> setDragScrollProfile
    void setDragScrollStart(float) -> setDragScrollStart
    void setDragScrollStarts(float,float) -> b
    void setDragSortListener(com.mobeta.android.dslv.DragSortListView$DragSortListener) -> setDragSortListener
    void setDropListener(com.mobeta.android.dslv.DragSortListView$DropListener) -> setDropListener
    void setFloatAlpha(float) -> setFloatAlpha
    void setFloatViewManager(com.mobeta.android.dslv.DragSortListView$FloatViewManager) -> setFloatViewManager
    void setMaxScrollSpeed(float) -> setMaxScrollSpeed
    void setRemoveListener(com.mobeta.android.dslv.DragSortListView$RemoveListener) -> setRemoveListener
    boolean startDrag(int,int,int,int) -> c
    boolean startDrag(int,android.view.View,int,int,int) -> a
    boolean stopDrag(boolean) -> u
    boolean stopDrag(boolean,float) -> a
    boolean stopDragWithVelocity(boolean,float) -> b
com.mobeta.android.dslv.DragSortListView$1 -> com.mobeta.android.dslv.d:
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView) -> <init>
    float getSpeed(float,long) -> a
com.mobeta.android.dslv.DragSortListView$2 -> com.mobeta.android.dslv.e:
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView) -> <init>
    void cancel() -> cancel
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.mobeta.android.dslv.DragSortListView$AdapterWrapper -> com.mobeta.android.dslv.f:
    android.widget.ListAdapter mAdapter -> rI
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,android.widget.ListAdapter) -> <init>
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    android.widget.ListAdapter getAdapter() -> getAdapter
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getViewTypeCount() -> getViewTypeCount
    boolean hasStableIds() -> hasStableIds
    boolean isEmpty() -> isEmpty
    boolean isEnabled(int) -> isEnabled
com.mobeta.android.dslv.DragSortListView$AdapterWrapper$1 -> com.mobeta.android.dslv.g:
    com.mobeta.android.dslv.DragSortListView$AdapterWrapper this$1 -> rJ
    com.mobeta.android.dslv.DragSortListView val$this$0 -> rK
    void <init>(com.mobeta.android.dslv.DragSortListView$AdapterWrapper,com.mobeta.android.dslv.DragSortListView) -> <init>
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.mobeta.android.dslv.DragSortListView$DragListener -> com.mobeta.android.dslv.h:
    void drag(int,int) -> j
com.mobeta.android.dslv.DragSortListView$DragScrollProfile -> com.mobeta.android.dslv.i:
    float getSpeed(float,long) -> a
com.mobeta.android.dslv.DragSortListView$DragScroller -> com.mobeta.android.dslv.j:
    int DOWN -> rL
    int STOP -> STOP
    int UP -> rM
    float dt -> rN
    int dy -> rO
    boolean mAbort -> rP
    long mCurrTime -> rQ
    int mFirstFooter -> rR
    int mLastHeader -> rS
    long mPrevTime -> rT
    float mScrollSpeed -> rU
    boolean mScrolling -> cG
    int scrollDir -> rV
    long tStart -> rW
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView) -> <init>
    int getScrollDir() -> cj
    boolean isScrolling() -> ck
    void run() -> run
    void startScrolling(int) -> ap
    void stopScrolling(boolean) -> v
com.mobeta.android.dslv.DragSortListView$DragSortListener -> com.mobeta.android.dslv.k:
com.mobeta.android.dslv.DragSortListView$DragSortTracker -> com.mobeta.android.dslv.l:
    java.lang.StringBuilder mBuilder -> rX
    java.io.File mFile -> rY
    int mNumFlushes -> rZ
    int mNumInBuffer -> sa
    boolean mTracking -> sb
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView) -> <init>
    void appendState() -> cl
    void flush() -> flush
    void startTracking() -> startTracking
    void stopTracking() -> cm
com.mobeta.android.dslv.DragSortListView$DropAnimator -> com.mobeta.android.dslv.m:
    int mDropPos -> sc
    float mInitDeltaX -> sd
    float mInitDeltaY -> se
    int srcPos -> sf
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,float,int) -> <init>
    int getTargetY() -> cn
    void onStart() -> onStart
    void onStop() -> onStop
    void onUpdate(float,float) -> c
com.mobeta.android.dslv.DragSortListView$DropListener -> com.mobeta.android.dslv.n:
    void drop(int,int) -> h
com.mobeta.android.dslv.DragSortListView$FloatViewManager -> com.mobeta.android.dslv.o:
    android.view.View onCreateFloatView(int) -> aq
    void onDestroyFloatView(android.view.View) -> l
    void onDragFloatView(android.view.View,android.graphics.Point,android.graphics.Point) -> a
com.mobeta.android.dslv.DragSortListView$HeightCache -> com.mobeta.android.dslv.p:
    android.util.SparseIntArray mMap -> sg
    int mMaxSize -> sh
    java.util.ArrayList mOrder -> si
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,int) -> <init>
    void add(int,int) -> add
    void clear() -> clear
    int get(int) -> get
com.mobeta.android.dslv.DragSortListView$LiftAnimator -> com.mobeta.android.dslv.q:
    float mFinalDragDeltaY -> sj
    float mInitDragDeltaY -> sk
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,float,int) -> <init>
    void onStart() -> onStart
    void onUpdate(float,float) -> c
com.mobeta.android.dslv.DragSortListView$RemoveAnimator -> com.mobeta.android.dslv.r:
    int mFirstChildHeight -> sl
    int mFirstPos -> sm
    float mFirstStartBlank -> sn
    float mFloatLocX -> so
    int mSecondChildHeight -> sp
    int mSecondPos -> sq
    float mSecondStartBlank -> sr
    int srcPos -> sf
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,float,int) -> <init>
    void onStart() -> onStart
    void onStop() -> onStop
    void onUpdate(float,float) -> c
com.mobeta.android.dslv.DragSortListView$RemoveListener -> com.mobeta.android.dslv.s:
    void remove(int) -> remove
com.mobeta.android.dslv.DragSortListView$SmoothAnimator -> com.mobeta.android.dslv.t:
    float mA -> ss
    float mAlpha -> mAlpha
    float mB -> st
    float mC -> su
    boolean mCanceled -> sv
    float mD -> sw
    float mDurationF -> sx
    long mStartTime -> sy
    com.mobeta.android.dslv.DragSortListView this$0 -> rH
    void <init>(com.mobeta.android.dslv.DragSortListView,float,int) -> <init>
    void cancel() -> cancel
    void onStart() -> onStart
    void onStop() -> onStop
    void onUpdate(float,float) -> c
    void run() -> run
    void start() -> start
    float transform(float) -> f
com.mobeta.android.dslv.ResourceDragSortCursorAdapter -> com.mobeta.android.dslv.u:
    int mDropDownLayout -> sz
    android.view.LayoutInflater mInflater -> dh
    int mLayout -> sA
    void <init>(android.content.Context,int,android.database.Cursor) -> <init>
    void <init>(android.content.Context,int,android.database.Cursor,int) -> <init>
    void <init>(android.content.Context,int,android.database.Cursor,boolean) -> <init>
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    void setDropDownViewResource(int) -> setDropDownViewResource
    void setViewResource(int) -> setViewResource
com.mobeta.android.dslv.SimpleDragSortCursorAdapter -> com.mobeta.android.dslv.v:
    com.mobeta.android.dslv.SimpleDragSortCursorAdapter$CursorToStringConverter mCursorToStringConverter -> sB
    int[] mFrom -> sC
    java.lang.String[] mOriginalFrom -> sD
    int mStringConversionColumn -> sE
    int[] mTo -> sF
    com.mobeta.android.dslv.SimpleDragSortCursorAdapter$ViewBinder mViewBinder -> sG
    void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[]) -> <init>
    void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[],int) -> <init>
    void findColumns(android.database.Cursor,java.lang.String[]) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[]) -> changeCursorAndColumns
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
    com.mobeta.android.dslv.SimpleDragSortCursorAdapter$CursorToStringConverter getCursorToStringConverter() -> co
    int getStringConversionColumn() -> getStringConversionColumn
    com.mobeta.android.dslv.SimpleDragSortCursorAdapter$ViewBinder getViewBinder() -> cp
    void setCursorToStringConverter(com.mobeta.android.dslv.SimpleDragSortCursorAdapter$CursorToStringConverter) -> a
    void setStringConversionColumn(int) -> setStringConversionColumn
    void setViewBinder(com.mobeta.android.dslv.SimpleDragSortCursorAdapter$ViewBinder) -> a
    void setViewImage(android.widget.ImageView,java.lang.String) -> setViewImage
    void setViewText(android.widget.TextView,java.lang.String) -> setViewText
    android.database.Cursor swapCursor(android.database.Cursor) -> swapCursor
com.mobeta.android.dslv.SimpleDragSortCursorAdapter$CursorToStringConverter -> com.mobeta.android.dslv.w:
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
com.mobeta.android.dslv.SimpleDragSortCursorAdapter$ViewBinder -> com.mobeta.android.dslv.x:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> setViewValue
com.mobeta.android.dslv.SimpleFloatViewManager -> com.mobeta.android.dslv.y:
    int mFloatBGColor -> sH
    android.graphics.Bitmap mFloatBitmap -> sI
    android.widget.ImageView mImageView -> sJ
    android.widget.ListView mListView -> dm
    void <init>(android.widget.ListView) -> <init>
    android.view.View onCreateFloatView(int) -> aq
    void onDestroyFloatView(android.view.View) -> l
    void onDragFloatView(android.view.View,android.graphics.Point,android.graphics.Point) -> a
    void setBackgroundColor(int) -> setBackgroundColor
