android.support.annotation.AnimRes -> android.support.annotation.a:
android.support.annotation.AnimatorRes -> android.support.annotation.b:
android.support.annotation.AnyRes -> android.support.annotation.c:
android.support.annotation.ArrayRes -> android.support.annotation.d:
android.support.annotation.AttrRes -> android.support.annotation.e:
android.support.annotation.BinderThread -> android.support.annotation.f:
android.support.annotation.BoolRes -> android.support.annotation.g:
android.support.annotation.CallSuper -> android.support.annotation.h:
android.support.annotation.CheckResult -> android.support.annotation.i:
    java.lang.String suggest() -> a
android.support.annotation.ColorInt -> android.support.annotation.j:
android.support.annotation.ColorRes -> android.support.annotation.k:
android.support.annotation.DimenRes -> android.support.annotation.l:
android.support.annotation.DrawableRes -> android.support.annotation.m:
android.support.annotation.FloatRange -> android.support.annotation.n:
    double from() -> b
    boolean fromInclusive() -> c
    double to() -> d
    boolean toInclusive() -> e
android.support.annotation.FractionRes -> android.support.annotation.o:
android.support.annotation.IdRes -> android.support.annotation.p:
android.support.annotation.IntDef -> android.support.annotation.q:
    boolean flag() -> f
    long[] value() -> g
android.support.annotation.IntRange -> android.support.annotation.r:
    long from() -> h
    long to() -> i
android.support.annotation.IntegerRes -> android.support.annotation.s:
android.support.annotation.InterpolatorRes -> android.support.annotation.t:
android.support.annotation.Keep -> android.support.annotation.Keep:
android.support.annotation.LayoutRes -> android.support.annotation.u:
android.support.annotation.MainThread -> android.support.annotation.v:
android.support.annotation.MenuRes -> android.support.annotation.w:
android.support.annotation.NonNull -> android.support.annotation.x:
android.support.annotation.Nullable -> android.support.annotation.y:
android.support.annotation.PluralsRes -> android.support.annotation.z:
android.support.annotation.RawRes -> android.support.annotation.aa:
android.support.annotation.RequiresPermission -> android.support.annotation.ab:
    java.lang.String[] allOf() -> j
    java.lang.String[] anyOf() -> k
    boolean conditional() -> l
    java.lang.String value() -> m
android.support.annotation.RequiresPermission$Read -> android.support.annotation.ac:
    android.support.annotation.RequiresPermission value() -> n
android.support.annotation.RequiresPermission$Write -> android.support.annotation.ad:
    android.support.annotation.RequiresPermission value() -> n
android.support.annotation.Size -> android.support.annotation.ae:
    long max() -> o
    long min() -> p
    long multiple() -> q
    long value() -> r
android.support.annotation.StringDef -> android.support.annotation.af:
    java.lang.String[] value() -> value
android.support.annotation.StringRes -> android.support.annotation.ag:
android.support.annotation.StyleRes -> android.support.annotation.ah:
android.support.annotation.StyleableRes -> android.support.annotation.ai:
android.support.annotation.TransitionRes -> android.support.annotation.aj:
android.support.annotation.UiThread -> android.support.annotation.ak:
android.support.annotation.VisibleForTesting -> android.support.annotation.al:
android.support.annotation.WorkerThread -> android.support.annotation.am:
android.support.annotation.XmlRes -> android.support.annotation.an:
com.google.zxing.integration.android.IntentIntegrator -> wy.a:
    java.util.Collection ALL_CODE_TYPES -> a
    java.lang.String BSPLUS_PACKAGE -> b
    java.lang.String BS_PACKAGE -> c
    java.util.Collection DATA_MATRIX_TYPES -> d
    java.lang.String DEFAULT_MESSAGE -> e
    java.lang.String DEFAULT_NO -> f
    java.lang.String DEFAULT_TITLE -> g
    java.lang.String DEFAULT_YES -> h
    java.util.Collection ONE_D_CODE_TYPES -> i
    java.util.Collection PRODUCT_CODE_TYPES -> j
    java.util.Collection QR_CODE_TYPES -> k
    int REQUEST_CODE -> l
    java.lang.String TAG -> TAG
    java.util.List TARGET_ALL_KNOWN -> m
    java.util.List TARGET_BARCODE_SCANNER_ONLY -> n
    android.app.Activity activity -> o
    java.lang.String buttonNo -> p
    java.lang.String buttonYes -> q
    android.app.Fragment fragment -> r
    java.lang.String message -> s
    java.util.Map moreExtras -> t
    java.util.List targetApplications -> u
    java.lang.String title -> v
    void <clinit>() -> <clinit>
    void <init>(android.app.Activity) -> <init>
    void <init>(android.app.Fragment) -> <init>
    java.util.List access$000(com.google.zxing.integration.android.IntentIntegrator) -> a
    android.app.Fragment access$100(com.google.zxing.integration.android.IntentIntegrator) -> b
    android.app.Activity access$200(com.google.zxing.integration.android.IntentIntegrator) -> c
    java.lang.String access$300() -> s
    void attachMoreExtras(android.content.Intent) -> a
    boolean contains(java.lang.Iterable,java.lang.String) -> a
    java.lang.String findTargetAppPackage(android.content.Intent) -> b
    void initializeConfiguration() -> t
    java.util.List list(java.lang.String[]) -> a
    com.google.zxing.integration.android.IntentResult parseActivityResult(int,int,android.content.Intent) -> a
    android.app.AlertDialog showDownloadDialog() -> u
    void addExtra(java.lang.String,java.lang.Object) -> a
    java.lang.String getButtonNo() -> v
    java.lang.String getButtonYes() -> w
    java.lang.String getMessage() -> getMessage
    java.util.Map getMoreExtras() -> x
    java.util.Collection getTargetApplications() -> y
    java.lang.String getTitle() -> getTitle
    android.app.AlertDialog initiateScan() -> z
    android.app.AlertDialog initiateScan(int) -> a
    android.app.AlertDialog initiateScan(java.util.Collection) -> a
    android.app.AlertDialog initiateScan(java.util.Collection,int) -> a
    void setButtonNo(java.lang.String) -> a
    void setButtonNoByID(int) -> b
    void setButtonYes(java.lang.String) -> b
    void setButtonYesByID(int) -> c
    void setMessage(java.lang.String) -> setMessage
    void setMessageByID(int) -> d
    void setSingleTargetApplication(java.lang.String) -> c
    void setTargetApplications(java.util.List) -> a
    void setTitle(java.lang.String) -> setTitle
    void setTitleByID(int) -> e
    android.app.AlertDialog shareText(java.lang.CharSequence) -> a
    android.app.AlertDialog shareText(java.lang.CharSequence,java.lang.CharSequence) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
com.google.zxing.integration.android.IntentIntegrator$1 -> wy.b:
    com.google.zxing.integration.android.IntentIntegrator this$0 -> w
    void <init>(com.google.zxing.integration.android.IntentIntegrator) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.zxing.integration.android.IntentResult -> wy.c:
    java.lang.String contents -> x
    java.lang.String errorCorrectionLevel -> y
    java.lang.String formatName -> z
    java.lang.Integer orientation -> A
    byte[] rawBytes -> B
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,byte[],java.lang.Integer,java.lang.String) -> <init>
    java.lang.String getContents() -> A
    java.lang.String getErrorCorrectionLevel() -> B
    java.lang.String getFormatName() -> C
    java.lang.Integer getOrientation() -> D
    byte[] getRawBytes() -> E
    java.lang.String toString() -> toString
edu.mit.mobile.android.utils.ProviderUtils -> wy.d:
    void <init>() -> <init>
    java.lang.String addExtraWhere(java.lang.String,java.lang.String[]) -> a
    java.lang.String[] addExtraWhereArgs(java.lang.String[],java.lang.String[]) -> a
info.staticfree.SuperGenPass.BuildConfig -> info.staticfree.SuperGenPass.a:
    java.lang.String APPLICATION_ID -> C
    java.lang.String BUILD_TYPE -> D
    boolean DEBUG -> DEBUG
    java.lang.String FLAVOR -> E
    int VERSION_CODE -> F
    java.lang.String VERSION_NAME -> G
    void <init>() -> <init>
info.staticfree.SuperGenPass.Domain -> info.staticfree.SuperGenPass.b:
    android.net.Uri CONTENT_URI -> CONTENT_URI
    java.lang.String DOMAIN -> H
    java.lang.String PATH -> I
    java.lang.String SORT_ORDER -> J
    void <clinit>() -> <clinit>
    void <init>() -> <init>
info.staticfree.SuperGenPass.GeneratedPasswordView -> info.staticfree.SuperGenPass.GeneratedPasswordView:
    int MENU_ID_COPY -> K
    java.lang.CharSequence domain -> L
    android.view.View$OnClickListener mOnClickListener -> M
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void copyToClipboard() -> F
    boolean getHidePassword() -> getHidePassword
    void onClick(android.view.View) -> onClick
    void onCreateContextMenu(android.view.ContextMenu) -> onCreateContextMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    boolean onTextContextMenuItem(int) -> onTextContextMenuItem
    void setDomainName(java.lang.CharSequence) -> setDomainName
    void setHidePassword(boolean) -> setHidePassword
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void setText(java.lang.CharSequence,android.widget.TextView$BufferType) -> setText
info.staticfree.SuperGenPass.GeneratedPasswordView$1 -> info.staticfree.SuperGenPass.c:
    info.staticfree.SuperGenPass.GeneratedPasswordView this$0 -> N
    void <init>(info.staticfree.SuperGenPass.GeneratedPasswordView) -> <init>
    char[] getAcceptedChars() -> getAcceptedChars
    int getInputType() -> getInputType
info.staticfree.SuperGenPass.GeneratedPasswordView$SavedState -> info.staticfree.SuperGenPass.d:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.CharSequence text -> text
    void <clinit>() -> <clinit>
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcel,info.staticfree.SuperGenPass.GeneratedPasswordView$1) -> <init>
    void <init>(android.os.Parcelable) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
info.staticfree.SuperGenPass.GeneratedPasswordView$SavedState$1 -> info.staticfree.SuperGenPass.e:
    void <init>() -> <init>
    info.staticfree.SuperGenPass.GeneratedPasswordView$SavedState createFromParcel(android.os.Parcel) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    info.staticfree.SuperGenPass.GeneratedPasswordView$SavedState[] newArray(int) -> f
    java.lang.Object[] newArray(int) -> newArray
info.staticfree.SuperGenPass.IllegalDomainException -> info.staticfree.SuperGenPass.f:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
info.staticfree.SuperGenPass.Manifest -> info.staticfree.SuperGenPass.g:
    void <init>() -> <init>
info.staticfree.SuperGenPass.Manifest$permission -> info.staticfree.SuperGenPass.h:
    java.lang.String ACCESS_DOMAINS -> O
    void <init>() -> <init>
info.staticfree.SuperGenPass.PasswordGenerationException -> info.staticfree.SuperGenPass.i:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
info.staticfree.SuperGenPass.Preferences -> info.staticfree.SuperGenPass.j:
    java.lang.String ACTION_CLEAR_STORED_DOMAINS -> P
    java.lang.String ACTION_GENERATE_SALT -> Q
    java.lang.String ACTION_SCAN_SALT -> R
    java.lang.String PREF_CLEAR_REMEMBERED -> S
    java.lang.String PREF_CLIPBOARD -> T
    java.lang.String PREF_DOMAIN_CHECK -> U
    java.lang.String PREF_GENERATE_SALT -> V
    java.lang.String PREF_PIN_DIGITS -> W
    java.lang.String PREF_PW_CLEAR_TIMEOUT -> X
    java.lang.String PREF_PW_LENGTH -> Y
    java.lang.String PREF_PW_SALT -> Z
    java.lang.String PREF_PW_TYPE -> aa
    java.lang.String PREF_REMEMBER_DOMAINS -> ab
    java.lang.String PREF_SCAN_SALT -> ac
    java.lang.String PREF_SHOW_GEN_PW -> ad
    java.lang.String PREF_SHOW_PIN -> ae
    java.lang.String PREF_VISUAL_HASH -> af
    android.preference.Preference$OnPreferenceChangeListener integerConformCheck -> ag
    android.app.LoaderManager$LoaderCallbacks mDomainCountLoaderCallbacks -> ah
    android.preference.Preference$OnPreferenceClickListener mOnPreferenceClickListener -> ai
    void <init>() -> <init>
    void access$100(info.staticfree.SuperGenPass.Preferences,java.lang.String) -> a
    int getStringAsInteger(android.content.SharedPreferences,java.lang.String,int) -> a
    void setSaltPref(java.lang.String) -> d
    boolean isInteger(java.lang.Object) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void scanSalt() -> G
info.staticfree.SuperGenPass.Preferences$1 -> info.staticfree.SuperGenPass.k:
    info.staticfree.SuperGenPass.Preferences this$0 -> aj
    void <init>(info.staticfree.SuperGenPass.Preferences) -> <init>
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
info.staticfree.SuperGenPass.Preferences$2 -> info.staticfree.SuperGenPass.l:
    info.staticfree.SuperGenPass.Preferences this$0 -> aj
    void <init>(info.staticfree.SuperGenPass.Preferences) -> <init>
    android.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.content.Loader,android.database.Cursor) -> a
    void onLoadFinished(android.content.Loader,java.lang.Object) -> onLoadFinished
    void onLoaderReset(android.content.Loader) -> onLoaderReset
info.staticfree.SuperGenPass.Preferences$3 -> info.staticfree.SuperGenPass.m:
    info.staticfree.SuperGenPass.Preferences this$0 -> aj
    void <init>(info.staticfree.SuperGenPass.Preferences) -> <init>
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
info.staticfree.SuperGenPass.Preferences$SaltFragment -> info.staticfree.SuperGenPass.n:
    java.util.regex.Pattern PATTERN_WHITESPACE -> ak
    int SALT_SIZE_BYTES -> al
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void access$000(info.staticfree.SuperGenPass.Preferences$SaltFragment) -> a
    void generateSalt() -> H
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
info.staticfree.SuperGenPass.Preferences$SaltFragment$1 -> info.staticfree.SuperGenPass.o:
    info.staticfree.SuperGenPass.Preferences$SaltFragment this$0 -> am
    void <init>(info.staticfree.SuperGenPass.Preferences$SaltFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
info.staticfree.SuperGenPass.Preferences$SaltFragment$2 -> info.staticfree.SuperGenPass.p:
    info.staticfree.SuperGenPass.Preferences$SaltFragment this$0 -> am
    void <init>(info.staticfree.SuperGenPass.Preferences$SaltFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
info.staticfree.SuperGenPass.R -> info.staticfree.SuperGenPass.q:
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$array -> info.staticfree.SuperGenPass.R$array:
    int pin_lengths -> pin_lengths
    int pwgen_types -> pwgen_types
    int pwgen_types_label -> pwgen_types_label
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$attr -> info.staticfree.SuperGenPass.R$attr:
    int generatedPasswordViewStyle -> generatedPasswordViewStyle
    int showVisualHash -> showVisualHash
    int visualHashHeight -> visualHashHeight
    int visualHashWidth -> visualHashWidth
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$drawable -> info.staticfree.SuperGenPass.R$drawable:
    int divider_vertical_holo_dark -> divider_vertical_holo_dark
    int ic_content_copy_black_24dp -> ic_content_copy_black_24dp
    int ic_content_copy_black_disabled_24dp -> ic_content_copy_black_disabled_24dp
    int ic_menu_copy -> ic_menu_copy
    int ic_menu_copy_holo_dark_disabled -> ic_menu_copy_holo_dark_disabled
    int ic_menu_copy_holo_dark_normal -> ic_menu_copy_holo_dark_normal
    int ic_menu_login -> ic_menu_login
    int ic_textview_supergenpass -> ic_textview_supergenpass
    int ic_textview_supergenpass_disabled -> ic_textview_supergenpass_disabled
    int ic_textview_supergenpass_normal -> ic_textview_supergenpass_normal
    int icon -> icon
    int tab_selected_focused_holo -> tab_selected_focused_holo
    int tab_selected_holo -> tab_selected_holo
    int tab_selected_pressed_holo -> tab_selected_pressed_holo
    int tab_unselected_focused_holo -> tab_unselected_focused_holo
    int tab_unselected_holo -> tab_unselected_holo
    int tab_unselected_pressed_holo -> tab_unselected_pressed_holo
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$id -> info.staticfree.SuperGenPass.R$id:
    int about -> about
    int about_layout -> about_layout
    int copy -> copy
    int domain_edit -> domain_edit
    int go -> go
    int hide_master_password -> hide_master_password
    int label_password -> label_password
    int label_pin -> label_pin
    int password_edit -> password_edit
    int password_output -> password_output
    int pin_length -> pin_length
    int pin_output -> pin_output
    int preferences -> preferences
    int settings -> settings
    int show_gen_password -> show_gen_password
    int tab_password -> tab_password
    int tab_pin -> tab_pin
    int title -> title
    int verify -> verify
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$layout -> info.staticfree.SuperGenPass.R$layout:
    int about -> about
    int main -> main
    int master_pw_verify -> master_pw_verify
    int preference_activity -> preference_activity
    int tab_indicator -> tab_indicator
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$menu -> info.staticfree.SuperGenPass.R$menu:
    int options -> options
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$plurals -> info.staticfree.SuperGenPass.R$plurals:
    int pref_autocomplete_count -> pref_autocomplete_count
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$raw -> info.staticfree.SuperGenPass.R$raw:
    int domains -> domains
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$string -> info.staticfree.SuperGenPass.R$string:
    int about_text -> about_text
    int about_title -> about_title
    int advanced_preferences -> advanced_preferences
    int app_description -> app_description
    int app_name -> app_name
    int dialog_verify_hint -> dialog_verify_hint
    int dialog_verify_title -> dialog_verify_title
    int domain_hint -> domain_hint
    int domain_hint_no_checking -> domain_hint_no_checking
    int done -> done
    int err_empty_master_password -> err_empty_master_password
    int err_json_load -> err_json_load
    int err_no_hash -> err_no_hash
    int err_no_md5 -> err_no_md5
    int generated_password -> generated_password
    int genpw_hidden -> genpw_hidden
    int genpw_shown -> genpw_shown
    int master_pw_verify_description -> master_pw_verify_description
    int menu_about -> menu_about
    int menu_copy_generated_password -> menu_copy_generated_password
    int menu_settings -> menu_settings
    int menu_verify -> menu_verify
    int password_hint -> password_hint
    int pin_length -> pin_length
    int pref_autocomplete -> pref_autocomplete
    int pref_autocomplete_summary -> pref_autocomplete_summary
    int pref_clear_remembered_default_summary -> pref_clear_remembered_default_summary
    int pref_clear_remembered_domains -> pref_clear_remembered_domains
    int pref_copy_password -> pref_copy_password
    int pref_copy_password_summary -> pref_copy_password_summary
    int pref_domain_check -> pref_domain_check
    int pref_domain_check_off -> pref_domain_check_off
    int pref_domain_check_on -> pref_domain_check_on
    int pref_err_not_number -> pref_err_not_number
    int pref_generate_salt_and_set -> pref_generate_salt_and_set
    int pref_generate_salt_dialog_message -> pref_generate_salt_dialog_message
    int pref_generate_salt_summary -> pref_generate_salt_summary
    int pref_generate_salt_title -> pref_generate_salt_title
    int pref_pin_summary -> pref_pin_summary
    int pref_pin_title -> pref_pin_title
    int pref_pw_clear_timeout -> pref_pw_clear_timeout
    int pref_pw_clear_timeout_description -> pref_pw_clear_timeout_description
    int pref_pw_clear_timeout_summary -> pref_pw_clear_timeout_summary
    int pref_pw_length -> pref_pw_length
    int pref_pw_length_description -> pref_pw_length_description
    int pref_pw_salt_category -> pref_pw_salt_category
    int pref_pw_salt_description -> pref_pw_salt_description
    int pref_pw_salt_summary -> pref_pw_salt_summary
    int pref_pw_salt_title -> pref_pw_salt_title
    int pref_scan_qr_code_to_load_zxing_message -> pref_scan_qr_code_to_load_zxing_message
    int pref_scan_salt_from_qr_code_title -> pref_scan_salt_from_qr_code_title
    int pref_scan_salt_summary -> pref_scan_salt_summary
    int pref_visual_hash -> pref_visual_hash
    int pref_visual_hash_summary -> pref_visual_hash_summary
    int preferences -> preferences
    int pwc_type -> pwc_type
    int pwgen_type_prompt -> pwgen_type_prompt
    int pwgen_type_summary -> pwgen_type_summary
    int sgp_type -> sgp_type
    int sgp_type_sha_512 -> sgp_type_sha_512
    int tab_password -> tab_password
    int tab_pin -> tab_pin
    int toast_copied -> toast_copied
    int toast_copied_no_domain -> toast_copied_no_domain
    int toast_verify_success -> toast_verify_success
    int user_preferences -> user_preferences
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$style -> info.staticfree.SuperGenPass.R$style:
    int AppTheme -> AppTheme
    int GeneratedPasswordView -> GeneratedPasswordView
    int ShareTheme -> ShareTheme
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$styleable -> info.staticfree.SuperGenPass.R$styleable:
    int[] GeneratedPasswordView -> GeneratedPasswordView
    int[] Theme -> Theme
    int Theme_generatedPasswordViewStyle -> Theme_generatedPasswordViewStyle
    int[] VisualHashEditText -> VisualHashEditText
    int VisualHashEditText_showVisualHash -> VisualHashEditText_showVisualHash
    int VisualHashEditText_visualHashHeight -> VisualHashEditText_visualHashHeight
    int VisualHashEditText_visualHashWidth -> VisualHashEditText_visualHashWidth
    void <clinit>() -> <clinit>
    void <init>() -> <init>
info.staticfree.SuperGenPass.R$xml -> info.staticfree.SuperGenPass.R$xml:
    int preferences -> preferences
    void <init>() -> <init>
info.staticfree.SuperGenPass.RememberedDBHelper -> info.staticfree.SuperGenPass.r:
    java.lang.String DB_DOMAINS_TABLE -> an
    java.lang.String DB_NAME -> ao
    int DB_VERSION -> ap
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
info.staticfree.SuperGenPass.RememberedDomainProvider -> info.staticfree.SuperGenPass.RememberedDomainProvider:
    java.lang.String AUTHORITY -> AUTHORITY
    int MATCHER_DOMAIN_DIR -> aq
    int MATCHER_DOMAIN_ITEM -> ar
    java.lang.String TYPE_DOMAINS_DIR -> as
    java.lang.String TYPE_DOMAINS_ITEM -> at
    android.content.UriMatcher mUriMatcher -> au
    info.staticfree.SuperGenPass.RememberedDBHelper mDBHelper -> av
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void addRememberedDomain(android.content.ContentResolver,java.lang.String) -> a
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
info.staticfree.SuperGenPass.SgpPreferencesActivity -> info.staticfree.SuperGenPass.SgpPreferencesActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
info.staticfree.SuperGenPass.SuperGenPassShare -> info.staticfree.SuperGenPass.SuperGenPassShare:
    void <init>() -> <init>
info.staticfree.SuperGenPass.Super_Gen_Pass -> info.staticfree.SuperGenPass.Super_Gen_Pass:
    int DOMAIN_COLUMN -> aw
    int MINUTE_MS -> ax
    int MIN_PIN_LENGTH -> ay
    int MSG_UPDATE_PW_VIEW -> az
    java.lang.String[] PROJECTION -> aA
    int REQUEST_CODE_PREFERENCES -> aB
    java.lang.String STATE_LAST_STOPPED_TIME -> aC
    java.lang.String STATE_SHOWING_PASSWORD -> aD
    java.lang.String TAG -> TAG
    boolean mClearDomain -> aE
    boolean mCopyToClipboard -> aF
    info.staticfree.SuperGenPass.hashes.DomainBasedHash mDomainBasedHash -> aG
    boolean mDomainCheck -> aH
    android.widget.AutoCompleteTextView mDomainEdit -> aI
    info.staticfree.SuperGenPass.GeneratedPasswordView mGenPinView -> aJ
    info.staticfree.SuperGenPass.GeneratedPasswordView mGenPwView -> aK
    android.os.Handler mHandler -> mHandler
    long mLastStoppedTime -> aL
    info.staticfree.SuperGenPass.VisualHashEditText mMasterPwEdit -> aM
    int mPinDigits -> aN
    android.widget.Spinner mPinDigitsSpinner -> aO
    info.staticfree.SuperGenPass.hashes.HotpPin mPinGen -> aP
    int mPwClearTimeout -> aQ
    int mPwLength -> aR
    java.lang.String mPwSalt -> aS
    boolean mRememberDomains -> aT
    android.content.BroadcastReceiver mScreenOffReceiver -> aU
    android.widget.CompoundButton mShowGenPassword -> aV
    boolean mShowPin -> aW
    boolean mShowingPassword -> aX
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void access$000(info.staticfree.SuperGenPass.Super_Gen_Pass) -> a
    void access$100(info.staticfree.SuperGenPass.Super_Gen_Pass) -> b
    info.staticfree.SuperGenPass.VisualHashEditText access$200(info.staticfree.SuperGenPass.Super_Gen_Pass) -> c
    int access$300(info.staticfree.SuperGenPass.Super_Gen_Pass) -> d
    int access$302(info.staticfree.SuperGenPass.Super_Gen_Pass,int) -> a
    java.lang.String access$400() -> I
    android.os.Handler access$500(info.staticfree.SuperGenPass.Super_Gen_Pass) -> e
    void bindTextWatchers() -> J
    void clearEditTexts() -> K
    void clearGenPassword() -> L
    java.lang.String generateAndDisplay() -> M
    void generateIfValid() -> N
    void initDomainPasswordEntry() -> O
    void initGenPassword() -> P
    void initMasterPasswordHide() -> Q
    void initPinWidgets() -> R
    void postGenerate(boolean) -> a
    java.lang.String extractDomain(java.lang.String) -> e
    java.lang.String getDomain() -> getDomain
    java.lang.String getMasterPassword() -> S
    boolean go() -> T
    void loadFromPreferences() -> U
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPause() -> onPause
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    android.database.Cursor runQuery(java.lang.CharSequence) -> runQuery
info.staticfree.SuperGenPass.Super_Gen_Pass$1 -> info.staticfree.SuperGenPass.s:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
info.staticfree.SuperGenPass.Super_Gen_Pass$2 -> info.staticfree.SuperGenPass.Super_Gen_Pass$2:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
info.staticfree.SuperGenPass.Super_Gen_Pass$3 -> info.staticfree.SuperGenPass.t:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
info.staticfree.SuperGenPass.Super_Gen_Pass$4 -> info.staticfree.SuperGenPass.u:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
info.staticfree.SuperGenPass.Super_Gen_Pass$5 -> info.staticfree.SuperGenPass.v:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
info.staticfree.SuperGenPass.Super_Gen_Pass$6 -> info.staticfree.SuperGenPass.w:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
info.staticfree.SuperGenPass.Super_Gen_Pass$7 -> info.staticfree.SuperGenPass.x:
    info.staticfree.SuperGenPass.Super_Gen_Pass this$0 -> aY
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass) -> <init>
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
info.staticfree.SuperGenPass.Super_Gen_Pass$AboutFragment -> info.staticfree.SuperGenPass.y:
    void <init>() -> <init>
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
info.staticfree.SuperGenPass.Super_Gen_Pass$AboutFragment$1 -> info.staticfree.SuperGenPass.z:
    info.staticfree.SuperGenPass.Super_Gen_Pass$AboutFragment this$0 -> aZ
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass$AboutFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment -> info.staticfree.SuperGenPass.aa:
    java.lang.String ARG_PASSWORD -> ARG_PASSWORD
    java.lang.String mPasswordToCheck -> ba
    void <init>() -> <init>
    java.lang.String access$600(info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment) -> a
    void showVerifyFragment(android.app.FragmentManager,java.lang.String) -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment$1 -> info.staticfree.SuperGenPass.ab:
    info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment this$0 -> bb
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment$2 -> info.staticfree.SuperGenPass.ac:
    info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment this$0 -> bb
    void <init>(info.staticfree.SuperGenPass.Super_Gen_Pass$VerifyFragment) -> <init>
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
info.staticfree.SuperGenPass.VisualHash -> info.staticfree.SuperGenPass.ad:
    int BYTES_PER_SHAPE -> bc
    int B_MASK -> bd
    int B_MAX -> be
    int B_OFFSET -> bf
    android.graphics.Path DIAMOND -> bg
    int G_MASK -> bh
    int G_MAX -> bi
    int G_OFFSET -> bj
    int ORIGIN_OFFSET -> bk
    android.graphics.Path PLUS -> bl
    int PRESCALE_CENTER_WIDTH -> bm
    int PRESCALE_HEIGHT -> bn
    int PRESCALE_WIDTH -> bo
    int RADIUS -> bp
    int R_MASK -> bq
    int R_MAX -> br
    int R_OFFSET -> bs
    int SHAPE_ALPHA -> bt
    int SPACING -> bu
    android.graphics.Path STAR -> bv
    java.lang.String TAG -> TAG
    android.graphics.Path TRIANGLE -> bw
    int TYPE_CIRCLE -> bx
    int TYPE_DIAMOND -> by
    int TYPE_MASK -> bz
    int TYPE_MAX -> bA
    int TYPE_OFFSET -> bB
    int TYPE_PLUS -> TYPE_PLUS
    int TYPE_SMALL_CIRCLE -> bC
    int TYPE_SQUARE -> bD
    int TYPE_STAR -> bE
    int TYPE_TRIANGLE -> bF
    int TYPE_X -> bG
    android.graphics.Path X -> bH
    int X_MASK -> bI
    int X_MAX -> bJ
    int X_OFFSET -> bK
    int Y_MASK -> bL
    int Y_MAX -> bM
    int Y_OFFSET -> bN
    byte[] mHash -> bO
    java.security.MessageDigest mMessageDigest -> bP
    float mScaleX -> bQ
    float mScaleY -> bR
    android.graphics.Paint p -> bS
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void init() -> V
    float scale(int,int,int) -> a
    int scaleInt(int,int,int) -> b
    void draw(android.graphics.Canvas) -> draw
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getOpacity() -> getOpacity
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setData(byte[]) -> setData
info.staticfree.SuperGenPass.VisualHashEditText -> info.staticfree.SuperGenPass.VisualHashEditText:
    boolean mShowVisualHash -> bT
    info.staticfree.SuperGenPass.VisualHash mVh -> bU
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void init(android.content.Context,android.util.AttributeSet) -> a
    void refreshVisualHash() -> W
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void setError(java.lang.CharSequence,android.graphics.drawable.Drawable) -> setError
    void setShowVisualHash(boolean) -> setShowVisualHash
info.staticfree.SuperGenPass.hashes.DomainBasedHash -> wy.e:
    java.util.regex.Pattern PATTERN_IP_ADDRESS -> bV
    boolean checkDomain -> bW
    java.util.ArrayList domains -> bX
    android.content.Context mContext -> mContext
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.lang.String generate(java.lang.String,java.lang.String,int) -> a
    java.lang.String generateWithFilteredDomain(java.lang.String,java.lang.String,int) -> b
    java.lang.String getDomain(java.lang.String) -> f
    void loadDomains() -> X
    void setCheckDomain(boolean) -> b
info.staticfree.SuperGenPass.hashes.HmacPin -> wy.f:
    void <init>(android.content.Context) -> <init>
    java.lang.String generateWithFilteredDomain(java.lang.String,java.lang.String,int) -> b
info.staticfree.SuperGenPass.hashes.HotpPin -> wy.g:
    java.lang.String[] BLACKLISTED_PINS -> bY
    java.lang.String TAG -> TAG
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.lang.String generateWithFilteredDomain(java.lang.String,java.lang.String,int) -> b
    boolean isBadPin(java.lang.String) -> g
    boolean isIncompleteNumericalRun(java.lang.String) -> h
    boolean isNumericalRun(java.lang.String) -> i
info.staticfree.SuperGenPass.hashes.PasswordComposer -> wy.h:
    java.lang.String TYPE -> TYPE
    java.security.MessageDigest md5 -> bZ
    void <init>(android.content.Context) -> <init>
    java.lang.String md5hex(byte[]) -> a
    java.lang.String generateWithFilteredDomain(java.lang.String,java.lang.String,int) -> b
info.staticfree.SuperGenPass.hashes.SuperGenPass -> wy.i:
    java.lang.String HASH_ALGORITHM_MD5 -> ca
    java.lang.String HASH_ALGORITHM_SHA512 -> cb
    java.lang.String TYPE -> TYPE
    java.lang.String TYPE_SHA_512 -> cc
    java.util.regex.Pattern validPassword -> cd
    java.security.MessageDigest mHasher -> ce
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,java.lang.String) -> <init>
    java.lang.String hashBase64(byte[]) -> b
    java.lang.String generateWithFilteredDomain(java.lang.String,java.lang.String,int) -> b
org.apache.commons.codec.BinaryDecoder -> wy.j:
    byte[] decode(byte[]) -> decode
org.apache.commons.codec.BinaryEncoder -> wy.k:
    byte[] encode(byte[]) -> c
org.apache.commons.codec.CharEncoding -> wy.l:
    java.lang.String ISO_8859_1 -> ISO_8859_1
    java.lang.String US_ASCII -> US_ASCII
    java.lang.String UTF_16 -> UTF_16
    java.lang.String UTF_16BE -> cf
    java.lang.String UTF_16LE -> cg
    java.lang.String UTF_8 -> UTF_8
    void <init>() -> <init>
org.apache.commons.codec.Charsets -> wy.m:
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.nio.charset.Charset UTF_16 -> UTF_16
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_8 -> UTF_8
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.nio.charset.Charset toCharset(java.lang.String) -> j
    java.nio.charset.Charset toCharset(java.nio.charset.Charset) -> a
org.apache.commons.codec.Decoder -> wy.n:
    java.lang.Object decode(java.lang.Object) -> b
org.apache.commons.codec.DecoderException -> wy.o:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.apache.commons.codec.Encoder -> wy.p:
    java.lang.Object encode(java.lang.Object) -> c
org.apache.commons.codec.EncoderException -> wy.q:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.apache.commons.codec.StringDecoder -> wy.r:
    java.lang.String decode(java.lang.String) -> decode
org.apache.commons.codec.StringEncoder -> wy.s:
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.StringEncoderComparator -> wy.t:
    org.apache.commons.codec.StringEncoder stringEncoder -> ch
    void <init>() -> <init>
    void <init>(org.apache.commons.codec.StringEncoder) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.commons.codec.binary.Base32 -> wy.u:
    int BITS_PER_ENCODED_BYTE -> ci
    int BYTES_PER_ENCODED_BLOCK -> cj
    int BYTES_PER_UNENCODED_BLOCK -> ck
    byte[] CHUNK_SEPARATOR -> cl
    byte[] DECODE_TABLE -> cm
    byte[] ENCODE_TABLE -> cn
    byte[] HEX_DECODE_TABLE -> co
    byte[] HEX_ENCODE_TABLE -> cp
    int MASK_5BITS -> cq
    int decodeSize -> cr
    byte[] decodeTable -> cs
    int encodeSize -> ct
    byte[] encodeTable -> cu
    byte[] lineSeparator -> cv
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,byte[]) -> <init>
    void <init>(int,byte[],boolean) -> <init>
    void <init>(boolean) -> <init>
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> a
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> b
    boolean isInAlphabet(byte) -> a
org.apache.commons.codec.binary.Base32InputStream -> wy.v:
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void <init>(java.io.InputStream,boolean,int,byte[]) -> <init>
org.apache.commons.codec.binary.Base32OutputStream -> wy.w:
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,boolean) -> <init>
    void <init>(java.io.OutputStream,boolean,int,byte[]) -> <init>
org.apache.commons.codec.binary.Base64 -> wy.x:
    int BITS_PER_ENCODED_BYTE -> ci
    int BYTES_PER_ENCODED_BLOCK -> cj
    int BYTES_PER_UNENCODED_BLOCK -> ck
    byte[] CHUNK_SEPARATOR -> cl
    byte[] DECODE_TABLE -> cm
    int MASK_6BITS -> cw
    byte[] STANDARD_ENCODE_TABLE -> cx
    byte[] URL_SAFE_ENCODE_TABLE -> cy
    int decodeSize -> cr
    byte[] decodeTable -> cs
    int encodeSize -> ct
    byte[] encodeTable -> cu
    byte[] lineSeparator -> cv
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,byte[]) -> <init>
    void <init>(int,byte[],boolean) -> <init>
    void <init>(boolean) -> <init>
    byte[] decodeBase64(java.lang.String) -> k
    byte[] decodeBase64(byte[]) -> d
    java.math.BigInteger decodeInteger(byte[]) -> e
    byte[] encodeBase64(byte[]) -> f
    byte[] encodeBase64(byte[],boolean) -> a
    byte[] encodeBase64(byte[],boolean,boolean) -> a
    byte[] encodeBase64(byte[],boolean,boolean,int) -> a
    byte[] encodeBase64Chunked(byte[]) -> g
    java.lang.String encodeBase64String(byte[]) -> h
    byte[] encodeBase64URLSafe(byte[]) -> i
    java.lang.String encodeBase64URLSafeString(byte[]) -> j
    byte[] encodeInteger(java.math.BigInteger) -> a
    boolean isArrayByteBase64(byte[]) -> k
    boolean isBase64(byte) -> b
    boolean isBase64(java.lang.String) -> l
    boolean isBase64(byte[]) -> l
    byte[] toIntegerBytes(java.math.BigInteger) -> b
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> a
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> b
    boolean isInAlphabet(byte) -> a
    boolean isUrlSafe() -> Y
org.apache.commons.codec.binary.Base64InputStream -> wy.y:
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void <init>(java.io.InputStream,boolean,int,byte[]) -> <init>
org.apache.commons.codec.binary.Base64OutputStream -> wy.z:
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,boolean) -> <init>
    void <init>(java.io.OutputStream,boolean,int,byte[]) -> <init>
org.apache.commons.codec.binary.BaseNCodec -> wy.aa:
    int DEFAULT_BUFFER_RESIZE_FACTOR -> cz
    int DEFAULT_BUFFER_SIZE -> cA
    int EOF -> cB
    int MASK_8BITS -> cC
    int MIME_CHUNK_SIZE -> cD
    byte PAD_DEFAULT -> cE
    int PEM_CHUNK_SIZE -> cF
    byte PAD -> cG
    int chunkSeparatorLength -> cH
    int encodedBlockSize -> cI
    int lineLength -> cJ
    int unencodedBlockSize -> cK
    void <init>(int,int,int,int) -> <init>
    boolean isWhiteSpace(byte) -> c
    byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context) -> a
    int available(org.apache.commons.codec.binary.BaseNCodec$Context) -> b
    boolean containsAlphabetOrPad(byte[]) -> m
    java.lang.Object decode(java.lang.Object) -> b
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> a
    byte[] decode(java.lang.String) -> m
    byte[] decode(byte[]) -> decode
    java.lang.Object encode(java.lang.Object) -> c
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> b
    byte[] encode(byte[]) -> c
    java.lang.String encodeAsString(byte[]) -> n
    java.lang.String encodeToString(byte[]) -> o
    byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context) -> a
    int getDefaultBufferSize() -> Z
    long getEncodedLength(byte[]) -> p
    boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context) -> c
    boolean isInAlphabet(byte) -> a
    boolean isInAlphabet(java.lang.String) -> n
    boolean isInAlphabet(byte[],boolean) -> b
    int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> c
org.apache.commons.codec.binary.BaseNCodec$Context -> wy.ab:
    byte[] buffer -> buffer
    int currentLinePos -> cL
    boolean eof -> eof
    int ibitWorkArea -> cM
    long lbitWorkArea -> cN
    int modulus -> cO
    int pos -> pos
    int readPos -> cP
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.apache.commons.codec.binary.BaseNCodecInputStream -> wy.ac:
    org.apache.commons.codec.binary.BaseNCodec baseNCodec -> cQ
    org.apache.commons.codec.binary.BaseNCodec$Context context -> cR
    boolean doEncode -> cS
    byte[] singleByte -> cT
    void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean) -> <init>
    int available() -> available
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
org.apache.commons.codec.binary.BaseNCodecOutputStream -> wy.ad:
    org.apache.commons.codec.binary.BaseNCodec baseNCodec -> cQ
    org.apache.commons.codec.binary.BaseNCodec$Context context -> cR
    boolean doEncode -> cS
    byte[] singleByte -> cT
    void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean) -> <init>
    void flush(boolean) -> c
    void close() -> close
    void flush() -> flush
    void write(int) -> write
    void write(byte[],int,int) -> write
org.apache.commons.codec.binary.BinaryCodec -> wy.ae:
    int[] BITS -> cU
    int BIT_0 -> cV
    int BIT_1 -> cW
    int BIT_2 -> cX
    int BIT_3 -> cY
    int BIT_4 -> cZ
    int BIT_5 -> da
    int BIT_6 -> db
    int BIT_7 -> dc
    byte[] EMPTY_BYTE_ARRAY -> dd
    char[] EMPTY_CHAR_ARRAY -> de
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    byte[] fromAscii(byte[]) -> q
    byte[] fromAscii(char[]) -> a
    boolean isEmpty(byte[]) -> r
    byte[] toAsciiBytes(byte[]) -> s
    char[] toAsciiChars(byte[]) -> t
    java.lang.String toAsciiString(byte[]) -> u
    java.lang.Object decode(java.lang.Object) -> b
    byte[] decode(byte[]) -> decode
    java.lang.Object encode(java.lang.Object) -> c
    byte[] encode(byte[]) -> c
    byte[] toByteArray(java.lang.String) -> o
org.apache.commons.codec.binary.Hex -> wy.af:
    java.nio.charset.Charset DEFAULT_CHARSET -> df
    java.lang.String DEFAULT_CHARSET_NAME -> dg
    char[] DIGITS_LOWER -> dh
    char[] DIGITS_UPPER -> di
    java.nio.charset.Charset charset -> dj
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.nio.charset.Charset) -> <init>
    byte[] decodeHex(char[]) -> b
    char[] encodeHex(byte[]) -> v
    char[] encodeHex(byte[],boolean) -> c
    char[] encodeHex(byte[],char[]) -> a
    java.lang.String encodeHexString(byte[]) -> w
    int toDigit(char,int) -> a
    java.lang.Object decode(java.lang.Object) -> b
    byte[] decode(byte[]) -> decode
    java.lang.Object encode(java.lang.Object) -> c
    byte[] encode(byte[]) -> c
    java.nio.charset.Charset getCharset() -> aa
    java.lang.String getCharsetName() -> getCharsetName
    java.lang.String toString() -> toString
org.apache.commons.codec.binary.StringUtils -> wy.ag:
    void <init>() -> <init>
    byte[] getBytes(java.lang.String,java.nio.charset.Charset) -> a
    byte[] getBytesIso8859_1(java.lang.String) -> p
    byte[] getBytesUnchecked(java.lang.String,java.lang.String) -> a
    byte[] getBytesUsAscii(java.lang.String) -> q
    byte[] getBytesUtf16(java.lang.String) -> r
    byte[] getBytesUtf16Be(java.lang.String) -> s
    byte[] getBytesUtf16Le(java.lang.String) -> t
    byte[] getBytesUtf8(java.lang.String) -> u
    java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException) -> a
    java.lang.String newString(byte[],java.lang.String) -> a
    java.lang.String newString(byte[],java.nio.charset.Charset) -> a
    java.lang.String newStringIso8859_1(byte[]) -> x
    java.lang.String newStringUsAscii(byte[]) -> y
    java.lang.String newStringUtf16(byte[]) -> z
    java.lang.String newStringUtf16Be(byte[]) -> A
    java.lang.String newStringUtf16Le(byte[]) -> B
    java.lang.String newStringUtf8(byte[]) -> C
org.apache.commons.codec.digest.B64 -> wy.ah:
    java.lang.String B64T -> dk
    void <init>() -> <init>
    void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder) -> a
    java.lang.String getRandomSalt(int) -> g
org.apache.commons.codec.digest.Crypt -> wy.ai:
    void <init>() -> <init>
    java.lang.String crypt(java.lang.String) -> v
    java.lang.String crypt(java.lang.String,java.lang.String) -> b
    java.lang.String crypt(byte[]) -> D
    java.lang.String crypt(byte[],java.lang.String) -> b
org.apache.commons.codec.digest.DigestUtils -> wy.aj:
    int STREAM_BUFFER_LENGTH -> dl
    void <init>() -> <init>
    byte[] digest(java.security.MessageDigest,java.io.InputStream) -> a
    java.security.MessageDigest getDigest(java.lang.String) -> w
    java.security.MessageDigest getMd2Digest() -> ab
    java.security.MessageDigest getMd5Digest() -> ac
    java.security.MessageDigest getSha1Digest() -> ad
    java.security.MessageDigest getSha256Digest() -> ae
    java.security.MessageDigest getSha384Digest() -> af
    java.security.MessageDigest getSha512Digest() -> ag
    java.security.MessageDigest getShaDigest() -> ah
    byte[] md2(java.io.InputStream) -> a
    byte[] md2(java.lang.String) -> x
    byte[] md2(byte[]) -> E
    java.lang.String md2Hex(java.io.InputStream) -> b
    java.lang.String md2Hex(java.lang.String) -> y
    java.lang.String md2Hex(byte[]) -> F
    byte[] md5(java.io.InputStream) -> c
    byte[] md5(java.lang.String) -> z
    byte[] md5(byte[]) -> G
    java.lang.String md5Hex(java.io.InputStream) -> d
    java.lang.String md5Hex(java.lang.String) -> A
    java.lang.String md5Hex(byte[]) -> H
    byte[] sha(java.io.InputStream) -> e
    byte[] sha(java.lang.String) -> B
    byte[] sha(byte[]) -> I
    byte[] sha1(java.io.InputStream) -> f
    byte[] sha1(java.lang.String) -> C
    byte[] sha1(byte[]) -> J
    java.lang.String sha1Hex(java.io.InputStream) -> g
    java.lang.String sha1Hex(java.lang.String) -> D
    java.lang.String sha1Hex(byte[]) -> K
    byte[] sha256(java.io.InputStream) -> h
    byte[] sha256(java.lang.String) -> E
    byte[] sha256(byte[]) -> L
    java.lang.String sha256Hex(java.io.InputStream) -> i
    java.lang.String sha256Hex(java.lang.String) -> F
    java.lang.String sha256Hex(byte[]) -> M
    byte[] sha384(java.io.InputStream) -> j
    byte[] sha384(java.lang.String) -> G
    byte[] sha384(byte[]) -> N
    java.lang.String sha384Hex(java.io.InputStream) -> k
    java.lang.String sha384Hex(java.lang.String) -> H
    java.lang.String sha384Hex(byte[]) -> O
    byte[] sha512(java.io.InputStream) -> l
    byte[] sha512(java.lang.String) -> I
    byte[] sha512(byte[]) -> P
    java.lang.String sha512Hex(java.io.InputStream) -> m
    java.lang.String sha512Hex(java.lang.String) -> J
    java.lang.String sha512Hex(byte[]) -> Q
    java.lang.String shaHex(java.io.InputStream) -> n
    java.lang.String shaHex(java.lang.String) -> K
    java.lang.String shaHex(byte[]) -> R
    java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream) -> b
    java.security.MessageDigest updateDigest(java.security.MessageDigest,java.lang.String) -> a
    java.security.MessageDigest updateDigest(java.security.MessageDigest,byte[]) -> a
org.apache.commons.codec.digest.Md5Crypt -> wy.ak:
    java.lang.String APR1_PREFIX -> dm
    int BLOCKSIZE -> dn
    java.lang.String MD5_PREFIX -> do
    int ROUNDS -> dp
    void <init>() -> <init>
    java.lang.String apr1Crypt(java.lang.String) -> L
    java.lang.String apr1Crypt(java.lang.String,java.lang.String) -> c
    java.lang.String apr1Crypt(byte[]) -> S
    java.lang.String apr1Crypt(byte[],java.lang.String) -> c
    java.lang.String md5Crypt(byte[]) -> T
    java.lang.String md5Crypt(byte[],java.lang.String) -> d
    java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String) -> a
org.apache.commons.codec.digest.MessageDigestAlgorithms -> wy.al:
    java.lang.String MD2 -> dq
    java.lang.String MD5 -> dr
    java.lang.String SHA_1 -> ds
    java.lang.String SHA_256 -> dt
    java.lang.String SHA_384 -> du
    java.lang.String SHA_512 -> dv
    void <init>() -> <init>
org.apache.commons.codec.digest.Sha2Crypt -> wy.am:
    int ROUNDS_DEFAULT -> dw
    int ROUNDS_MAX -> dx
    int ROUNDS_MIN -> dy
    java.lang.String ROUNDS_PREFIX -> dz
    java.util.regex.Pattern SALT_PATTERN -> dA
    int SHA256_BLOCKSIZE -> dB
    java.lang.String SHA256_PREFIX -> dC
    int SHA512_BLOCKSIZE -> dD
    java.lang.String SHA512_PREFIX -> dE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String sha256Crypt(byte[]) -> U
    java.lang.String sha256Crypt(byte[],java.lang.String) -> e
    java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String) -> a
    java.lang.String sha512Crypt(byte[]) -> V
    java.lang.String sha512Crypt(byte[],java.lang.String) -> f
org.apache.commons.codec.digest.UnixCrypt -> wy.an:
    int[] CON_SALT -> dF
    int[] COV2CHAR -> dG
    char[] SALT_CHARS -> dH
    boolean[] SHIFT2 -> dI
    int[][] SKB -> dJ
    int[][] SPTRANS -> dK
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int[] body(int[],int,int) -> a
    int byteToUnsigned(byte) -> d
    java.lang.String crypt(java.lang.String) -> v
    java.lang.String crypt(java.lang.String,java.lang.String) -> b
    java.lang.String crypt(byte[]) -> D
    java.lang.String crypt(byte[],java.lang.String) -> b
    int dEncrypt(int,int,int,int,int,int[]) -> a
    int[] desSetKey(byte[]) -> W
    int fourBytesToInt(byte[],int) -> a
    int hPermOp(int,int,int) -> c
    void intToFourBytes(int,byte[],int) -> a
    void permOp(int,int,int,int,int[]) -> a
org.apache.commons.codec.language.AbstractCaverphone -> wy.ao:
    void <init>() -> <init>
    java.lang.Object encode(java.lang.Object) -> c
    boolean isEncodeEqual(java.lang.String,java.lang.String) -> d
org.apache.commons.codec.language.Caverphone -> wy.ap:
    org.apache.commons.codec.language.Caverphone2 encoder -> dL
    void <init>() -> <init>
    java.lang.String caverphone(java.lang.String) -> M
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    boolean isCaverphoneEqual(java.lang.String,java.lang.String) -> e
org.apache.commons.codec.language.Caverphone1 -> wy.aq:
    java.lang.String SIX_1 -> dM
    void <init>() -> <init>
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.language.Caverphone2 -> wy.ar:
    java.lang.String TEN_1 -> dN
    void <init>() -> <init>
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.language.ColognePhonetic -> wy.as:
    char[] AEIJOUY -> dO
    char[] AHKLOQRUX -> dP
    char[] AHOUKQX -> dQ
    char[] CKQ -> dR
    char[] GKQ -> dS
    char[][] PREPROCESS_MAP -> dT
    char[] SCZ -> dU
    char[] SZ -> dV
    char[] TDX -> dW
    char[] WFPV -> dX
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean arrayContains(char[],char) -> a
    java.lang.String preprocess(java.lang.String) -> N
    java.lang.String colognePhonetic(java.lang.String) -> O
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    boolean isEncodeEqual(java.lang.String,java.lang.String) -> d
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer -> wy.at:
    char[] data -> data
    int length -> length
    org.apache.commons.codec.language.ColognePhonetic this$0 -> dY
    void <init>(org.apache.commons.codec.language.ColognePhonetic,int) -> <init>
    void <init>(org.apache.commons.codec.language.ColognePhonetic,char[]) -> <init>
    char[] copyData(int,int) -> a
    int length() -> length
    java.lang.String toString() -> toString
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer -> wy.au:
    org.apache.commons.codec.language.ColognePhonetic this$0 -> dY
    void <init>(org.apache.commons.codec.language.ColognePhonetic,char[]) -> <init>
    void addLeft(char) -> a
    char[] copyData(int,int) -> a
    char getNextChar() -> ai
    int getNextPos() -> aj
    char removeNext() -> ak
org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer -> wy.av:
    org.apache.commons.codec.language.ColognePhonetic this$0 -> dY
    void <init>(org.apache.commons.codec.language.ColognePhonetic,int) -> <init>
    void addRight(char) -> b
    char[] copyData(int,int) -> a
org.apache.commons.codec.language.DoubleMetaphone -> wy.aw:
    java.lang.String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER -> dZ
    java.lang.String[] L_R_N_M_B_H_F_V_W_SPACE -> ea
    java.lang.String[] L_T_K_S_N_M_B_Z -> eb
    java.lang.String[] SILENT_START -> ec
    java.lang.String VOWELS -> ed
    int maxCodeLen -> ee
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String cleanInput(java.lang.String) -> P
    boolean conditionC0(java.lang.String,int) -> a
    boolean conditionCH0(java.lang.String,int) -> b
    boolean conditionCH1(java.lang.String,int) -> c
    boolean conditionL0(java.lang.String,int) -> d
    boolean conditionM0(java.lang.String,int) -> e
    boolean contains(java.lang.String,int,int,java.lang.String[]) -> a
    int handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> a
    int handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> a
    int handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> b
    int handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> c
    int handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> d
    int handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> a
    int handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> e
    int handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> f
    int handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> b
    int handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> g
    int handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> h
    int handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> c
    int handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> d
    int handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> i
    int handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> j
    int handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> k
    int handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> l
    int handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> e
    boolean isSilentStart(java.lang.String) -> Q
    boolean isSlavoGermanic(java.lang.String) -> R
    boolean isVowel(char) -> c
    char charAt(java.lang.String,int) -> f
    java.lang.String doubleMetaphone(java.lang.String) -> S
    java.lang.String doubleMetaphone(java.lang.String,boolean) -> a
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    int getMaxCodeLen() -> al
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String) -> f
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean) -> a
    void setMaxCodeLen(int) -> h
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult -> wy.ax:
    java.lang.StringBuilder alternate -> ef
    int maxLength -> maxLength
    java.lang.StringBuilder primary -> eg
    org.apache.commons.codec.language.DoubleMetaphone this$0 -> eh
    void <init>(org.apache.commons.codec.language.DoubleMetaphone,int) -> <init>
    void append(char) -> append
    void append(char,char) -> a
    void append(java.lang.String) -> append
    void append(java.lang.String,java.lang.String) -> g
    void appendAlternate(char) -> d
    void appendAlternate(java.lang.String) -> T
    void appendPrimary(char) -> e
    void appendPrimary(java.lang.String) -> U
    java.lang.String getAlternate() -> am
    java.lang.String getPrimary() -> an
    boolean isComplete() -> isComplete
org.apache.commons.codec.language.MatchRatingApproachEncoder -> wy.ay:
    java.lang.String[] DOUBLE_CONSONANT -> ei
    int EIGHT -> ej
    int ELEVEN -> ek
    java.lang.String EMPTY -> el
    int FIVE -> em
    int FOUR -> en
    int ONE -> eo
    java.lang.String PLAIN_ASCII -> ep
    int SEVEN -> eq
    int SIX -> er
    java.lang.String SPACE -> es
    int THREE -> et
    int TWELVE -> eu
    int TWO -> ev
    java.lang.String UNICODE -> ew
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String cleanName(java.lang.String) -> V
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String getFirst3Last3(java.lang.String) -> W
    int getMinRating(int) -> i
    boolean isEncodeEquals(java.lang.String,java.lang.String) -> h
    boolean isVowel(java.lang.String) -> X
    int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String) -> i
    java.lang.String removeAccents(java.lang.String) -> Y
    java.lang.String removeDoubleConsonants(java.lang.String) -> Z
    java.lang.String removeVowels(java.lang.String) -> aa
org.apache.commons.codec.language.Metaphone -> wy.az:
    java.lang.String FRONTV -> ex
    java.lang.String VARSON -> ey
    java.lang.String VOWELS -> ed
    int maxCodeLen -> ee
    void <init>() -> <init>
    boolean isLastChar(int,int) -> b
    boolean isNextChar(java.lang.StringBuilder,int,char) -> a
    boolean isPreviousChar(java.lang.StringBuilder,int,char) -> b
    boolean isVowel(java.lang.StringBuilder,int) -> a
    boolean regionMatch(java.lang.StringBuilder,int,java.lang.String) -> a
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    int getMaxCodeLen() -> al
    boolean isMetaphoneEqual(java.lang.String,java.lang.String) -> j
    java.lang.String metaphone(java.lang.String) -> ab
    void setMaxCodeLen(int) -> h
org.apache.commons.codec.language.Nysiis -> wy.ba:
    char[] CHARS_A -> ez
    char[] CHARS_AF -> eA
    char[] CHARS_C -> eB
    char[] CHARS_FF -> eC
    char[] CHARS_G -> eD
    char[] CHARS_N -> eE
    char[] CHARS_NN -> eF
    char[] CHARS_S -> eG
    char[] CHARS_SSS -> eH
    java.util.regex.Pattern PAT_DT_ETC -> eI
    java.util.regex.Pattern PAT_EE_IE -> eJ
    java.util.regex.Pattern PAT_K -> eK
    java.util.regex.Pattern PAT_KN -> eL
    java.util.regex.Pattern PAT_MAC -> eM
    java.util.regex.Pattern PAT_PH_PF -> eN
    java.util.regex.Pattern PAT_SCH -> eO
    char SPACE -> eP
    int TRUE_LENGTH -> eQ
    boolean strict -> eR
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    boolean isVowel(char) -> c
    char[] transcodeRemaining(char,char,char,char) -> a
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    boolean isStrict() -> ao
    java.lang.String nysiis(java.lang.String) -> ac
org.apache.commons.codec.language.RefinedSoundex -> wy.bb:
    org.apache.commons.codec.language.RefinedSoundex US_ENGLISH -> eS
    char[] US_ENGLISH_MAPPING -> eT
    java.lang.String US_ENGLISH_MAPPING_STRING -> eU
    char[] soundexMapping -> eV
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(char[]) -> <init>
    int difference(java.lang.String,java.lang.String) -> k
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    char getMappingCode(char) -> f
    java.lang.String soundex(java.lang.String) -> ad
org.apache.commons.codec.language.Soundex -> wy.bc:
    org.apache.commons.codec.language.Soundex US_ENGLISH -> eW
    char[] US_ENGLISH_MAPPING -> eT
    java.lang.String US_ENGLISH_MAPPING_STRING -> eU
    int maxLength -> maxLength
    char[] soundexMapping -> eV
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(char[]) -> <init>
    char getMappingCode(java.lang.String,int) -> g
    char[] getSoundexMapping() -> ap
    char map(char) -> g
    int difference(java.lang.String,java.lang.String) -> k
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    int getMaxLength() -> aq
    void setMaxLength(int) -> j
    java.lang.String soundex(java.lang.String) -> ad
org.apache.commons.codec.language.SoundexUtils -> wy.bd:
    void <init>() -> <init>
    java.lang.String clean(java.lang.String) -> ae
    int difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String) -> a
    int differenceEncoded(java.lang.String,java.lang.String) -> l
org.apache.commons.codec.language.bm.BeiderMorseEncoder -> wy.be:
    org.apache.commons.codec.language.bm.PhoneticEngine engine -> eX
    void <init>() -> <init>
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    org.apache.commons.codec.language.bm.NameType getNameType() -> ar
    org.apache.commons.codec.language.bm.RuleType getRuleType() -> as
    boolean isConcat() -> at
    void setConcat(boolean) -> d
    void setMaxPhonemes(int) -> k
    void setNameType(org.apache.commons.codec.language.bm.NameType) -> a
    void setRuleType(org.apache.commons.codec.language.bm.RuleType) -> a
org.apache.commons.codec.language.bm.Lang -> wy.bf:
    java.lang.String LANGUAGE_RULES_RN -> eY
    java.util.Map Langs -> eZ
    org.apache.commons.codec.language.bm.Languages languages -> fa
    java.util.List rules -> fb
    void <clinit>() -> <clinit>
    void <init>(java.util.List,org.apache.commons.codec.language.bm.Languages) -> <init>
    org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType) -> b
    org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages) -> a
    java.lang.String guessLanguage(java.lang.String) -> af
    org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String) -> ag
org.apache.commons.codec.language.bm.Lang$1 -> wy.bg:
org.apache.commons.codec.language.bm.Lang$LangRule -> wy.bh:
    boolean acceptOnMatch -> fc
    java.util.Set languages -> fd
    java.util.regex.Pattern pattern -> fe
    void <init>(java.util.regex.Pattern,java.util.Set,boolean) -> <init>
    void <init>(java.util.regex.Pattern,java.util.Set,boolean,org.apache.commons.codec.language.bm.Lang$1) -> <init>
    boolean access$100(org.apache.commons.codec.language.bm.Lang$LangRule) -> a
    java.util.Set access$200(org.apache.commons.codec.language.bm.Lang$LangRule) -> b
    boolean matches(java.lang.String) -> matches
org.apache.commons.codec.language.bm.Languages -> wy.bi:
    java.lang.String ANY -> ff
    org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE -> fg
    java.util.Map LANGUAGES -> fh
    org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES -> fi
    java.util.Set languages -> fd
    void <clinit>() -> <clinit>
    void <init>(java.util.Set) -> <init>
    org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String) -> ah
    org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType) -> c
    java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType) -> d
    java.util.Set getLanguages() -> au
org.apache.commons.codec.language.bm.Languages$1 -> wy.bj:
    void <init>() -> <init>
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> av
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> aw
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Languages$2 -> wy.bk:
    void <init>() -> <init>
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> av
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> aw
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Languages$LanguageSet -> wy.bl:
    void <init>() -> <init>
    org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set) -> a
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> av
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> aw
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
org.apache.commons.codec.language.bm.Languages$SomeLanguages -> wy.bm:
    java.util.Set languages -> fd
    void <init>(java.util.Set) -> <init>
    void <init>(java.util.Set,org.apache.commons.codec.language.bm.Languages$1) -> <init>
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> av
    java.util.Set getLanguages() -> au
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> aw
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.NameType -> wy.bn:
    org.apache.commons.codec.language.bm.NameType[] $VALUES -> fj
    org.apache.commons.codec.language.bm.NameType ASHKENAZI -> fk
    org.apache.commons.codec.language.bm.NameType GENERIC -> fl
    org.apache.commons.codec.language.bm.NameType SEPHARDIC -> fm
    java.lang.String name -> name
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    org.apache.commons.codec.language.bm.NameType valueOf(java.lang.String) -> valueOf
    org.apache.commons.codec.language.bm.NameType[] values() -> values
    java.lang.String getName() -> getName
org.apache.commons.codec.language.bm.PhoneticEngine -> wy.bo:
    int DEFAULT_MAX_PHONEMES -> fn
    java.util.Map NAME_PREFIXES -> fo
    boolean concat -> fp
    org.apache.commons.codec.language.bm.Lang lang -> fq
    int maxPhonemes -> fr
    org.apache.commons.codec.language.bm.NameType nameType -> fs
    org.apache.commons.codec.language.bm.RuleType ruleType -> ft
    void <clinit>() -> <clinit>
    void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean) -> <init>
    void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int) -> <init>
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List) -> a
    java.lang.CharSequence cacheSubSequence(java.lang.CharSequence) -> b
    java.lang.String join(java.lang.Iterable,java.lang.String) -> b
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
    org.apache.commons.codec.language.bm.Lang getLang() -> ax
    int getMaxPhonemes() -> ay
    org.apache.commons.codec.language.bm.NameType getNameType() -> ar
    org.apache.commons.codec.language.bm.RuleType getRuleType() -> as
    boolean isConcat() -> at
org.apache.commons.codec.language.bm.PhoneticEngine$1 -> wy.bp:
    java.lang.CharSequence[][] val$cache -> fu
    java.lang.CharSequence val$cached -> fv
    void <init>(java.lang.CharSequence,java.lang.CharSequence[][]) -> <init>
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
org.apache.commons.codec.language.bm.PhoneticEngine$2 -> wy.bq:
    int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType -> fw
    void <clinit>() -> <clinit>
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder -> wy.br:
    java.util.Set phonemes -> fx
    void <init>(java.util.Set) -> <init>
    void <init>(java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$1) -> <init>
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> b
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder append(java.lang.CharSequence) -> c
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int) -> a
    java.util.Set getPhonemes() -> az
    java.lang.String makeString() -> aA
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication -> wy.bs:
    java.util.List finalRules -> fy
    boolean found -> fz
    int i -> fA
    java.lang.CharSequence input -> fB
    int maxPhonemes -> fr
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder -> fC
    void <init>(java.util.List,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int) -> <init>
    int getI() -> aB
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder() -> aC
    org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke() -> aD
    boolean isFound() -> aE
org.apache.commons.codec.language.bm.ResourceConstants -> wy.bt:
    java.lang.String CMT -> fD
    java.lang.String ENCODING -> ENCODING
    java.lang.String EXT_CMT_END -> fE
    java.lang.String EXT_CMT_START -> fF
    void <init>() -> <init>
org.apache.commons.codec.language.bm.Rule -> wy.bu:
    java.lang.String ALL -> fG
    org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER -> fH
    java.lang.String DOUBLE_QUOTE -> fI
    java.lang.String HASH_INCLUDE -> fJ
    java.util.Map RULES -> fK
    org.apache.commons.codec.language.bm.Rule$RPattern lContext -> fL
    java.lang.String pattern -> fM
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme -> fN
    org.apache.commons.codec.language.bm.Rule$RPattern rContext -> fO
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr) -> <init>
    boolean access$100(java.lang.CharSequence,java.lang.CharSequence) -> b
    boolean access$200(java.lang.CharSequence,java.lang.CharSequence) -> c
    boolean access$300(java.lang.CharSequence,char) -> a
    boolean contains(java.lang.CharSequence,char) -> b
    java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> a
    java.util.Scanner createScanner(java.lang.String) -> ai
    java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> b
    boolean endsWith(java.lang.CharSequence,java.lang.CharSequence) -> d
    java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> c
    java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> a
    org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String) -> aj
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String) -> ak
    java.util.List parseRules(java.util.Scanner,java.lang.String) -> a
    org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String) -> al
    boolean startsWith(java.lang.CharSequence,java.lang.CharSequence) -> e
    java.lang.String stripQuotes(java.lang.String) -> am
    org.apache.commons.codec.language.bm.Rule$RPattern getLContext() -> aF
    java.lang.String getPattern() -> getPattern
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme() -> aG
    org.apache.commons.codec.language.bm.Rule$RPattern getRContext() -> aH
    boolean patternAndContextMatches(java.lang.CharSequence,int) -> a
org.apache.commons.codec.language.bm.Rule$1 -> wy.bv:
    void <init>() -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$10 -> wy.bw:
    java.util.regex.Pattern pattern -> fe
    java.lang.String val$regex -> fP
    void <init>(java.lang.String) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$2 -> wy.bx:
    java.lang.String loc -> fQ
    int myLine -> fR
    int val$cLine -> fS
    java.lang.String val$location -> fT
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Rule$3 -> wy.by:
    void <init>() -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$4 -> wy.bz:
    java.lang.String val$content -> fU
    void <init>(java.lang.String) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$5 -> wy.ca:
    java.lang.String val$content -> fU
    void <init>(java.lang.String) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$6 -> wy.cb:
    java.lang.String val$content -> fU
    void <init>(java.lang.String) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$7 -> wy.cc:
    java.lang.String val$bContent -> fV
    boolean val$shouldMatch -> fW
    void <init>(java.lang.String,boolean) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$8 -> wy.cd:
    java.lang.String val$bContent -> fV
    boolean val$shouldMatch -> fW
    void <init>(java.lang.String,boolean) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$9 -> wy.ce:
    java.lang.String val$bContent -> fV
    boolean val$shouldMatch -> fW
    void <init>(java.lang.String,boolean) -> <init>
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.Rule$Phoneme -> wy.cf:
    java.util.Comparator COMPARATOR -> fX
    org.apache.commons.codec.language.bm.Languages$LanguageSet languages -> fY
    java.lang.CharSequence phonemeText -> fZ
    void <clinit>() -> <clinit>
    void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> <init>
    java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme) -> a
    org.apache.commons.codec.language.bm.Rule$Phoneme append(java.lang.CharSequence) -> e
    org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages() -> aI
    java.lang.CharSequence getPhonemeText() -> aJ
    java.lang.Iterable getPhonemes() -> aK
    org.apache.commons.codec.language.bm.Rule$Phoneme join(org.apache.commons.codec.language.bm.Rule$Phoneme) -> b
org.apache.commons.codec.language.bm.Rule$Phoneme$1 -> wy.cg:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compare(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme) -> a
org.apache.commons.codec.language.bm.Rule$PhonemeExpr -> wy.ch:
    java.lang.Iterable getPhonemes() -> aK
org.apache.commons.codec.language.bm.Rule$PhonemeList -> wy.ci:
    java.util.List phonemes -> ga
    void <init>(java.util.List) -> <init>
    java.lang.Iterable getPhonemes() -> aK
    java.util.List getPhonemes() -> aL
org.apache.commons.codec.language.bm.Rule$RPattern -> wy.cj:
    boolean isMatch(java.lang.CharSequence) -> d
org.apache.commons.codec.language.bm.RuleType -> wy.ck:
    org.apache.commons.codec.language.bm.RuleType[] $VALUES -> gb
    org.apache.commons.codec.language.bm.RuleType APPROX -> gc
    org.apache.commons.codec.language.bm.RuleType EXACT -> gd
    org.apache.commons.codec.language.bm.RuleType RULES -> ge
    java.lang.String name -> name
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    org.apache.commons.codec.language.bm.RuleType valueOf(java.lang.String) -> valueOf
    org.apache.commons.codec.language.bm.RuleType[] values() -> values
    java.lang.String getName() -> getName
org.apache.commons.codec.net.BCodec -> wy.cl:
    java.nio.charset.Charset charset -> dj
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.nio.charset.Charset) -> <init>
    java.lang.Object decode(java.lang.Object) -> b
    java.lang.String decode(java.lang.String) -> decode
    byte[] doDecoding(byte[]) -> X
    byte[] doEncoding(byte[]) -> Y
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> b
    java.nio.charset.Charset getCharset() -> aa
    java.lang.String getDefaultCharset() -> aM
    java.lang.String getEncoding() -> getEncoding
org.apache.commons.codec.net.QCodec -> wy.cm:
    byte BLANK -> gf
    java.util.BitSet PRINTABLE_CHARS -> gg
    byte UNDERSCORE -> gh
    java.nio.charset.Charset charset -> dj
    boolean encodeBlanks -> gi
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.nio.charset.Charset) -> <init>
    java.lang.Object decode(java.lang.Object) -> b
    java.lang.String decode(java.lang.String) -> decode
    byte[] doDecoding(byte[]) -> X
    byte[] doEncoding(byte[]) -> Y
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> b
    java.nio.charset.Charset getCharset() -> aa
    java.lang.String getDefaultCharset() -> aM
    java.lang.String getEncoding() -> getEncoding
    boolean isEncodeBlanks() -> aN
    void setEncodeBlanks(boolean) -> e
org.apache.commons.codec.net.QuotedPrintableCodec -> wy.cn:
    byte ESCAPE_CHAR -> gj
    java.util.BitSet PRINTABLE_CHARS -> gg
    byte SPACE -> gk
    byte TAB -> gl
    java.nio.charset.Charset charset -> dj
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.nio.charset.Charset) -> <init>
    byte[] decodeQuotedPrintable(byte[]) -> Z
    void encodeQuotedPrintable(int,java.io.ByteArrayOutputStream) -> a
    byte[] encodeQuotedPrintable(java.util.BitSet,byte[]) -> a
    java.lang.Object decode(java.lang.Object) -> b
    java.lang.String decode(java.lang.String) -> decode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    java.lang.String decode(java.lang.String,java.nio.charset.Charset) -> c
    byte[] decode(byte[]) -> decode
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> b
    byte[] encode(byte[]) -> c
    java.nio.charset.Charset getCharset() -> aa
    java.lang.String getDefaultCharset() -> aM
org.apache.commons.codec.net.RFC1522Codec -> wy.co:
    java.lang.String POSTFIX -> gm
    java.lang.String PREFIX -> PREFIX
    char SEP -> gn
    void <init>() -> <init>
    java.lang.String decodeText(java.lang.String) -> an
    byte[] doDecoding(byte[]) -> X
    byte[] doEncoding(byte[]) -> Y
    java.lang.String encodeText(java.lang.String,java.lang.String) -> m
    java.lang.String encodeText(java.lang.String,java.nio.charset.Charset) -> d
    java.lang.String getEncoding() -> getEncoding
org.apache.commons.codec.net.URLCodec -> wy.cp:
    byte ESCAPE_CHAR -> gj
    int RADIX -> gp
    java.util.BitSet WWW_FORM_URL -> gq
    java.lang.String charset -> gr
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    byte[] decodeUrl(byte[]) -> aa
    byte[] encodeUrl(java.util.BitSet,byte[]) -> b
    java.lang.Object decode(java.lang.Object) -> b
    java.lang.String decode(java.lang.String) -> decode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    byte[] decode(byte[]) -> decode
    java.lang.Object encode(java.lang.Object) -> c
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    byte[] encode(byte[]) -> c
    java.lang.String getDefaultCharset() -> aM
    java.lang.String getEncoding() -> getEncoding
org.apache.commons.codec.net.Utils -> wy.cq:
    void <init>() -> <init>
    int digit16(byte) -> e
org.openauthentication.otp.OneTimePasswordAlgorithm -> wy.cr:
    int[] DIGITS_POWER -> gs
    int[] doubleDigits -> gt
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int calcChecksum(long,int) -> a
    java.lang.String generateOTP(byte[],long,int,boolean,int) -> a
    java.lang.String generateOTPFromText(byte[],byte[],int,boolean,int) -> a
    byte[] hmac_sha1(byte[],byte[]) -> a
