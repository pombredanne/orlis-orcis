android.support.v4.view.ViewCompat -> android.support.v4.view.ViewCompat:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void <clinit>() -> <clinit>
android.support.v4.view.ViewCompat$Api21ViewCompatImpl -> android.support.v4.view.ViewCompat$Api21ViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ViewCompat$BaseViewCompatImpl:
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap -> a
    void <init>() -> <init>
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.ViewCompat$GBViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ViewCompat$HCViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ViewCompat$ICSViewCompatImpl:
    boolean accessibilityDelegateCheckFailed -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ViewCompat$JBViewCompatImpl:
    void <init>() -> <init>
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.ViewCompat$KitKatViewCompatImpl:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ViewCompat$ViewCompatImpl:
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ViewCompatJB:
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.EdgeEffectCompat:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void <init>(android.content.Context) -> <init>
    void setSize(int,int) -> setSize
    boolean isFinished() -> isFinished
    boolean onPull(float) -> onPull
    boolean onRelease() -> onRelease
    boolean draw(android.graphics.Canvas) -> draw
    void <clinit>() -> <clinit>
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl:
    void <init>() -> <init>
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl:
    void <init>() -> <init>
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.EdgeEffectCompatIcs:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
com.gk.datacontrol.DBClass -> com.gk.datacontrol.DBClass:
    int exercisesInDay -> a
    int exerciseDays -> b
    int setsInDay -> c
    int setDays -> d
    android.database.sqlite.SQLiteDatabase realdb -> e
    com.gk.datacontrol.DBClass$DBHelper dbHelper -> f
    android.content.ContentValues values -> g
    void <init>(android.content.Context) -> <init>
    void close() -> close
    void open() -> open
    java.lang.String millisToDate(long) -> millisToDate
    long maximizeTimeOfDay(long) -> maximizeTimeOfDay
    boolean isSameDay(long,long) -> isSameDay
    int deleteEx(android.database.Cursor) -> deleteEx
    int rmExLogEntry(long,int) -> rmExLogEntry
    int rmSetLogEntry(android.database.Cursor) -> rmSetLogEntry
    long insertExerciseNote(java.lang.String,java.lang.String) -> insertExerciseNote
    long insertSetNote(java.lang.String,java.lang.String) -> insertSetNote
    long getTimeForEx(java.lang.String) -> getTimeForEx
    long insertSet(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> insertSet
    long insertSet(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long) -> insertSet
    android.database.Cursor fetchSetsForExercise(java.lang.String) -> fetchSetsForExercise
    android.database.Cursor fetchExerciseHistory() -> fetchExerciseHistory
    android.database.Cursor fetchExerciseNames(java.lang.CharSequence) -> fetchExerciseNames
    boolean addExercise(java.lang.String) -> addExercise
    boolean logExercise(java.lang.String) -> logExercise
    boolean logExercise(java.lang.String,long) -> logExercise
    boolean haveSetsWithExId(long) -> haveSetsWithExId
    boolean updateExercise(java.lang.String,java.lang.String) -> updateExercise
    boolean updateSetLog(java.lang.String,java.lang.String,java.lang.String) -> updateSetLog
    void cleanAllTables() -> cleanAllTables
com.gk.datacontrol.DBClass$DBHelper -> com.gk.datacontrol.DBClass$DBHelper:
    com.gk.datacontrol.DBClass this$0 -> a
    void <init>(com.gk.datacontrol.DBClass,android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.gk.datacontrol.DataPointParcel -> com.gk.datacontrol.DataPointParcel:
    java.util.ArrayList dataPoints -> a
    void <init>() -> <init>
    java.util.ArrayList restoreData() -> restoreData
    void addPoint(com.jjoe64.graphview.series.DataPoint) -> addPoint
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.gk.datacontrol.ExerciseDataCursorLoader -> com.gk.datacontrol.ExerciseDataCursorLoader:
    com.gk.datacontrol.DBClass db -> a
    void <init>(android.content.Context,com.gk.datacontrol.DBClass) -> <init>
    android.database.Cursor loadInBackground() -> loadInBackground
    java.lang.Object loadInBackground() -> loadInBackground
com.gk.datacontrol.SetDataCursorLoader -> com.gk.datacontrol.SetDataCursorLoader:
    com.gk.datacontrol.DBClass db -> a
    java.lang.String targetEx -> b
    void <init>(android.content.Context,com.gk.datacontrol.DBClass,android.database.Cursor) -> <init>
    void renewTargetEx(android.database.Cursor) -> renewTargetEx
    void renewTargetEx(java.lang.String) -> renewTargetEx
    android.database.Cursor loadInBackground() -> loadInBackground
    java.lang.Object loadInBackground() -> loadInBackground
com.gk.reports.ExerciseReportContainer -> com.gk.reports.ExerciseReportContainer:
    int MISC_TAB -> b
    int GRAPH_TAB -> c
    java.util.List fragList -> a
    void <init>() -> <init>
    void setMonthsToTitle(android.app.ActionBar,int) -> setMonthsToTitle
    double actualizeValue(double,double,com.gk.reports.ExerciseReportContainer$PointType) -> actualizeValue
    double calculateStats(java.lang.String,int,com.gk.reports.ExerciseReportContainer$PointType,com.gk.reports.ExerciseReportContainer$PointType,android.os.Bundle) -> calculateStats
    void onCreate(android.os.Bundle) -> onCreate
com.gk.reports.ExerciseReportContainer$1 -> com.gk.reports.ExerciseReportContainer$1:
    android.os.Bundle val$data -> a
    com.gk.reports.ExerciseReportContainer this$0 -> b
    void <init>(com.gk.reports.ExerciseReportContainer,android.os.Bundle) -> <init>
    void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabSelected
    void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabUnselected
    void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabReselected
com.gk.reports.ExerciseReportContainer$2 -> com.gk.reports.ExerciseReportContainer$2:
    int[] $SwitchMap$com$gk$reports$ExerciseReportContainer$PointType -> a
    void <clinit>() -> <clinit>
com.gk.reports.ExerciseReportContainer$PointType -> com.gk.reports.ExerciseReportContainer$PointType:
    com.gk.reports.ExerciseReportContainer$PointType NONE -> a
    com.gk.reports.ExerciseReportContainer$PointType MIN -> b
    com.gk.reports.ExerciseReportContainer$PointType MAX -> c
    com.gk.reports.ExerciseReportContainer$PointType AVG -> d
    com.gk.reports.ExerciseReportContainer$PointType SUM -> e
    int value -> f
    com.gk.reports.ExerciseReportContainer$PointType[] $VALUES -> g
    com.gk.reports.ExerciseReportContainer$PointType[] values() -> values
    com.gk.reports.ExerciseReportContainer$PointType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.gk.reports.ExerciseReportContainer$PointType fromInteger(int) -> fromInteger
    void <clinit>() -> <clinit>
com.gk.reports.ReportConfigurator -> com.gk.reports.ReportConfigurator:
    java.lang.String APP_NAME -> a
    com.gk.datacontrol.DBClass dbmediator -> b
    android.widget.SimpleCursorAdapter exChooserAdapter -> c
    android.widget.Spinner wPointChooser -> d
    android.widget.Spinner rPointChooser -> e
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    android.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.content.Loader,android.database.Cursor) -> onLoadFinished
    void onLoaderReset(android.content.Loader) -> onLoaderReset
    void onChbClick(android.view.View) -> onChbClick
    int getPeriodInMonths() -> getPeriodInMonths
    int getWeightPointType() -> getWeightPointType
    int getRepsPointType() -> getRepsPointType
    void createReport() -> createReport
    void onBtnClick(android.view.View) -> onBtnClick
    void onLoadFinished(android.content.Loader,java.lang.Object) -> onLoadFinished
com.gk.reports.ReportConfigurator$MyCursorLoader -> com.gk.reports.ReportConfigurator$MyCursorLoader:
    com.gk.datacontrol.DBClass db -> a
    void <init>(android.content.Context,com.gk.datacontrol.DBClass) -> <init>
    android.database.Cursor loadInBackground() -> loadInBackground
    java.lang.Object loadInBackground() -> loadInBackground
com.gk.reports.ReportGraphTab -> com.gk.reports.ReportGraphTab:
    void <init>() -> <init>
    void onAttach(android.app.Activity) -> onAttach
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
com.gk.reports.ReportGraphTab$PointType -> com.gk.reports.ReportGraphTab$PointType:
    com.gk.reports.ReportGraphTab$PointType NONE -> a
    com.gk.reports.ReportGraphTab$PointType MIN -> b
    com.gk.reports.ReportGraphTab$PointType MAX -> c
    com.gk.reports.ReportGraphTab$PointType AVG -> d
    com.gk.reports.ReportGraphTab$PointType SUM -> e
    com.gk.reports.ReportGraphTab$PointType[] $VALUES -> f
    com.gk.reports.ReportGraphTab$PointType[] values() -> values
    com.gk.reports.ReportGraphTab$PointType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.gk.reports.ReportGraphTab$PointType fromInteger(int) -> fromInteger
    void <clinit>() -> <clinit>
com.gk.reports.ReportStatsTab -> com.gk.reports.ReportStatsTab:
    void <init>() -> <init>
    void onAttach(android.app.Activity) -> onAttach
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter -> com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter:
    com.gk.datacontrol.DBClass mDbmediator -> a
    void <init>(android.content.Context,com.gk.datacontrol.DBClass) -> <init>
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> runQueryOnBackgroundThread
com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter$1 -> com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter$1:
    com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter this$0 -> a
    void <init>(com.gk.simpleworkoutjournal.ExerciseEntrylistAdapter) -> <init>
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
com.gk.simpleworkoutjournal.NotesDialog -> com.gk.simpleworkoutjournal.NotesDialog:
    android.widget.EditText noteEdit -> a
    android.content.Intent notesIntent -> b
    java.lang.String note -> c
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void noteButtonClick(android.view.View) -> noteButtonClick
com.gk.simpleworkoutjournal.WJContext -> com.gk.simpleworkoutjournal.WJContext:
    com.gk.simpleworkoutjournal.WorkoutJournal activity -> a
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject contextSubj -> b
    android.widget.LinearLayout actionModeZone -> c
    android.widget.Button ctxDeleteLogBtn -> d
    android.widget.Button ctxCopyBtn -> e
    android.widget.ImageButton ctxCancelBtn -> f
    android.widget.ImageButton ctxAddBtn -> g
    android.widget.EditText ctxEditRepsField -> h
    android.widget.EditText ctxEditWeightField -> i
    android.widget.AutoCompleteTextView ctxEditExField -> j
    android.view.ActionMode thisActionMode -> k
    java.lang.String idOfSelected -> l
    void <init>(com.gk.simpleworkoutjournal.WorkoutJournal,com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject) -> <init>
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean) -> onItemCheckedStateChanged
    void copyButtonPressed() -> copyButtonPressed
    void onDeleteLogEntriesPressed() -> onDeleteLogEntriesPressed
    void onRestoreContextLookBtnPressed() -> onRestoreContextLookBtnPressed
    void onAddEditedBtnPressed() -> onAddEditedBtnPressed
    void deleteSelectedExercise() -> deleteSelectedExercise
    void onClick(android.content.DialogInterface,int) -> onClick
com.gk.simpleworkoutjournal.WJContext$1 -> com.gk.simpleworkoutjournal.WJContext$1:
    int[] $SwitchMap$com$gk$simpleworkoutjournal$WorkoutDataAdapter$Subject -> a
    void <clinit>() -> <clinit>
com.gk.simpleworkoutjournal.WorkoutDataAdapter -> com.gk.simpleworkoutjournal.WorkoutDataAdapter:
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject currSubj -> a
    java.lang.String[] monthNames -> b
    java.util.HashSet ctxCheckedItems -> c
    java.util.Calendar formattedDate -> d
    int currentIndex -> e
    java.lang.String dateString -> f
    void <init>(android.content.Context,android.database.Cursor,com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject) -> <init>
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject getSubject() -> getSubject
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    void invertCtxChecked(int) -> invertCtxChecked
    java.util.HashSet getListIdsOfCtxChecked() -> getListIdsOfCtxChecked
    int getcheckedAmount() -> getcheckedAmount
    void clearChecked() -> clearChecked
    void setIdxOfCurrent(int) -> setIdxOfCurrent
    int getIdxOfCurrent() -> getIdxOfCurrent
    int compareDates(long,long) -> compareDates
    java.lang.String getNoteForCurrent() -> getNoteForCurrent
    java.lang.String getNameForCurrent() -> getNameForCurrent
    java.lang.String getIdForCurrent() -> getIdForCurrent
com.gk.simpleworkoutjournal.WorkoutDataAdapter$1 -> com.gk.simpleworkoutjournal.WorkoutDataAdapter$1:
    int[] $SwitchMap$com$gk$simpleworkoutjournal$WorkoutDataAdapter$Subject -> a
    void <clinit>() -> <clinit>
com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject -> com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject:
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject EXERCISES -> a
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject SETS -> b
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject ALL -> c
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject[] $VALUES -> d
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject[] values() -> values
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.gk.simpleworkoutjournal.WorkoutJournal -> com.gk.simpleworkoutjournal.WorkoutJournal:
    com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject currSubj -> a
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent setsUpTrigger -> b
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent exUpTrigger -> c
    android.widget.LinearLayout notesLayout -> d
    android.widget.AutoCompleteTextView exerciseTextView -> e
    android.widget.EditText repsEdit -> f
    android.widget.EditText weightEdit -> g
    android.widget.ListView exercisesLv -> h
    android.widget.ListView setsLv -> i
    android.widget.TextView exerciseNoteTv -> j
    android.widget.TextView setNoteTv -> k
    com.gk.simpleworkoutjournal.WorkoutDataAdapter exerciseLogAdapter -> l
    com.gk.simpleworkoutjournal.WorkoutDataAdapter setsLogAdapter -> m
    com.gk.datacontrol.SetDataCursorLoader setsListDataLoader -> n
    com.gk.datacontrol.ExerciseDataCursorLoader exListDataLoader -> o
    android.widget.ImageButton switchBtn -> p
    boolean inContextMode -> q
    boolean addSetIfSameDate -> r
    java.lang.String prevExLogId -> s
    com.gk.simpleworkoutjournal.WJContext exercisesContextualMode -> t
    com.gk.simpleworkoutjournal.WJContext setsContextualMode -> u
    boolean notesShowed -> v
    com.gk.datacontrol.DBClass dbmediator -> w
    int initExPos -> x
    int initSetPos -> y
    void <init>() -> <init>
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDestroy() -> onDestroy
    void initiateListUpdate(com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject,com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent) -> initiateListUpdate
    void onBackButtonPressed(android.view.View) -> onBackButtonPressed
    void onAddButtonPressed(android.view.View) -> onAddButtonPressed
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean syncListPositions(com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject) -> syncListPositions
    void onNotesTap(android.view.View) -> onNotesTap
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onContextButtonPressed(android.view.View) -> onContextButtonPressed
    void showEditsForSubject(com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject) -> showEditsForSubject
    void moveToSelected(com.gk.simpleworkoutjournal.WorkoutDataAdapter$Subject,boolean) -> moveToSelected
    void updateNoteView(com.gk.simpleworkoutjournal.WorkoutDataAdapter) -> updateNoteView
    android.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.content.Loader,android.database.Cursor) -> onLoadFinished
    void onLoaderReset(android.content.Loader) -> onLoaderReset
    void onLoadFinished(android.content.Loader,java.lang.Object) -> onLoadFinished
com.gk.simpleworkoutjournal.WorkoutJournal$1 -> com.gk.simpleworkoutjournal.WorkoutJournal$1:
    int[] $SwitchMap$com$gk$simpleworkoutjournal$WorkoutDataAdapter$Subject -> a
    int[] $SwitchMap$com$gk$simpleworkoutjournal$WorkoutJournal$TriggerEvent -> b
    void <clinit>() -> <clinit>
com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent -> com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent:
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent NONE -> a
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent INIT -> b
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent ADD -> c
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent DELETE -> d
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent NOTEADD -> e
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent TRIG_BY_EX -> f
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent EDIT -> g
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent[] $VALUES -> h
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent[] values() -> values
    com.gk.simpleworkoutjournal.WorkoutJournal$TriggerEvent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.gk.swjmain.MainMenu -> com.gk.swjmain.MainMenu:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
com.gk.swjsettings.SwjSettings -> com.gk.swjsettings.SwjSettings:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
com.gk.swjsettings.SwjSettingsFragment -> com.gk.swjsettings.SwjSettingsFragment:
    android.preference.PreferenceFragment prefFrag -> a
    boolean createBackupConfirmed -> b
    boolean restoreBackupConfirmed -> c
    void <init>() -> <init>
    boolean copyFile(java.lang.String,java.lang.String) -> copyFile
    boolean copyDB(boolean,java.lang.String) -> copyDB
    boolean contactDev() -> contactDev
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onCreate(android.os.Bundle) -> onCreate
    android.content.Intent createEmailOnlyChooserIntent(android.content.Intent,java.lang.CharSequence) -> createEmailOnlyChooserIntent
com.jjoe64.graphview.DefaultLabelFormatter -> com.jjoe64.graphview.DefaultLabelFormatter:
    java.text.NumberFormat[] mNumberFormatter -> a
    com.jjoe64.graphview.Viewport mViewport -> b
    void <init>() -> <init>
    void setViewport(com.jjoe64.graphview.Viewport) -> setViewport
    java.lang.String formatLabel(double,boolean) -> formatLabel
com.jjoe64.graphview.GraphView -> com.jjoe64.graphview.GraphView:
    java.util.List mSeries -> b
    com.jjoe64.graphview.GridLabelRenderer mGridLabelRenderer -> c
    com.jjoe64.graphview.Viewport mViewport -> d
    java.lang.String mTitle -> e
    com.jjoe64.graphview.GraphView$Styles mStyles -> f
    com.jjoe64.graphview.SecondScale mSecondScale -> a
    com.jjoe64.graphview.GraphView$TapDetector mTapDetector -> g
    com.jjoe64.graphview.LegendRenderer mLegendRenderer -> h
    android.graphics.Paint mPaintTitle -> i
    android.graphics.Paint mPreviewPaint -> j
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void init() -> init
    void loadStyles() -> loadStyles
    com.jjoe64.graphview.GridLabelRenderer getGridLabelRenderer() -> getGridLabelRenderer
    void addSeries(com.jjoe64.graphview.series.Series) -> addSeries
    java.util.List getSeries() -> getSeries
    void onDataChanged(boolean,boolean) -> onDataChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawTitle(android.graphics.Canvas) -> drawTitle
    int getTitleHeight() -> getTitleHeight
    com.jjoe64.graphview.Viewport getViewport() -> getViewport
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    int getGraphContentLeft() -> getGraphContentLeft
    int getGraphContentTop() -> getGraphContentTop
    int getGraphContentHeight() -> getGraphContentHeight
    int getGraphContentWidth() -> getGraphContentWidth
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void computeScroll() -> computeScroll
    com.jjoe64.graphview.LegendRenderer getLegendRenderer() -> getLegendRenderer
    void setLegendRenderer(com.jjoe64.graphview.LegendRenderer) -> setLegendRenderer
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    float getTitleTextSize() -> getTitleTextSize
    void setTitleTextSize(float) -> setTitleTextSize
    int getTitleColor() -> getTitleColor
    void setTitleColor(int) -> setTitleColor
    com.jjoe64.graphview.SecondScale getSecondScale() -> getSecondScale
com.jjoe64.graphview.GraphView$1 -> com.jjoe64.graphview.GraphView$1:
com.jjoe64.graphview.GraphView$Styles -> com.jjoe64.graphview.GraphView$Styles:
    float titleTextSize -> a
    int titleColor -> b
    void <init>() -> <init>
    void <init>(com.jjoe64.graphview.GraphView$1) -> <init>
com.jjoe64.graphview.GraphView$TapDetector -> com.jjoe64.graphview.GraphView$TapDetector:
    long lastDown -> b
    android.graphics.PointF lastPoint -> c
    com.jjoe64.graphview.GraphView this$0 -> a
    void <init>(com.jjoe64.graphview.GraphView) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void <init>(com.jjoe64.graphview.GraphView,com.jjoe64.graphview.GraphView$1) -> <init>
com.jjoe64.graphview.GridLabelRenderer -> com.jjoe64.graphview.GridLabelRenderer:
    com.jjoe64.graphview.GridLabelRenderer$Styles mStyles -> a
    com.jjoe64.graphview.GraphView mGraphView -> b
    java.util.Map mStepsVertical -> c
    java.util.Map mStepsVerticalSecondScale -> d
    java.util.Map mStepsHorizontal -> e
    android.graphics.Paint mPaintLine -> f
    android.graphics.Paint mPaintLabel -> g
    android.graphics.Paint mPaintAxisTitle -> h
    boolean mIsAdjusted -> i
    java.lang.Integer mLabelVerticalWidth -> j
    boolean mLabelVerticalWidthFixed -> k
    java.lang.Integer mLabelVerticalHeight -> l
    boolean mLabelHorizontalHeightFixed -> m
    java.lang.Integer mLabelVerticalSecondScaleWidth -> n
    java.lang.Integer mLabelVerticalSecondScaleHeight -> o
    java.lang.Integer mLabelHorizontalWidth -> p
    java.lang.Integer mLabelHorizontalHeight -> q
    com.jjoe64.graphview.LabelFormatter mLabelFormatter -> r
    java.lang.String mHorizontalAxisTitle -> s
    java.lang.String mVerticalAxisTitle -> t
    int mNumVerticalLabels -> u
    int mNumHorizontalLabels -> v
    void <init>(com.jjoe64.graphview.GraphView) -> <init>
    void resetStyles() -> resetStyles
    void reloadStyles() -> reloadStyles
    float getTextSize() -> getTextSize
    int getVerticalLabelsColor() -> getVerticalLabelsColor
    android.graphics.Paint$Align getVerticalLabelsAlign() -> getVerticalLabelsAlign
    int getHorizontalLabelsColor() -> getHorizontalLabelsColor
    void invalidate(boolean,boolean) -> invalidate
    boolean adjustVerticalSecondScale() -> adjustVerticalSecondScale
    boolean adjustVertical() -> adjustVertical
    boolean adjustHorizontal() -> adjustHorizontal
    void adjust() -> adjust
    void calcLabelVerticalSize(android.graphics.Canvas) -> calcLabelVerticalSize
    void calcLabelVerticalSecondScaleSize(android.graphics.Canvas) -> calcLabelVerticalSecondScaleSize
    void calcLabelHorizontalSize(android.graphics.Canvas) -> calcLabelHorizontalSize
    void draw(android.graphics.Canvas) -> draw
    void drawHorizontalAxisTitle(android.graphics.Canvas) -> drawHorizontalAxisTitle
    void drawVerticalAxisTitle(android.graphics.Canvas) -> drawVerticalAxisTitle
    int getHorizontalAxisTitleHeight() -> getHorizontalAxisTitleHeight
    int getVerticalAxisTitleWidth() -> getVerticalAxisTitleWidth
    void drawHorizontalSteps(android.graphics.Canvas) -> drawHorizontalSteps
    void drawVerticalStepsSecondScale(android.graphics.Canvas) -> drawVerticalStepsSecondScale
    void drawVerticalSteps(android.graphics.Canvas) -> drawVerticalSteps
    double humanRound(double,boolean) -> humanRound
    com.jjoe64.graphview.GridLabelRenderer$Styles getStyles() -> getStyles
    int getLabelVerticalWidth() -> getLabelVerticalWidth
    int getLabelHorizontalHeight() -> getLabelHorizontalHeight
    void setLabelFormatter(com.jjoe64.graphview.LabelFormatter) -> setLabelFormatter
    float getVerticalAxisTitleTextSize() -> getVerticalAxisTitleTextSize
    int getVerticalAxisTitleColor() -> getVerticalAxisTitleColor
    float getHorizontalAxisTitleTextSize() -> getHorizontalAxisTitleTextSize
    int getHorizontalAxisTitleColor() -> getHorizontalAxisTitleColor
    android.graphics.Paint$Align getVerticalLabelsSecondScaleAlign() -> getVerticalLabelsSecondScaleAlign
    int getVerticalLabelsSecondScaleColor() -> getVerticalLabelsSecondScaleColor
    int getLabelVerticalSecondScaleWidth() -> getLabelVerticalSecondScaleWidth
    boolean isHorizontalLabelsVisible() -> isHorizontalLabelsVisible
    boolean isVerticalLabelsVisible() -> isVerticalLabelsVisible
    void setNumVerticalLabels(int) -> setNumVerticalLabels
    void setNumHorizontalLabels(int) -> setNumHorizontalLabels
com.jjoe64.graphview.GridLabelRenderer$GridStyle -> com.jjoe64.graphview.GridLabelRenderer$GridStyle:
    com.jjoe64.graphview.GridLabelRenderer$GridStyle BOTH -> a
    com.jjoe64.graphview.GridLabelRenderer$GridStyle VERTICAL -> b
    com.jjoe64.graphview.GridLabelRenderer$GridStyle HORIZONTAL -> c
    com.jjoe64.graphview.GridLabelRenderer$GridStyle NONE -> d
    com.jjoe64.graphview.GridLabelRenderer$GridStyle[] $VALUES -> e
    com.jjoe64.graphview.GridLabelRenderer$GridStyle[] values() -> values
    com.jjoe64.graphview.GridLabelRenderer$GridStyle valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean drawVertical() -> drawVertical
    boolean drawHorizontal() -> drawHorizontal
    void <clinit>() -> <clinit>
com.jjoe64.graphview.GridLabelRenderer$Styles -> com.jjoe64.graphview.GridLabelRenderer$Styles:
    float textSize -> a
    android.graphics.Paint$Align verticalLabelsAlign -> b
    android.graphics.Paint$Align verticalLabelsSecondScaleAlign -> c
    int verticalLabelsColor -> d
    int verticalLabelsSecondScaleColor -> e
    int horizontalLabelsColor -> f
    int gridColor -> g
    boolean highlightZeroLines -> h
    int padding -> i
    float verticalAxisTitleTextSize -> j
    int verticalAxisTitleColor -> k
    float horizontalAxisTitleTextSize -> l
    int horizontalAxisTitleColor -> m
    boolean horizontalLabelsVisible -> n
    boolean verticalLabelsVisible -> o
    com.jjoe64.graphview.GridLabelRenderer$GridStyle gridStyle -> p
    int labelsSpace -> q
    com.jjoe64.graphview.GridLabelRenderer this$0 -> r
    void <init>(com.jjoe64.graphview.GridLabelRenderer) -> <init>
com.jjoe64.graphview.LabelFormatter -> com.jjoe64.graphview.LabelFormatter:
    java.lang.String formatLabel(double,boolean) -> formatLabel
    void setViewport(com.jjoe64.graphview.Viewport) -> setViewport
com.jjoe64.graphview.LegendRenderer -> com.jjoe64.graphview.LegendRenderer:
    com.jjoe64.graphview.LegendRenderer$Styles mStyles -> a
    com.jjoe64.graphview.GraphView mGraphView -> b
    boolean mIsVisible -> c
    android.graphics.Paint mPaint -> d
    int cachedLegendWidth -> e
    void <init>(com.jjoe64.graphview.GraphView) -> <init>
    void resetStyles() -> resetStyles
    void draw(android.graphics.Canvas) -> draw
    void setVisible(boolean) -> setVisible
    void setBackgroundColor(int) -> setBackgroundColor
    void setMargin(int) -> setMargin
    void setAlign(com.jjoe64.graphview.LegendRenderer$LegendAlign) -> setAlign
com.jjoe64.graphview.LegendRenderer$1 -> com.jjoe64.graphview.LegendRenderer$1:
    int[] $SwitchMap$com$jjoe64$graphview$LegendRenderer$LegendAlign -> a
    void <clinit>() -> <clinit>
com.jjoe64.graphview.LegendRenderer$LegendAlign -> com.jjoe64.graphview.LegendRenderer$LegendAlign:
    com.jjoe64.graphview.LegendRenderer$LegendAlign TOP -> a
    com.jjoe64.graphview.LegendRenderer$LegendAlign MIDDLE -> b
    com.jjoe64.graphview.LegendRenderer$LegendAlign BOTTOM -> c
    com.jjoe64.graphview.LegendRenderer$LegendAlign[] $VALUES -> d
    com.jjoe64.graphview.LegendRenderer$LegendAlign[] values() -> values
    com.jjoe64.graphview.LegendRenderer$LegendAlign valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jjoe64.graphview.LegendRenderer$Styles -> com.jjoe64.graphview.LegendRenderer$Styles:
    float textSize -> a
    int spacing -> b
    int padding -> c
    int width -> d
    int backgroundColor -> e
    int textColor -> f
    int margin -> g
    com.jjoe64.graphview.LegendRenderer$LegendAlign align -> h
    android.graphics.Point fixedPosition -> i
    com.jjoe64.graphview.LegendRenderer this$0 -> j
    void <init>(com.jjoe64.graphview.LegendRenderer) -> <init>
    void <init>(com.jjoe64.graphview.LegendRenderer,com.jjoe64.graphview.LegendRenderer$1) -> <init>
com.jjoe64.graphview.SecondScale -> com.jjoe64.graphview.SecondScale:
    com.jjoe64.graphview.Viewport mViewport -> a
    java.util.List mSeries -> b
    boolean mYAxisBoundsManual -> d
    double mMinY -> e
    double mMaxY -> f
    com.jjoe64.graphview.LabelFormatter mLabelFormatter -> c
    void <init>(com.jjoe64.graphview.Viewport) -> <init>
    java.util.List getSeries() -> getSeries
    double getMinY() -> getMinY
    double getMaxY() -> getMaxY
    boolean isYAxisBoundsManual() -> isYAxisBoundsManual
    com.jjoe64.graphview.LabelFormatter getLabelFormatter() -> getLabelFormatter
com.jjoe64.graphview.Viewport -> com.jjoe64.graphview.Viewport:
    android.view.ScaleGestureDetector$OnScaleGestureListener mScaleGestureListener -> j
    android.view.GestureDetector$SimpleOnGestureListener mGestureListener -> k
    android.graphics.Paint mPaint -> l
    com.jjoe64.graphview.GraphView mGraphView -> m
    android.graphics.RectF mCurrentViewport -> a
    android.graphics.RectF mCompleteRange -> b
    boolean mScalingActive -> c
    float mScalingBeginWidth -> d
    float mScalingBeginLeft -> e
    boolean mIsScrollable -> n
    boolean mIsScalable -> o
    android.view.GestureDetector mGestureDetector -> f
    android.view.ScaleGestureDetector mScaleGestureDetector -> g
    android.widget.OverScroller mScroller -> h
    android.support.v4.widget.EdgeEffectCompat mEdgeEffectTop -> p
    android.support.v4.widget.EdgeEffectCompat mEdgeEffectBottom -> q
    android.support.v4.widget.EdgeEffectCompat mEdgeEffectLeft -> r
    android.support.v4.widget.EdgeEffectCompat mEdgeEffectRight -> s
    boolean mEdgeEffectBottomActive -> t
    boolean mEdgeEffectLeftActive -> u
    boolean mEdgeEffectRightActive -> v
    android.graphics.RectF mScrollerStartViewport -> w
    float mScrollingReferenceX -> i
    com.jjoe64.graphview.Viewport$AxisBoundsStatus mXAxisBoundsStatus -> x
    com.jjoe64.graphview.Viewport$AxisBoundsStatus mYAxisBoundsStatus -> y
    boolean mXAxisBoundsManual -> z
    boolean mYAxisBoundsManual -> A
    int mBackgroundColor -> B
    void <init>(com.jjoe64.graphview.GraphView) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setXAxisBoundsStatus(com.jjoe64.graphview.Viewport$AxisBoundsStatus) -> setXAxisBoundsStatus
    void setYAxisBoundsStatus(com.jjoe64.graphview.Viewport$AxisBoundsStatus) -> setYAxisBoundsStatus
    com.jjoe64.graphview.Viewport$AxisBoundsStatus getXAxisBoundsStatus() -> getXAxisBoundsStatus
    void calcCompleteRange() -> calcCompleteRange
    double getMinX(boolean) -> getMinX
    double getMaxX(boolean) -> getMaxX
    double getMinY(boolean) -> getMinY
    double getMaxY(boolean) -> getMaxY
    void setMaxY(double) -> setMaxY
    void setMinY(double) -> setMinY
    void setMaxX(double) -> setMaxX
    void setMinX(double) -> setMinX
    void releaseEdgeEffects() -> releaseEdgeEffects
    void computeScroll() -> computeScroll
    void drawEdgeEffectsUnclipped(android.graphics.Canvas) -> drawEdgeEffectsUnclipped
    void drawFirst(android.graphics.Canvas) -> drawFirst
    void draw(android.graphics.Canvas) -> draw
    boolean isXAxisBoundsManual() -> isXAxisBoundsManual
    boolean isYAxisBoundsManual() -> isYAxisBoundsManual
    void setYAxisBoundsManual(boolean) -> setYAxisBoundsManual
    com.jjoe64.graphview.GraphView access$000(com.jjoe64.graphview.Viewport) -> access$000
    boolean access$100(com.jjoe64.graphview.Viewport) -> access$100
    com.jjoe64.graphview.Viewport$AxisBoundsStatus access$202(com.jjoe64.graphview.Viewport,com.jjoe64.graphview.Viewport$AxisBoundsStatus) -> access$202
    boolean access$300(com.jjoe64.graphview.Viewport) -> access$300
    void access$400(com.jjoe64.graphview.Viewport) -> access$400
    android.graphics.RectF access$500(com.jjoe64.graphview.Viewport) -> access$500
    android.support.v4.widget.EdgeEffectCompat access$600(com.jjoe64.graphview.Viewport) -> access$600
    boolean access$702(com.jjoe64.graphview.Viewport,boolean) -> access$702
    android.support.v4.widget.EdgeEffectCompat access$800(com.jjoe64.graphview.Viewport) -> access$800
    boolean access$902(com.jjoe64.graphview.Viewport,boolean) -> access$902
    android.support.v4.widget.EdgeEffectCompat access$1000(com.jjoe64.graphview.Viewport) -> access$1000
    boolean access$1102(com.jjoe64.graphview.Viewport,boolean) -> access$1102
com.jjoe64.graphview.Viewport$1 -> com.jjoe64.graphview.Viewport$1:
    com.jjoe64.graphview.Viewport this$0 -> a
    void <init>(com.jjoe64.graphview.Viewport) -> <init>
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
    boolean onScaleBegin(android.view.ScaleGestureDetector) -> onScaleBegin
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
com.jjoe64.graphview.Viewport$2 -> com.jjoe64.graphview.Viewport$2:
    com.jjoe64.graphview.Viewport this$0 -> a
    void <init>(com.jjoe64.graphview.Viewport) -> <init>
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.jjoe64.graphview.Viewport$AxisBoundsStatus -> com.jjoe64.graphview.Viewport$AxisBoundsStatus:
    com.jjoe64.graphview.Viewport$AxisBoundsStatus INITIAL -> a
    com.jjoe64.graphview.Viewport$AxisBoundsStatus AUTO_ADJUSTED -> b
    com.jjoe64.graphview.Viewport$AxisBoundsStatus READJUST_AFTER_SCALE -> c
    com.jjoe64.graphview.Viewport$AxisBoundsStatus FIX -> d
    com.jjoe64.graphview.Viewport$AxisBoundsStatus[] $VALUES -> e
    com.jjoe64.graphview.Viewport$AxisBoundsStatus[] values() -> values
    com.jjoe64.graphview.Viewport$AxisBoundsStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jjoe64.graphview.helper.DateAsXAxisLabelFormatter -> com.jjoe64.graphview.helper.DateAsXAxisLabelFormatter:
    java.text.DateFormat mDateFormat -> c
    java.util.Calendar mCalendar -> d
    void <init>(android.content.Context,java.text.DateFormat) -> <init>
    java.lang.String formatLabel(double,boolean) -> formatLabel
com.jjoe64.graphview.series.BaseSeries -> com.jjoe64.graphview.series.BaseSeries:
    java.util.List mData -> b
    java.util.Map mDataPoints -> c
    java.lang.String mTitle -> d
    int mColor -> e
    com.jjoe64.graphview.series.OnDataPointTapListener mOnDataPointTapListener -> a
    java.util.List mGraphViews -> f
    void <init>() -> <init>
    void <init>(com.jjoe64.graphview.series.DataPointInterface[]) -> <init>
    double getLowestValueX() -> getLowestValueX
    double getHighestValueX() -> getHighestValueX
    double getLowestValueY() -> getLowestValueY
    double getHighestValueY() -> getHighestValueY
    java.util.Iterator getValues(double,double) -> getValues
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    int getColor() -> getColor
    void setColor(int) -> setColor
    void onTap(float,float) -> onTap
    com.jjoe64.graphview.series.DataPointInterface findDataPoint(float,float) -> findDataPoint
    void registerDataPoint(float,float,com.jjoe64.graphview.series.DataPointInterface) -> registerDataPoint
    void resetDataPoints() -> resetDataPoints
    void onGraphViewAttached(com.jjoe64.graphview.GraphView) -> onGraphViewAttached
    boolean isEmpty() -> isEmpty
    java.util.List access$000(com.jjoe64.graphview.series.BaseSeries) -> access$000
com.jjoe64.graphview.series.BaseSeries$1 -> com.jjoe64.graphview.series.BaseSeries$1:
    java.util.Iterator org -> a
    com.jjoe64.graphview.series.DataPointInterface nextValue -> b
    com.jjoe64.graphview.series.DataPointInterface nextNextValue -> c
    boolean plusOne -> d
    double val$from -> e
    double val$until -> f
    com.jjoe64.graphview.series.BaseSeries this$0 -> g
    void <init>(com.jjoe64.graphview.series.BaseSeries,double,double) -> <init>
    void remove() -> remove
    com.jjoe64.graphview.series.DataPointInterface next() -> next
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.jjoe64.graphview.series.DataPoint -> com.jjoe64.graphview.series.DataPoint:
    double x -> a
    double y -> b
    void <init>(java.util.Date,double) -> <init>
    double getX() -> getX
    double getY() -> getY
    java.lang.String toString() -> toString
com.jjoe64.graphview.series.DataPointInterface -> com.jjoe64.graphview.series.DataPointInterface:
    double getX() -> getX
    double getY() -> getY
com.jjoe64.graphview.series.LineGraphSeries -> com.jjoe64.graphview.series.LineGraphSeries:
    com.jjoe64.graphview.series.LineGraphSeries$Styles mStyles -> b
    android.graphics.Paint mPaint -> c
    android.graphics.Paint mPaintBackground -> d
    android.graphics.Path mPathBackground -> e
    android.graphics.Path mPath -> f
    android.graphics.Paint mCustomPaint -> g
    void <init>() -> <init>
    void <init>(com.jjoe64.graphview.series.DataPointInterface[]) -> <init>
    void init() -> init
    void draw(com.jjoe64.graphview.GraphView,android.graphics.Canvas,boolean) -> draw
    void setDrawDataPoints(boolean) -> setDrawDataPoints
    void setDataPointsRadius(float) -> setDataPointsRadius
com.jjoe64.graphview.series.LineGraphSeries$1 -> com.jjoe64.graphview.series.LineGraphSeries$1:
com.jjoe64.graphview.series.LineGraphSeries$Styles -> com.jjoe64.graphview.series.LineGraphSeries$Styles:
    int thickness -> b
    boolean drawBackground -> c
    boolean drawDataPoints -> d
    float dataPointsRadius -> e
    int backgroundColor -> f
    com.jjoe64.graphview.series.LineGraphSeries this$0 -> a
    void <init>(com.jjoe64.graphview.series.LineGraphSeries) -> <init>
    void <init>(com.jjoe64.graphview.series.LineGraphSeries,com.jjoe64.graphview.series.LineGraphSeries$1) -> <init>
    int access$100(com.jjoe64.graphview.series.LineGraphSeries$Styles) -> access$100
    int access$200(com.jjoe64.graphview.series.LineGraphSeries$Styles) -> access$200
    boolean access$300(com.jjoe64.graphview.series.LineGraphSeries$Styles) -> access$300
    boolean access$400(com.jjoe64.graphview.series.LineGraphSeries$Styles) -> access$400
    float access$500(com.jjoe64.graphview.series.LineGraphSeries$Styles) -> access$500
    boolean access$402(com.jjoe64.graphview.series.LineGraphSeries$Styles,boolean) -> access$402
    float access$502(com.jjoe64.graphview.series.LineGraphSeries$Styles,float) -> access$502
com.jjoe64.graphview.series.OnDataPointTapListener -> com.jjoe64.graphview.series.OnDataPointTapListener:
    void onTap(com.jjoe64.graphview.series.Series,com.jjoe64.graphview.series.DataPointInterface) -> onTap
com.jjoe64.graphview.series.Series -> com.jjoe64.graphview.series.Series:
    double getLowestValueX() -> getLowestValueX
    double getHighestValueX() -> getHighestValueX
    double getLowestValueY() -> getLowestValueY
    double getHighestValueY() -> getHighestValueY
    java.util.Iterator getValues(double,double) -> getValues
    void draw(com.jjoe64.graphview.GraphView,android.graphics.Canvas,boolean) -> draw
    java.lang.String getTitle() -> getTitle
    int getColor() -> getColor
    void onTap(float,float) -> onTap
    void onGraphViewAttached(com.jjoe64.graphview.GraphView) -> onGraphViewAttached
    boolean isEmpty() -> isEmpty
